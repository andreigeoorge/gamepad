
usb_hid_joystick_to_gamepad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000836c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080084f4  080084f4  000184f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008564  08008564  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  08008564  08008564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800856c  0800856c  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800856c  0800856c  0001856c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008570  08008570  00018570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08008574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020114  2**0
                  CONTENTS
 10 .bss          00000ae0  20000114  20000114  00020114  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bf4  20000bf4  00020114  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   000133f0  00000000  00000000  00020187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031c6  00000000  00000000  00033577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001188  00000000  00000000  00036740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d5e  00000000  00000000  000378c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024b12  00000000  00000000  00038626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001577c  00000000  00000000  0005d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d91a7  00000000  00000000  000728b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004930  00000000  00000000  0014ba5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0015038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000114 	.word	0x20000114
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080084dc 	.word	0x080084dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000118 	.word	0x20000118
 80001c4:	080084dc 	.word	0x080084dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b089      	sub	sp, #36	; 0x24
 80004c8:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	uint32_t uiAdc1Val = 0U;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
	uint32_t uiAdc2Val = 0U;
 80004ce:	2300      	movs	r3, #0
 80004d0:	613b      	str	r3, [r7, #16]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d2:	f000 fcd7 	bl	8000e84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d6:	f000 f8bd 	bl	8000654 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004da:	f000 fa63 	bl	80009a4 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 80004de:	f007 fb67 	bl	8007bb0 <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 80004e2:	f000 f921 	bl	8000728 <MX_ADC1_Init>
	MX_ADC2_Init();
 80004e6:	f000 f973 	bl	80007d0 <MX_ADC2_Init>
	MX_TIM4_Init();
 80004ea:	f000 f9c5 	bl	8000878 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80004ee:	2100      	movs	r1, #0
 80004f0:	4851      	ldr	r0, [pc, #324]	; (8000638 <main+0x174>)
 80004f2:	f003 fb73 	bl	8003bdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80004f6:	2104      	movs	r1, #4
 80004f8:	484f      	ldr	r0, [pc, #316]	; (8000638 <main+0x174>)
 80004fa:	f003 fb6f 	bl	8003bdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80004fe:	2108      	movs	r1, #8
 8000500:	484d      	ldr	r0, [pc, #308]	; (8000638 <main+0x174>)
 8000502:	f003 fb6b 	bl	8003bdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000506:	210c      	movs	r1, #12
 8000508:	484b      	ldr	r0, [pc, #300]	; (8000638 <main+0x174>)
 800050a:	f003 fb67 	bl	8003bdc <HAL_TIM_PWM_Start>

	ucGamePadBuffer[0] = 0U; /*X movement (0: not moving, +ve: Right movement, -ve: Left movement)*/
 800050e:	2300      	movs	r3, #0
 8000510:	713b      	strb	r3, [r7, #4]
	ucGamePadBuffer[1] = 0U; /*Y movement (0: not moving, +ve: Down movement, -ve: Up movement)*/
 8000512:	2300      	movs	r3, #0
 8000514:	717b      	strb	r3, [r7, #5]
	ucGamePadBuffer[2] = 0x90U; /*Right and Left clicks (0: None, 1: Left Click, 2: Right click)*/
 8000516:	2390      	movs	r3, #144	; 0x90
 8000518:	71bb      	strb	r3, [r7, #6]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/*Get the ADC1 value*/
		HAL_ADC_Start(&hadc1);
 800051a:	4848      	ldr	r0, [pc, #288]	; (800063c <main+0x178>)
 800051c:	f000 fd8c 	bl	8001038 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 5U) == HAL_OK) {
 8000520:	2105      	movs	r1, #5
 8000522:	4846      	ldr	r0, [pc, #280]	; (800063c <main+0x178>)
 8000524:	f000 fe8d 	bl	8001242 <HAL_ADC_PollForConversion>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d103      	bne.n	8000536 <main+0x72>
			uiAdc1Val = HAL_ADC_GetValue(&hadc1);
 800052e:	4843      	ldr	r0, [pc, #268]	; (800063c <main+0x178>)
 8000530:	f000 ff12 	bl	8001358 <HAL_ADC_GetValue>
 8000534:	6178      	str	r0, [r7, #20]
		}
		HAL_ADC_Stop(&hadc1);
 8000536:	4841      	ldr	r0, [pc, #260]	; (800063c <main+0x178>)
 8000538:	f000 fe50 	bl	80011dc <HAL_ADC_Stop>

		/*Get the ADC2 value*/
		HAL_ADC_Start(&hadc2);
 800053c:	4840      	ldr	r0, [pc, #256]	; (8000640 <main+0x17c>)
 800053e:	f000 fd7b 	bl	8001038 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc2, 5U) == HAL_OK) {
 8000542:	2105      	movs	r1, #5
 8000544:	483e      	ldr	r0, [pc, #248]	; (8000640 <main+0x17c>)
 8000546:	f000 fe7c 	bl	8001242 <HAL_ADC_PollForConversion>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d103      	bne.n	8000558 <main+0x94>
			uiAdc2Val = HAL_ADC_GetValue(&hadc2);
 8000550:	483b      	ldr	r0, [pc, #236]	; (8000640 <main+0x17c>)
 8000552:	f000 ff01 	bl	8001358 <HAL_ADC_GetValue>
 8000556:	6138      	str	r0, [r7, #16]
		}
		HAL_ADC_Stop(&hadc2);
 8000558:	4839      	ldr	r0, [pc, #228]	; (8000640 <main+0x17c>)
 800055a:	f000 fe3f 	bl	80011dc <HAL_ADC_Stop>

		JoystickToLeds(uiAdc1Val, uiAdc2Val, &Joystick_t.up, &Joystick_t.down,
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	b2d8      	uxtb	r0, r3
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	b2d9      	uxtb	r1, r3
 8000566:	f107 0308 	add.w	r3, r7, #8
 800056a:	1c5c      	adds	r4, r3, #1
 800056c:	f107 0208 	add.w	r2, r7, #8
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	3303      	adds	r3, #3
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	3302      	adds	r3, #2
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	4623      	mov	r3, r4
 8000582:	f000 fa67 	bl	8000a54 <JoystickToLeds>
				&Joystick_t.left, &Joystick_t.right);

		/*Modify PWM duty cycle according to ADCs values*/
		htim4.Instance->CCR1 = (uint32_t) Joystick_t.down;
 8000586:	7a7a      	ldrb	r2, [r7, #9]
 8000588:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <main+0x174>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = (uint32_t) Joystick_t.right;
 800058e:	7afa      	ldrb	r2, [r7, #11]
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <main+0x174>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR3 = (uint32_t) Joystick_t.up;
 8000596:	7a3a      	ldrb	r2, [r7, #8]
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <main+0x174>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR4 = (uint32_t) Joystick_t.left;
 800059e:	7aba      	ldrb	r2, [r7, #10]
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <main+0x174>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	641a      	str	r2, [r3, #64]	; 0x40

		/*Read GPIO Buttons state and update the GamePad signal*/
		BtnState0 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);
 80005a6:	2104      	movs	r1, #4
 80005a8:	4826      	ldr	r0, [pc, #152]	; (8000644 <main+0x180>)
 80005aa:	f001 fbaf 	bl	8001d0c <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	73fb      	strb	r3, [r7, #15]
		BtnState1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
 80005b2:	2108      	movs	r1, #8
 80005b4:	4823      	ldr	r0, [pc, #140]	; (8000644 <main+0x180>)
 80005b6:	f001 fba9 	bl	8001d0c <HAL_GPIO_ReadPin>
 80005ba:	4603      	mov	r3, r0
 80005bc:	73bb      	strb	r3, [r7, #14]
		BtnState2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 80005be:	2110      	movs	r1, #16
 80005c0:	4820      	ldr	r0, [pc, #128]	; (8000644 <main+0x180>)
 80005c2:	f001 fba3 	bl	8001d0c <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	737b      	strb	r3, [r7, #13]
		BtnState3 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5);
 80005ca:	2120      	movs	r1, #32
 80005cc:	481d      	ldr	r0, [pc, #116]	; (8000644 <main+0x180>)
 80005ce:	f001 fb9d 	bl	8001d0c <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	733b      	strb	r3, [r7, #12]

		ucGamePadBuffer[2] = (((uint8_t)BtnState0 << 0U) | ((uint8_t)BtnState1 << 1U)
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	b25a      	sxtb	r2, r3
 80005dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	b25a      	sxtb	r2, r3
				| ((uint8_t)BtnState2 << 2U) | ((uint8_t)BtnState3 << 3U) | 0x90U);
 80005e4:	7b7b      	ldrb	r3, [r7, #13]
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	4313      	orrs	r3, r2
 80005ec:	b25a      	sxtb	r2, r3
 80005ee:	7b3b      	ldrb	r3, [r7, #12]
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	4313      	orrs	r3, r2
 80005f6:	b25b      	sxtb	r3, r3
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80005fe:	b2db      	uxtb	r3, r3
		ucGamePadBuffer[2] = (((uint8_t)BtnState0 << 0U) | ((uint8_t)BtnState1 << 1U)
 8000600:	71bb      	strb	r3, [r7, #6]

		/*Convert Joystick reads into Mouse signals*/
		JoystickToUsb(uiAdc1Val, uiAdc2Val, &ucGamePadBuffer[0],
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	b2d8      	uxtb	r0, r3
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	b2d9      	uxtb	r1, r3
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	3301      	adds	r3, #1
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	f000 fa81 	bl	8000b16 <JoystickToUsb>
				&ucGamePadBuffer[1]);

		ucGamePadBuffer[2] 	= 0x90U;
 8000614:	2390      	movs	r3, #144	; 0x90
 8000616:	71bb      	strb	r3, [r7, #6]
		DBG_SIZE_PIN_STATE	= sizeof(GPIO_PinState);
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <main+0x184>)
 800061a:	2201      	movs	r2, #1
 800061c:	601a      	str	r2, [r3, #0]
		DBG_VAL_PIN_STATE	= BtnState0;
 800061e:	4a0b      	ldr	r2, [pc, #44]	; (800064c <main+0x188>)
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	7013      	strb	r3, [r2, #0]

		/*Send the Mouse signals through USB*/
		USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, ucGamePadBuffer,
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2203      	movs	r2, #3
 8000628:	4619      	mov	r1, r3
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <main+0x18c>)
 800062c:	f005 fe40 	bl	80062b0 <USBD_CUSTOM_HID_SendReport>
				GAMEPAD_BUFF_SIZE_UC);
		HAL_Delay(100U);
 8000630:	2064      	movs	r0, #100	; 0x64
 8000632:	f000 fc99 	bl	8000f68 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 8000636:	e770      	b.n	800051a <main+0x56>
 8000638:	200001c0 	.word	0x200001c0
 800063c:	20000130 	.word	0x20000130
 8000640:	20000178 	.word	0x20000178
 8000644:	40021000 	.word	0x40021000
 8000648:	20000208 	.word	0x20000208
 800064c:	2000020c 	.word	0x2000020c
 8000650:	20000218 	.word	0x20000218

08000654 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f007 ff0e 	bl	8008484 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a27      	ldr	r2, [pc, #156]	; (8000720 <SystemClock_Config+0xcc>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a21      	ldr	r2, [pc, #132]	; (8000724 <SystemClock_Config+0xd0>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80006c4:	2308      	movs	r3, #8
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80006c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006cc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d2:	2307      	movs	r3, #7
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fd66 	bl	80031ac <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x96>
		Error_Handler();
 80006e6:	f000 fa5f 	bl	8000ba8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fa:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2105      	movs	r1, #5
 8000708:	4618      	mov	r0, r3
 800070a:	f002 ffc7 	bl	800369c <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xc4>
		Error_Handler();
 8000714:	f000 fa48 	bl	8000ba8 <Error_Handler>
	}
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	; 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800072e:	463b      	mov	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800073c:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <MX_ADC1_Init+0xa0>)
 800073e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000742:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000746:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800074a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800074e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000758:	2200      	movs	r2, #0
 800075a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000766:	2200      	movs	r2, #0
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800076c:	4a17      	ldr	r2, [pc, #92]	; (80007cc <MX_ADC1_Init+0xa4>)
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000778:	2201      	movs	r2, #1
 800077a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000786:	2201      	movs	r2, #1
 8000788:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800078a:	480e      	ldr	r0, [pc, #56]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800078c:	f000 fc10 	bl	8000fb0 <HAL_ADC_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x72>
		Error_Handler();
 8000796:	f000 fa07 	bl	8000ba8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800079a:	2301      	movs	r3, #1
 800079c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800079e:	2301      	movs	r3, #1
 80007a0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_ADC1_Init+0x9c>)
 80007ac:	f000 fde2 	bl	8001374 <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x92>
		Error_Handler();
 80007b6:	f000 f9f7 	bl	8000ba8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000130 	.word	0x20000130
 80007c8:	40012000 	.word	0x40012000
 80007cc:	0f000001 	.word	0x0f000001

080007d0 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80007e2:	4b22      	ldr	r3, [pc, #136]	; (800086c <MX_ADC2_Init+0x9c>)
 80007e4:	4a22      	ldr	r2, [pc, #136]	; (8000870 <MX_ADC2_Init+0xa0>)
 80007e6:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <MX_ADC2_Init+0x9c>)
 80007ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ee:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_ADC2_Init+0x9c>)
 80007f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007f6:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_ADC2_Init+0x9c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_ADC2_Init+0x9c>)
 8000800:	2200      	movs	r2, #0
 8000802:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_ADC2_Init+0x9c>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_ADC2_Init+0x9c>)
 800080e:	2200      	movs	r2, #0
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_ADC2_Init+0x9c>)
 8000814:	4a17      	ldr	r2, [pc, #92]	; (8000874 <MX_ADC2_Init+0xa4>)
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_ADC2_Init+0x9c>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_ADC2_Init+0x9c>)
 8000820:	2201      	movs	r2, #1
 8000822:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_ADC2_Init+0x9c>)
 8000826:	2200      	movs	r2, #0
 8000828:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_ADC2_Init+0x9c>)
 800082e:	2201      	movs	r2, #1
 8000830:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000832:	480e      	ldr	r0, [pc, #56]	; (800086c <MX_ADC2_Init+0x9c>)
 8000834:	f000 fbbc 	bl	8000fb0 <HAL_ADC_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC2_Init+0x72>
		Error_Handler();
 800083e:	f000 f9b3 	bl	8000ba8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000842:	2302      	movs	r3, #2
 8000844:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000846:	2301      	movs	r3, #1
 8000848:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 800084e:	463b      	mov	r3, r7
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <MX_ADC2_Init+0x9c>)
 8000854:	f000 fd8e 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC2_Init+0x92>
		Error_Handler();
 800085e:	f000 f9a3 	bl	8000ba8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000178 	.word	0x20000178
 8000870:	40012100 	.word	0x40012100
 8000874:	0f000001 	.word	0x0f000001

08000878 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b08e      	sub	sp, #56	; 0x38
 800087c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800087e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800088c:	f107 0320 	add.w	r3, r7, #32
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
 80008a4:	615a      	str	r2, [r3, #20]
 80008a6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80008a8:	4b3c      	ldr	r3, [pc, #240]	; (800099c <MX_TIM4_Init+0x124>)
 80008aa:	4a3d      	ldr	r2, [pc, #244]	; (80009a0 <MX_TIM4_Init+0x128>)
 80008ac:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16;
 80008ae:	4b3b      	ldr	r3, [pc, #236]	; (800099c <MX_TIM4_Init+0x124>)
 80008b0:	2210      	movs	r2, #16
 80008b2:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b4:	4b39      	ldr	r3, [pc, #228]	; (800099c <MX_TIM4_Init+0x124>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100;
 80008ba:	4b38      	ldr	r3, [pc, #224]	; (800099c <MX_TIM4_Init+0x124>)
 80008bc:	2264      	movs	r2, #100	; 0x64
 80008be:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c0:	4b36      	ldr	r3, [pc, #216]	; (800099c <MX_TIM4_Init+0x124>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b35      	ldr	r3, [pc, #212]	; (800099c <MX_TIM4_Init+0x124>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80008cc:	4833      	ldr	r0, [pc, #204]	; (800099c <MX_TIM4_Init+0x124>)
 80008ce:	f003 f8dd 	bl	8003a8c <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM4_Init+0x64>
		Error_Handler();
 80008d8:	f000 f966 	bl	8000ba8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80008e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e6:	4619      	mov	r1, r3
 80008e8:	482c      	ldr	r0, [pc, #176]	; (800099c <MX_TIM4_Init+0x124>)
 80008ea:	f003 fb01 	bl	8003ef0 <HAL_TIM_ConfigClockSource>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM4_Init+0x80>
		Error_Handler();
 80008f4:	f000 f958 	bl	8000ba8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80008f8:	4828      	ldr	r0, [pc, #160]	; (800099c <MX_TIM4_Init+0x124>)
 80008fa:	f003 f916 	bl	8003b2a <HAL_TIM_PWM_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM4_Init+0x90>
		Error_Handler();
 8000904:	f000 f950 	bl	8000ba8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000910:	f107 0320 	add.w	r3, r7, #32
 8000914:	4619      	mov	r1, r3
 8000916:	4821      	ldr	r0, [pc, #132]	; (800099c <MX_TIM4_Init+0x124>)
 8000918:	f003 fece 	bl	80046b8 <HAL_TIMEx_MasterConfigSynchronization>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM4_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8000922:	f000 f941 	bl	8000ba8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000926:	2360      	movs	r3, #96	; 0x60
 8000928:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 100;
 800092a:	2364      	movs	r3, #100	; 0x64
 800092c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	4619      	mov	r1, r3
 800093c:	4817      	ldr	r0, [pc, #92]	; (800099c <MX_TIM4_Init+0x124>)
 800093e:	f003 fa15 	bl	8003d6c <HAL_TIM_PWM_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM4_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8000948:	f000 f92e 	bl	8000ba8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2204      	movs	r2, #4
 8000950:	4619      	mov	r1, r3
 8000952:	4812      	ldr	r0, [pc, #72]	; (800099c <MX_TIM4_Init+0x124>)
 8000954:	f003 fa0a 	bl	8003d6c <HAL_TIM_PWM_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM4_Init+0xea>
			!= HAL_OK) {
		Error_Handler();
 800095e:	f000 f923 	bl	8000ba8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2208      	movs	r2, #8
 8000966:	4619      	mov	r1, r3
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <MX_TIM4_Init+0x124>)
 800096a:	f003 f9ff 	bl	8003d6c <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM4_Init+0x100>
			!= HAL_OK) {
		Error_Handler();
 8000974:	f000 f918 	bl	8000ba8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	220c      	movs	r2, #12
 800097c:	4619      	mov	r1, r3
 800097e:	4807      	ldr	r0, [pc, #28]	; (800099c <MX_TIM4_Init+0x124>)
 8000980:	f003 f9f4 	bl	8003d6c <HAL_TIM_PWM_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM4_Init+0x116>
			!= HAL_OK) {
		Error_Handler();
 800098a:	f000 f90d 	bl	8000ba8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800098e:	4803      	ldr	r0, [pc, #12]	; (800099c <MX_TIM4_Init+0x124>)
 8000990:	f000 f9ce 	bl	8000d30 <HAL_TIM_MspPostInit>

}
 8000994:	bf00      	nop
 8000996:	3738      	adds	r7, #56	; 0x38
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200001c0 	.word	0x200001c0
 80009a0:	40000800 	.word	0x40000800

080009a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <MX_GPIO_Init+0xa8>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <MX_GPIO_Init+0xa8>)
 80009c4:	f043 0310 	orr.w	r3, r3, #16
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_GPIO_Init+0xa8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0310 	and.w	r3, r3, #16
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_GPIO_Init+0xa8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <MX_GPIO_Init+0xa8>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_GPIO_Init+0xa8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_GPIO_Init+0xa8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <MX_GPIO_Init+0xa8>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_GPIO_Init+0xa8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_GPIO_Init+0xa8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <MX_GPIO_Init+0xa8>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_GPIO_Init+0xa8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pins : PE2 PE3 PE4 PE5 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8000a2a:	233c      	movs	r3, #60	; 0x3c
 8000a2c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_GPIO_Init+0xac>)
 8000a3e:	f000 ffc9 	bl	80019d4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40021000 	.word	0x40021000

08000a54 <JoystickToLeds>:

/* USER CODE BEGIN 4 */
void JoystickToLeds(uint8_t ucAdcXIn, uint8_t ucAdcYIn, uint8_t *ucPosUpOut,
		uint8_t *ucPosDownOut, uint8_t *ucPosLeftOut, uint8_t *ucPosRightOut) {
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60ba      	str	r2, [r7, #8]
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4603      	mov	r3, r0
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	460b      	mov	r3, r1
 8000a64:	73bb      	strb	r3, [r7, #14]
	/*X AXIS*/
	if (ucAdcXIn > 123U && ucAdcXIn < 135U) /*MIDDLE*/
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	2b7b      	cmp	r3, #123	; 0x7b
 8000a6a:	d909      	bls.n	8000a80 <JoystickToLeds+0x2c>
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b86      	cmp	r3, #134	; 0x86
 8000a70:	d806      	bhi.n	8000a80 <JoystickToLeds+0x2c>
	{
		*ucPosUpOut = 0U;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
		*ucPosDownOut = 0U;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	e01b      	b.n	8000ab8 <JoystickToLeds+0x64>
	} else if (ucAdcXIn >= 135U) /*UP*/
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	2b86      	cmp	r3, #134	; 0x86
 8000a84:	d90a      	bls.n	8000a9c <JoystickToLeds+0x48>
	{
		*ucPosUpOut = (128U + (int8_t) ucAdcXIn) / 2U;
 8000a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8a:	3380      	adds	r3, #128	; 0x80
 8000a8c:	085b      	lsrs	r3, r3, #1
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	701a      	strb	r2, [r3, #0]
		*ucPosDownOut = 0U;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e00d      	b.n	8000ab8 <JoystickToLeds+0x64>
	} else if (ucAdcXIn <= 123U) /*DOWN*/
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	2b7b      	cmp	r3, #123	; 0x7b
 8000aa0:	d80a      	bhi.n	8000ab8 <JoystickToLeds+0x64>
	{
		*ucPosUpOut = 0U;
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
		*ucPosDownOut = (128U - (int8_t) ucAdcXIn) / 2U;
 8000aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aac:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000ab0:	085b      	lsrs	r3, r3, #1
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	701a      	strb	r2, [r3, #0]
	}

	/*Y AXIS*/
	if (ucAdcYIn > 123U && ucAdcYIn < 135U) /*MIDDLE*/
 8000ab8:	7bbb      	ldrb	r3, [r7, #14]
 8000aba:	2b7b      	cmp	r3, #123	; 0x7b
 8000abc:	d909      	bls.n	8000ad2 <JoystickToLeds+0x7e>
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	2b86      	cmp	r3, #134	; 0x86
 8000ac2:	d806      	bhi.n	8000ad2 <JoystickToLeds+0x7e>
	{
		*ucPosLeftOut = 0U;
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
		*ucPosRightOut = 0U;
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
	} else if (ucAdcYIn <= 123U) /*LEFT*/
	{
		*ucPosLeftOut = (128U - (int8_t) ucAdcYIn) / 2U;
		*ucPosRightOut = 0U;
	}
}
 8000ad0:	e01b      	b.n	8000b0a <JoystickToLeds+0xb6>
	} else if (ucAdcYIn >= 135U) /*RIGHT*/
 8000ad2:	7bbb      	ldrb	r3, [r7, #14]
 8000ad4:	2b86      	cmp	r3, #134	; 0x86
 8000ad6:	d90a      	bls.n	8000aee <JoystickToLeds+0x9a>
		*ucPosLeftOut = 0U;
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
		*ucPosRightOut = (128U + (int8_t) ucAdcYIn) / 2U;
 8000ade:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ae2:	3380      	adds	r3, #128	; 0x80
 8000ae4:	085b      	lsrs	r3, r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	701a      	strb	r2, [r3, #0]
}
 8000aec:	e00d      	b.n	8000b0a <JoystickToLeds+0xb6>
	} else if (ucAdcYIn <= 123U) /*LEFT*/
 8000aee:	7bbb      	ldrb	r3, [r7, #14]
 8000af0:	2b7b      	cmp	r3, #123	; 0x7b
 8000af2:	d80a      	bhi.n	8000b0a <JoystickToLeds+0xb6>
		*ucPosLeftOut = (128U - (int8_t) ucAdcYIn) / 2U;
 8000af4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000af8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	701a      	strb	r2, [r3, #0]
		*ucPosRightOut = 0U;
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <JoystickToUsb>:

void JoystickToUsb(uint8_t ucAdcXIn, uint8_t ucAdcYIn, uint8_t *scUsbXOut,
		uint8_t *scUsbYOut) {
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60ba      	str	r2, [r7, #8]
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	4603      	mov	r3, r0
 8000b22:	73fb      	strb	r3, [r7, #15]
 8000b24:	460b      	mov	r3, r1
 8000b26:	73bb      	strb	r3, [r7, #14]
	/*X AXIS*/
	if (ucAdcXIn > 123U && ucAdcXIn < 135U) /*MIDDLE*/
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	2b7b      	cmp	r3, #123	; 0x7b
 8000b2c:	d906      	bls.n	8000b3c <JoystickToUsb+0x26>
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	2b86      	cmp	r3, #134	; 0x86
 8000b32:	d803      	bhi.n	8000b3c <JoystickToUsb+0x26>
	{
		*scUsbXOut = 0U;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	e011      	b.n	8000b60 <JoystickToUsb+0x4a>
	} else if (ucAdcXIn >= 135U) /*UP*/
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	2b86      	cmp	r3, #134	; 0x86
 8000b40:	d905      	bls.n	8000b4e <JoystickToUsb+0x38>
	{
		*scUsbXOut = (ucAdcXIn - 127U);
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	3b7f      	subs	r3, #127	; 0x7f
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	e008      	b.n	8000b60 <JoystickToUsb+0x4a>
	} else if (ucAdcXIn >= 0 && ucAdcXIn <= 127U) /*DOWN*/
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	db04      	blt.n	8000b60 <JoystickToUsb+0x4a>
	{
		*scUsbXOut = (ucAdcXIn - 127U);
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	3b7f      	subs	r3, #127	; 0x7f
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	701a      	strb	r2, [r3, #0]
	}

	/*Y AXIS*/
	if (ucAdcYIn > 123U && ucAdcYIn < 135U) /*MIDDLE*/
 8000b60:	7bbb      	ldrb	r3, [r7, #14]
 8000b62:	2b7b      	cmp	r3, #123	; 0x7b
 8000b64:	d906      	bls.n	8000b74 <JoystickToUsb+0x5e>
 8000b66:	7bbb      	ldrb	r3, [r7, #14]
 8000b68:	2b86      	cmp	r3, #134	; 0x86
 8000b6a:	d803      	bhi.n	8000b74 <JoystickToUsb+0x5e>
	{
		*scUsbYOut = 0U;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
		*scUsbYOut = -(ucAdcYIn - 127U);
	} else if (ucAdcYIn >= 0 && ucAdcYIn <= 127U) /*LEFT*/
	{
		*scUsbYOut = -(ucAdcYIn - 127U);
	}
}
 8000b72:	e013      	b.n	8000b9c <JoystickToUsb+0x86>
	} else if (ucAdcYIn >= 135U) /*RIGHT*/
 8000b74:	7bbb      	ldrb	r3, [r7, #14]
 8000b76:	2b86      	cmp	r3, #134	; 0x86
 8000b78:	d906      	bls.n	8000b88 <JoystickToUsb+0x72>
		*scUsbYOut = -(ucAdcYIn - 127U);
 8000b7a:	7bbb      	ldrb	r3, [r7, #14]
 8000b7c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	701a      	strb	r2, [r3, #0]
}
 8000b86:	e009      	b.n	8000b9c <JoystickToUsb+0x86>
	} else if (ucAdcYIn >= 0 && ucAdcYIn <= 127U) /*LEFT*/
 8000b88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db05      	blt.n	8000b9c <JoystickToUsb+0x86>
		*scUsbYOut = -(ucAdcYIn - 127U);
 8000b90:	7bbb      	ldrb	r3, [r7, #14]
 8000b92:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	701a      	strb	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bb0:	e7fe      	b.n	8000bb0 <Error_Handler+0x8>
	...

08000bb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bf2:	2007      	movs	r0, #7
 8000bf4:	f000 feac 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800

08000c04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a2e      	ldr	r2, [pc, #184]	; (8000cdc <HAL_ADC_MspInit+0xd8>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d128      	bne.n	8000c78 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a25      	ldr	r2, [pc, #148]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c62:	2303      	movs	r3, #3
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	481c      	ldr	r0, [pc, #112]	; (8000ce4 <HAL_ADC_MspInit+0xe0>)
 8000c72:	f000 feaf 	bl	80019d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c76:	e02c      	b.n	8000cd2 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ce8 <HAL_ADC_MspInit+0xe4>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d127      	bne.n	8000cd2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_ADC_MspInit+0xdc>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_ADC_MspInit+0xe0>)
 8000cce:	f000 fe81 	bl	80019d4 <HAL_GPIO_Init>
}
 8000cd2:	bf00      	nop
 8000cd4:	3730      	adds	r7, #48	; 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40012000 	.word	0x40012000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	40012100 	.word	0x40012100

08000cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <HAL_TIM_Base_MspInit+0x3c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10d      	bne.n	8000d1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_TIM_Base_MspInit+0x40>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <HAL_TIM_Base_MspInit+0x40>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <HAL_TIM_Base_MspInit+0x40>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40000800 	.word	0x40000800
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <HAL_TIM_MspPostInit+0x68>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d11e      	bne.n	8000d90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_TIM_MspPostInit+0x6c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_TIM_MspPostInit+0x6c>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_TIM_MspPostInit+0x6c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d6e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_TIM_MspPostInit+0x70>)
 8000d8c:	f000 fe22 	bl	80019d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40000800 	.word	0x40000800
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020c00 	.word	0x40020c00

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da8:	e7fe      	b.n	8000da8 <NMI_Handler+0x4>

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler+0x4>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df0:	f000 f89a 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <OTG_FS_IRQHandler+0x10>)
 8000dfe:	f001 f8e1 	bl	8001fc4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200006f4 	.word	0x200006f4

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e34:	f7ff ffea 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	; (8000e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	; (8000e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f007 fb19 	bl	8008494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fb2f 	bl	80004c4 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8000e74:	08008574 	.word	0x08008574
  ldr r2, =_sbss
 8000e78:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8000e7c:	20000bf4 	.word	0x20000bf4

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 fd4f 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fe7c 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fd67 	bl	80019ba <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f04:	f000 fd2f 	bl	8001966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000210 	.word	0x20000210

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000210 	.word	0x20000210

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e033      	b.n	800102e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d109      	bne.n	8000fe2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fe18 	bl	8000c04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d118      	bne.n	8001020 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ff6:	f023 0302 	bic.w	r3, r3, #2
 8000ffa:	f043 0202 	orr.w	r2, r3, #2
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fad8 	bl	80015b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f023 0303 	bic.w	r3, r3, #3
 8001016:	f043 0201 	orr.w	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	641a      	str	r2, [r3, #64]	; 0x40
 800101e:	e001      	b.n	8001024 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800104a:	2b01      	cmp	r3, #1
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Start+0x1a>
 800104e:	2302      	movs	r3, #2
 8001050:	e0b2      	b.n	80011b8 <HAL_ADC_Start+0x180>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b01      	cmp	r3, #1
 8001066:	d018      	beq.n	800109a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0201 	orr.w	r2, r2, #1
 8001076:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001078:	4b52      	ldr	r3, [pc, #328]	; (80011c4 <HAL_ADC_Start+0x18c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a52      	ldr	r2, [pc, #328]	; (80011c8 <HAL_ADC_Start+0x190>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	0c9a      	lsrs	r2, r3, #18
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800108c:	e002      	b.n	8001094 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3b01      	subs	r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f9      	bne.n	800108e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d17a      	bne.n	800119e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010e6:	d106      	bne.n	80010f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ec:	f023 0206 	bic.w	r2, r3, #6
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	645a      	str	r2, [r3, #68]	; 0x44
 80010f4:	e002      	b.n	80010fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001104:	4b31      	ldr	r3, [pc, #196]	; (80011cc <HAL_ADC_Start+0x194>)
 8001106:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001110:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 031f 	and.w	r3, r3, #31
 800111a:	2b00      	cmp	r3, #0
 800111c:	d12a      	bne.n	8001174 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a2b      	ldr	r2, [pc, #172]	; (80011d0 <HAL_ADC_Start+0x198>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d015      	beq.n	8001154 <HAL_ADC_Start+0x11c>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a29      	ldr	r2, [pc, #164]	; (80011d4 <HAL_ADC_Start+0x19c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d105      	bne.n	800113e <HAL_ADC_Start+0x106>
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_ADC_Start+0x194>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00a      	beq.n	8001154 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <HAL_ADC_Start+0x1a0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d136      	bne.n	80011b6 <HAL_ADC_Start+0x17e>
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_ADC_Start+0x194>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	2b00      	cmp	r3, #0
 8001152:	d130      	bne.n	80011b6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d129      	bne.n	80011b6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	e020      	b.n	80011b6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <HAL_ADC_Start+0x198>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d11b      	bne.n	80011b6 <HAL_ADC_Start+0x17e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d114      	bne.n	80011b6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	e00b      	b.n	80011b6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f043 0210 	orr.w	r2, r3, #16
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f043 0201 	orr.w	r2, r3, #1
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	20000000 	.word	0x20000000
 80011c8:	431bde83 	.word	0x431bde83
 80011cc:	40012300 	.word	0x40012300
 80011d0:	40012000 	.word	0x40012000
 80011d4:	40012100 	.word	0x40012100
 80011d8:	40012200 	.word	0x40012200

080011dc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <HAL_ADC_Stop+0x16>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e021      	b.n	8001236 <HAL_ADC_Stop+0x5a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0201 	bic.w	r2, r2, #1
 8001208:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d109      	bne.n	800122c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001220:	f023 0301 	bic.w	r3, r3, #1
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125e:	d113      	bne.n	8001288 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800126a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800126e:	d10b      	bne.n	8001288 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f043 0220 	orr.w	r2, r3, #32
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e063      	b.n	8001350 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001288:	f7ff fe62 	bl	8000f50 <HAL_GetTick>
 800128c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800128e:	e021      	b.n	80012d4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001296:	d01d      	beq.n	80012d4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d007      	beq.n	80012ae <HAL_ADC_PollForConversion+0x6c>
 800129e:	f7ff fe57 	bl	8000f50 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d212      	bcs.n	80012d4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d00b      	beq.n	80012d4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f043 0204 	orr.w	r2, r3, #4
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e03d      	b.n	8001350 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d1d6      	bne.n	8001290 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f06f 0212 	mvn.w	r2, #18
 80012ea:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d123      	bne.n	800134e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800130a:	2b00      	cmp	r3, #0
 800130c:	d11f      	bne.n	800134e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001326:	2b00      	cmp	r3, #0
 8001328:	d111      	bne.n	800134e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d105      	bne.n	800134e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f043 0201 	orr.w	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001388:	2b01      	cmp	r3, #1
 800138a:	d101      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1c>
 800138c:	2302      	movs	r3, #2
 800138e:	e105      	b.n	800159c <HAL_ADC_ConfigChannel+0x228>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b09      	cmp	r3, #9
 800139e:	d925      	bls.n	80013ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68d9      	ldr	r1, [r3, #12]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	3b1e      	subs	r3, #30
 80013b6:	2207      	movs	r2, #7
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43da      	mvns	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	400a      	ands	r2, r1
 80013c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68d9      	ldr	r1, [r3, #12]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	4603      	mov	r3, r0
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4403      	add	r3, r0
 80013de:	3b1e      	subs	r3, #30
 80013e0:	409a      	lsls	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	e022      	b.n	8001432 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6919      	ldr	r1, [r3, #16]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	2207      	movs	r2, #7
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	400a      	ands	r2, r1
 800140e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	4603      	mov	r3, r0
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4403      	add	r3, r0
 8001428:	409a      	lsls	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b06      	cmp	r3, #6
 8001438:	d824      	bhi.n	8001484 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3b05      	subs	r3, #5
 800144c:	221f      	movs	r2, #31
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	400a      	ands	r2, r1
 800145a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	4618      	mov	r0, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	3b05      	subs	r3, #5
 8001476:	fa00 f203 	lsl.w	r2, r0, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
 8001482:	e04c      	b.n	800151e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b0c      	cmp	r3, #12
 800148a:	d824      	bhi.n	80014d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	3b23      	subs	r3, #35	; 0x23
 800149e:	221f      	movs	r2, #31
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43da      	mvns	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	400a      	ands	r2, r1
 80014ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	3b23      	subs	r3, #35	; 0x23
 80014c8:	fa00 f203 	lsl.w	r2, r0, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	631a      	str	r2, [r3, #48]	; 0x30
 80014d4:	e023      	b.n	800151e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3b41      	subs	r3, #65	; 0x41
 80014e8:	221f      	movs	r2, #31
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	400a      	ands	r2, r1
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	b29b      	uxth	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	3b41      	subs	r3, #65	; 0x41
 8001512:	fa00 f203 	lsl.w	r2, r0, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800151e:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <HAL_ADC_ConfigChannel+0x234>)
 8001520:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a21      	ldr	r2, [pc, #132]	; (80015ac <HAL_ADC_ConfigChannel+0x238>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d109      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x1cc>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b12      	cmp	r3, #18
 8001532:	d105      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a19      	ldr	r2, [pc, #100]	; (80015ac <HAL_ADC_ConfigChannel+0x238>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d123      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x21e>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b10      	cmp	r3, #16
 8001550:	d003      	beq.n	800155a <HAL_ADC_ConfigChannel+0x1e6>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b11      	cmp	r3, #17
 8001558:	d11b      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b10      	cmp	r3, #16
 800156c:	d111      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_ADC_ConfigChannel+0x23c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <HAL_ADC_ConfigChannel+0x240>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	0c9a      	lsrs	r2, r3, #18
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001584:	e002      	b.n	800158c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3b01      	subs	r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f9      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40012300 	.word	0x40012300
 80015ac:	40012000 	.word	0x40012000
 80015b0:	20000000 	.word	0x20000000
 80015b4:	431bde83 	.word	0x431bde83

080015b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c0:	4b79      	ldr	r3, [pc, #484]	; (80017a8 <ADC_Init+0x1f0>)
 80015c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	431a      	orrs	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6859      	ldr	r1, [r3, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	021a      	lsls	r2, r3, #8
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001632:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6899      	ldr	r1, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	4a58      	ldr	r2, [pc, #352]	; (80017ac <ADC_Init+0x1f4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d022      	beq.n	8001696 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800165e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6899      	ldr	r1, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001680:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6899      	ldr	r1, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	e00f      	b.n	80016b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0202 	bic.w	r2, r2, #2
 80016c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6899      	ldr	r1, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7e1b      	ldrb	r3, [r3, #24]
 80016d0:	005a      	lsls	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d01b      	beq.n	800171c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001702:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6859      	ldr	r1, [r3, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	3b01      	subs	r3, #1
 8001710:	035a      	lsls	r2, r3, #13
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	e007      	b.n	800172c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800172a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	3b01      	subs	r3, #1
 8001748:	051a      	lsls	r2, r3, #20
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6899      	ldr	r1, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800176e:	025a      	lsls	r2, r3, #9
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001786:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6899      	ldr	r1, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	029a      	lsls	r2, r3, #10
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	40012300 	.word	0x40012300
 80017ac:	0f000001 	.word	0x0f000001

080017b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <__NVIC_GetPriorityGrouping+0x18>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	f003 0307 	and.w	r3, r3, #7
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0b      	blt.n	800183e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4907      	ldr	r1, [pc, #28]	; (800184c <__NVIC_EnableIRQ+0x38>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	; (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	; (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001930:	f7ff ff8e 	bl	8001850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff29 	bl	80017b0 <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff3e 	bl	80017f8 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff8e 	bl	80018a4 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5d 	bl	8001850 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff31 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffa2 	bl	800190c <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
 80019ee:	e16b      	b.n	8001cc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f0:	2201      	movs	r2, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	f040 815a 	bne.w	8001cc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d005      	beq.n	8001a26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d130      	bne.n	8001a88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	2203      	movs	r2, #3
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 0201 	and.w	r2, r3, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d017      	beq.n	8001ac4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d123      	bne.n	8001b18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	08da      	lsrs	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3208      	adds	r2, #8
 8001ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	69b9      	ldr	r1, [r7, #24]
 8001b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0203 	and.w	r2, r3, #3
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80b4 	beq.w	8001cc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b60      	ldr	r3, [pc, #384]	; (8001ce0 <HAL_GPIO_Init+0x30c>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	4a5f      	ldr	r2, [pc, #380]	; (8001ce0 <HAL_GPIO_Init+0x30c>)
 8001b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b68:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ce0 <HAL_GPIO_Init+0x30c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b76:	4a5b      	ldr	r2, [pc, #364]	; (8001ce4 <HAL_GPIO_Init+0x310>)
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a52      	ldr	r2, [pc, #328]	; (8001ce8 <HAL_GPIO_Init+0x314>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d02b      	beq.n	8001bfa <HAL_GPIO_Init+0x226>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a51      	ldr	r2, [pc, #324]	; (8001cec <HAL_GPIO_Init+0x318>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d025      	beq.n	8001bf6 <HAL_GPIO_Init+0x222>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a50      	ldr	r2, [pc, #320]	; (8001cf0 <HAL_GPIO_Init+0x31c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01f      	beq.n	8001bf2 <HAL_GPIO_Init+0x21e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4f      	ldr	r2, [pc, #316]	; (8001cf4 <HAL_GPIO_Init+0x320>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d019      	beq.n	8001bee <HAL_GPIO_Init+0x21a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4e      	ldr	r2, [pc, #312]	; (8001cf8 <HAL_GPIO_Init+0x324>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_GPIO_Init+0x216>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4d      	ldr	r2, [pc, #308]	; (8001cfc <HAL_GPIO_Init+0x328>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00d      	beq.n	8001be6 <HAL_GPIO_Init+0x212>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4c      	ldr	r2, [pc, #304]	; (8001d00 <HAL_GPIO_Init+0x32c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <HAL_GPIO_Init+0x20e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4b      	ldr	r2, [pc, #300]	; (8001d04 <HAL_GPIO_Init+0x330>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d101      	bne.n	8001bde <HAL_GPIO_Init+0x20a>
 8001bda:	2307      	movs	r3, #7
 8001bdc:	e00e      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001bde:	2308      	movs	r3, #8
 8001be0:	e00c      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001be2:	2306      	movs	r3, #6
 8001be4:	e00a      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001be6:	2305      	movs	r3, #5
 8001be8:	e008      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001bea:	2304      	movs	r3, #4
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	f002 0203 	and.w	r2, r2, #3
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	4093      	lsls	r3, r2
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c0c:	4935      	ldr	r1, [pc, #212]	; (8001ce4 <HAL_GPIO_Init+0x310>)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3e:	4a32      	ldr	r2, [pc, #200]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c44:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c68:	4a27      	ldr	r2, [pc, #156]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c92:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cbc:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	f67f ae90 	bls.w	80019f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40013800 	.word	0x40013800
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020c00 	.word	0x40020c00
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40021400 	.word	0x40021400
 8001d00:	40021800 	.word	0x40021800
 8001d04:	40021c00 	.word	0x40021c00
 8001d08:	40013c00 	.word	0x40013c00

08001d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	887b      	ldrh	r3, [r7, #2]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e001      	b.n	8001d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e101      	b.n	8001f52 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d106      	bne.n	8001d6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f006 f889 	bl	8007e80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2203      	movs	r2, #3
 8001d72:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d7c:	d102      	bne.n	8001d84 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f002 fe28 	bl	80049de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7c1a      	ldrb	r2, [r3, #16]
 8001d96:	f88d 2000 	strb.w	r2, [sp]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d9e:	f002 fd07 	bl	80047b0 <USB_CoreInit>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0ce      	b.n	8001f52 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 fe20 	bl	8004a00 <USB_SetCurrentMode>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0bf      	b.n	8001f52 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	e04a      	b.n	8001e6e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	3315      	adds	r3, #21
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3314      	adds	r3, #20
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	b298      	uxth	r0, r3
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	332e      	adds	r3, #46	; 0x2e
 8001e14:	4602      	mov	r2, r0
 8001e16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	3318      	adds	r3, #24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	331c      	adds	r3, #28
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3320      	adds	r3, #32
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	3324      	adds	r3, #36	; 0x24
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	791b      	ldrb	r3, [r3, #4]
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d3af      	bcc.n	8001dd8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e044      	b.n	8001f08 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e7e:	7bfa      	ldrb	r2, [r7, #15]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	3301      	adds	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	791b      	ldrb	r3, [r3, #4]
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d3b5      	bcc.n	8001e7e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7c1a      	ldrb	r2, [r3, #16]
 8001f1a:	f88d 2000 	strb.w	r2, [sp]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f22:	f002 fdb9 	bl	8004a98 <USB_DevInit>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e00c      	b.n	8001f52 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fdfd 	bl	8005b4a <USB_DevDisconnect>

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_PCD_Start+0x1c>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e022      	b.n	8001fbc <HAL_PCD_Start+0x62>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d105      	bne.n	8001f9e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 fd0a 	bl	80049bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 fdab 	bl	8005b08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b08d      	sub	sp, #52	; 0x34
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 fe69 	bl	8005cb2 <USB_GetMode>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 848c 	bne.w	8002900 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f003 fdcd 	bl	8005b8c <USB_ReadInterrupts>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 8482 	beq.w	80028fe <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f003 fdba 	bl	8005b8c <USB_ReadInterrupts>
 8002018:	4603      	mov	r3, r0
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b02      	cmp	r3, #2
 8002020:	d107      	bne.n	8002032 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f002 0202 	and.w	r2, r2, #2
 8002030:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f003 fda8 	bl	8005b8c <USB_ReadInterrupts>
 800203c:	4603      	mov	r3, r0
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b10      	cmp	r3, #16
 8002044:	d161      	bne.n	800210a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0210 	bic.w	r2, r2, #16
 8002054:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f003 020f 	and.w	r2, r3, #15
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	3304      	adds	r3, #4
 8002074:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	0c5b      	lsrs	r3, r3, #17
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	2b02      	cmp	r3, #2
 8002080:	d124      	bne.n	80020cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d035      	beq.n	80020fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002098:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800209c:	b29b      	uxth	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	6a38      	ldr	r0, [r7, #32]
 80020a2:	f003 fbdf 	bl	8005864 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020b2:	441a      	add	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c4:	441a      	add	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	615a      	str	r2, [r3, #20]
 80020ca:	e016      	b.n	80020fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	0c5b      	lsrs	r3, r3, #17
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	2b06      	cmp	r3, #6
 80020d6:	d110      	bne.n	80020fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80020de:	2208      	movs	r2, #8
 80020e0:	4619      	mov	r1, r3
 80020e2:	6a38      	ldr	r0, [r7, #32]
 80020e4:	f003 fbbe 	bl	8005864 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020f4:	441a      	add	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0210 	orr.w	r2, r2, #16
 8002108:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f003 fd3c 	bl	8005b8c <USB_ReadInterrupts>
 8002114:	4603      	mov	r3, r0
 8002116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800211a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800211e:	f040 80a7 	bne.w	8002270 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f003 fd41 	bl	8005bb2 <USB_ReadDevAllOutEpInterrupt>
 8002130:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002132:	e099      	b.n	8002268 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 808e 	beq.w	800225c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f003 fd65 	bl	8005c1a <USB_ReadDevOutEPInterrupt>
 8002150:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00c      	beq.n	8002176 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	4413      	add	r3, r2
 8002164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002168:	461a      	mov	r2, r3
 800216a:	2301      	movs	r3, #1
 800216c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800216e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 fe89 	bl	8002e88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00c      	beq.n	800219a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	4413      	add	r3, r2
 8002188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218c:	461a      	mov	r2, r3
 800218e:	2308      	movs	r3, #8
 8002190:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002192:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 ff5f 	bl	8003058 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b0:	461a      	mov	r2, r3
 80021b2:	2310      	movs	r3, #16
 80021b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d030      	beq.n	8002222 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c8:	2b80      	cmp	r3, #128	; 0x80
 80021ca:	d109      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	3304      	adds	r3, #4
 80021f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	78db      	ldrb	r3, [r3, #3]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d108      	bne.n	8002210 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2200      	movs	r2, #0
 8002202:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	b2db      	uxtb	r3, r3
 8002208:	4619      	mov	r1, r3
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f005 ff3e 	bl	800808c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221c:	461a      	mov	r2, r3
 800221e:	2302      	movs	r3, #2
 8002220:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	4413      	add	r3, r2
 8002234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002238:	461a      	mov	r2, r3
 800223a:	2320      	movs	r3, #32
 800223c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d009      	beq.n	800225c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	4413      	add	r3, r2
 8002250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002254:	461a      	mov	r2, r3
 8002256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800225a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	3301      	adds	r3, #1
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	2b00      	cmp	r3, #0
 800226c:	f47f af62 	bne.w	8002134 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f003 fc89 	bl	8005b8c <USB_ReadInterrupts>
 800227a:	4603      	mov	r3, r0
 800227c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002280:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002284:	f040 80db 	bne.w	800243e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f003 fcaa 	bl	8005be6 <USB_ReadDevAllInEpInterrupt>
 8002292:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002298:	e0cd      	b.n	8002436 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80c2 	beq.w	800242a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 fcd0 	bl	8005c56 <USB_ReadDevInEPInterrupt>
 80022b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d057      	beq.n	8002372 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	2201      	movs	r2, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69f9      	ldr	r1, [r7, #28]
 80022de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022e2:	4013      	ands	r3, r2
 80022e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022f2:	461a      	mov	r2, r3
 80022f4:	2301      	movs	r3, #1
 80022f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	799b      	ldrb	r3, [r3, #6]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d132      	bne.n	8002366 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3320      	adds	r3, #32
 8002310:	6819      	ldr	r1, [r3, #0]
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4403      	add	r3, r0
 8002320:	331c      	adds	r3, #28
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4419      	add	r1, r3
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4403      	add	r3, r0
 8002334:	3320      	adds	r3, #32
 8002336:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	2b00      	cmp	r3, #0
 800233c:	d113      	bne.n	8002366 <HAL_PCD_IRQHandler+0x3a2>
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	3324      	adds	r3, #36	; 0x24
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d108      	bne.n	8002366 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800235e:	461a      	mov	r2, r3
 8002360:	2101      	movs	r1, #1
 8002362:	f003 fcd7 	bl	8005d14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	b2db      	uxtb	r3, r3
 800236a:	4619      	mov	r1, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f005 fe08 	bl	8007f82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	4413      	add	r3, r2
 8002384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002388:	461a      	mov	r2, r3
 800238a:	2308      	movs	r3, #8
 800238c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a4:	461a      	mov	r2, r3
 80023a6:	2310      	movs	r3, #16
 80023a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c0:	461a      	mov	r2, r3
 80023c2:	2340      	movs	r3, #64	; 0x40
 80023c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d023      	beq.n	8002418 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80023d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023d2:	6a38      	ldr	r0, [r7, #32]
 80023d4:	f002 fcc4 	bl	8004d60 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80023d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	3310      	adds	r3, #16
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	3304      	adds	r3, #4
 80023ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	78db      	ldrb	r3, [r3, #3]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d108      	bne.n	8002406 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2200      	movs	r2, #0
 80023f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	4619      	mov	r1, r3
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f005 fe55 	bl	80080b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002412:	461a      	mov	r2, r3
 8002414:	2302      	movs	r3, #2
 8002416:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fca3 	bl	8002d70 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	3301      	adds	r3, #1
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	2b00      	cmp	r3, #0
 800243a:	f47f af2e 	bne.w	800229a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f003 fba2 	bl	8005b8c <USB_ReadInterrupts>
 8002448:	4603      	mov	r3, r0
 800244a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800244e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002452:	d122      	bne.n	800249a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800246e:	2b01      	cmp	r3, #1
 8002470:	d108      	bne.n	8002484 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800247a:	2100      	movs	r1, #0
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fe89 	bl	8003194 <HAL_PCDEx_LPM_Callback>
 8002482:	e002      	b.n	800248a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f005 fdf3 	bl	8008070 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 fb74 	bl	8005b8c <USB_ReadInterrupts>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ae:	d112      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d102      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f005 fdaf 	bl	8008024 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80024d4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fb56 	bl	8005b8c <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ea:	f040 80b7 	bne.w	800265c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2110      	movs	r1, #16
 8002508:	4618      	mov	r0, r3
 800250a:	f002 fc29 	bl	8004d60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250e:	2300      	movs	r3, #0
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002512:	e046      	b.n	80025a2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002520:	461a      	mov	r2, r3
 8002522:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002526:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002538:	0151      	lsls	r1, r2, #5
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	440a      	add	r2, r1
 800253e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002542:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002546:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002554:	461a      	mov	r2, r3
 8002556:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800255a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	4413      	add	r3, r2
 8002564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800256c:	0151      	lsls	r1, r2, #5
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	440a      	add	r2, r1
 8002572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002576:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800257a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	4413      	add	r3, r2
 8002584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800258c:	0151      	lsls	r1, r2, #5
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	440a      	add	r2, r1
 8002592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002596:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800259a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259e:	3301      	adds	r3, #1
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	791b      	ldrb	r3, [r3, #4]
 80025a6:	461a      	mov	r2, r3
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d3b2      	bcc.n	8002514 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7bdb      	ldrb	r3, [r3, #15]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025da:	f043 030b 	orr.w	r3, r3, #11
 80025de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025f0:	f043 030b 	orr.w	r3, r3, #11
 80025f4:	6453      	str	r3, [r2, #68]	; 0x44
 80025f6:	e015      	b.n	8002624 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002606:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800260a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800260e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800261e:	f043 030b 	orr.w	r3, r3, #11
 8002622:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002632:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002636:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002646:	461a      	mov	r2, r3
 8002648:	f003 fb64 	bl	8005d14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800265a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fa93 	bl	8005b8c <USB_ReadInterrupts>
 8002666:	4603      	mov	r3, r0
 8002668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800266c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002670:	d123      	bne.n	80026ba <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f003 fb29 	bl	8005cce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f002 fbe6 	bl	8004e52 <USB_GetDevSpeed>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681c      	ldr	r4, [r3, #0]
 8002692:	f001 f9ef 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8002696:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800269c:	461a      	mov	r2, r3
 800269e:	4620      	mov	r0, r4
 80026a0:	f002 f8ea 	bl	8004878 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f005 fc94 	bl	8007fd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80026b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 fa64 	bl	8005b8c <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d10a      	bne.n	80026e4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f005 fc71 	bl	8007fb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f002 0208 	and.w	r2, r2, #8
 80026e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f003 fa4f 	bl	8005b8c <USB_ReadInterrupts>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f4:	2b80      	cmp	r3, #128	; 0x80
 80026f6:	d123      	bne.n	8002740 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002704:	2301      	movs	r3, #1
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
 8002708:	e014      	b.n	8002734 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	f203 2357 	addw	r3, r3, #599	; 0x257
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d105      	bne.n	800272e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	b2db      	uxtb	r3, r3
 8002726:	4619      	mov	r1, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 faf0 	bl	8002d0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	3301      	adds	r3, #1
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	791b      	ldrb	r3, [r3, #4]
 8002738:	461a      	mov	r2, r3
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	4293      	cmp	r3, r2
 800273e:	d3e4      	bcc.n	800270a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f003 fa21 	bl	8005b8c <USB_ReadInterrupts>
 800274a:	4603      	mov	r3, r0
 800274c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002754:	d13c      	bne.n	80027d0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002756:	2301      	movs	r3, #1
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
 800275a:	e02b      	b.n	80027b4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	4413      	add	r3, r2
 8002764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	3318      	adds	r3, #24
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d115      	bne.n	80027ae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002782:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002784:	2b00      	cmp	r3, #0
 8002786:	da12      	bge.n	80027ae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	3317      	adds	r3, #23
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4619      	mov	r1, r3
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fab0 	bl	8002d0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	3301      	adds	r3, #1
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	791b      	ldrb	r3, [r3, #4]
 80027b8:	461a      	mov	r2, r3
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	4293      	cmp	r3, r2
 80027be:	d3cd      	bcc.n	800275c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80027ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f003 f9d9 	bl	8005b8c <USB_ReadInterrupts>
 80027da:	4603      	mov	r3, r0
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027e4:	d156      	bne.n	8002894 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027e6:	2301      	movs	r3, #1
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ea:	e045      	b.n	8002878 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d12e      	bne.n	8002872 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002814:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002816:	2b00      	cmp	r3, #0
 8002818:	da2b      	bge.n	8002872 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002826:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800282a:	429a      	cmp	r2, r3
 800282c:	d121      	bne.n	8002872 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800286a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800286e:	6053      	str	r3, [r2, #4]
            break;
 8002870:	e008      	b.n	8002884 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	3301      	adds	r3, #1
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	791b      	ldrb	r3, [r3, #4]
 800287c:	461a      	mov	r2, r3
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	4293      	cmp	r3, r2
 8002882:	d3b3      	bcc.n	80027ec <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f003 f977 	bl	8005b8c <USB_ReadInterrupts>
 800289e:	4603      	mov	r3, r0
 80028a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a8:	d10a      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f005 fc12 	bl	80080d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 f961 	bl	8005b8c <USB_ReadInterrupts>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d115      	bne.n	8002900 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f005 fc02 	bl	80080f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	e000      	b.n	8002900 <HAL_PCD_IRQHandler+0x93c>
      return;
 80028fe:	bf00      	nop
    }
  }
}
 8002900:	3734      	adds	r7, #52	; 0x34
 8002902:	46bd      	mov	sp, r7
 8002904:	bd90      	pop	{r4, r7, pc}

08002906 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_PCD_SetAddress+0x1a>
 800291c:	2302      	movs	r3, #2
 800291e:	e012      	b.n	8002946 <HAL_PCD_SetAddress+0x40>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f003 f8c0 	bl	8005abc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	4608      	mov	r0, r1
 8002958:	4611      	mov	r1, r2
 800295a:	461a      	mov	r2, r3
 800295c:	4603      	mov	r3, r0
 800295e:	70fb      	strb	r3, [r7, #3]
 8002960:	460b      	mov	r3, r1
 8002962:	803b      	strh	r3, [r7, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800296c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002970:	2b00      	cmp	r3, #0
 8002972:	da0f      	bge.n	8002994 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	f003 020f 	and.w	r2, r3, #15
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	3310      	adds	r3, #16
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4413      	add	r3, r2
 8002988:	3304      	adds	r3, #4
 800298a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	705a      	strb	r2, [r3, #1]
 8002992:	e00f      	b.n	80029b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	f003 020f 	and.w	r2, r3, #15
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	3304      	adds	r3, #4
 80029ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029c0:	883a      	ldrh	r2, [r7, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	78ba      	ldrb	r2, [r7, #2]
 80029ca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	785b      	ldrb	r3, [r3, #1]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029de:	78bb      	ldrb	r3, [r7, #2]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d102      	bne.n	80029ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_PCD_EP_Open+0xaa>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e00e      	b.n	8002a16 <HAL_PCD_EP_Open+0xc8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68f9      	ldr	r1, [r7, #12]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 fa48 	bl	8004e9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002a14:	7afb      	ldrb	r3, [r7, #11]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da0f      	bge.n	8002a52 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	f003 020f 	and.w	r2, r3, #15
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	3310      	adds	r3, #16
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	3304      	adds	r3, #4
 8002a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	705a      	strb	r2, [r3, #1]
 8002a50:	e00f      	b.n	8002a72 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	f003 020f 	and.w	r2, r3, #15
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4413      	add	r3, r2
 8002a68:	3304      	adds	r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_PCD_EP_Close+0x6e>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e00e      	b.n	8002aaa <HAL_PCD_EP_Close+0x8c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68f9      	ldr	r1, [r7, #12]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f002 fa86 	bl	8004fac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac2:	7afb      	ldrb	r3, [r7, #11]
 8002ac4:	f003 020f 	and.w	r2, r3, #15
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3304      	adds	r3, #4
 8002ada:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2200      	movs	r2, #0
 8002aec:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2200      	movs	r2, #0
 8002af2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002af4:	7afb      	ldrb	r3, [r7, #11]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	799b      	ldrb	r3, [r3, #6]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d102      	bne.n	8002b0e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	799b      	ldrb	r3, [r3, #6]
 8002b16:	461a      	mov	r2, r3
 8002b18:	6979      	ldr	r1, [r7, #20]
 8002b1a:	f002 fb23 	bl	8005164 <USB_EPStartXfer>

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	460b      	mov	r3, r1
 8002b36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b38:	7afb      	ldrb	r3, [r7, #11]
 8002b3a:	f003 020f 	and.w	r2, r3, #15
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	3310      	adds	r3, #16
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2201      	movs	r2, #1
 8002b66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b68:	7afb      	ldrb	r3, [r7, #11]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	799b      	ldrb	r3, [r3, #6]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d102      	bne.n	8002b82 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	799b      	ldrb	r3, [r3, #6]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	6979      	ldr	r1, [r7, #20]
 8002b8e:	f002 fae9 	bl	8005164 <USB_EPStartXfer>

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	7912      	ldrb	r2, [r2, #4]
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e04f      	b.n	8002c5a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	da0f      	bge.n	8002be2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	f003 020f 	and.w	r2, r3, #15
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	3310      	adds	r3, #16
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	705a      	strb	r2, [r3, #1]
 8002be0:	e00d      	b.n	8002bfe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_PCD_EP_SetStall+0x82>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e01d      	b.n	8002c5a <HAL_PCD_EP_SetStall+0xbe>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68f9      	ldr	r1, [r7, #12]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f002 fe71 	bl	8005914 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7999      	ldrb	r1, [r3, #6]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f003 f862 	bl	8005d14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	7912      	ldrb	r2, [r2, #4]
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d901      	bls.n	8002c80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e042      	b.n	8002d06 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	da0f      	bge.n	8002ca8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	f003 020f 	and.w	r2, r3, #15
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	3310      	adds	r3, #16
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	705a      	strb	r2, [r3, #1]
 8002ca6:	e00f      	b.n	8002cc8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	f003 020f 	and.w	r2, r3, #15
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_PCD_EP_ClrStall+0x86>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e00e      	b.n	8002d06 <HAL_PCD_EP_ClrStall+0xa4>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68f9      	ldr	r1, [r7, #12]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f002 fe7a 	bl	80059f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	da0c      	bge.n	8002d3c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f003 020f 	and.w	r2, r3, #15
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	3310      	adds	r3, #16
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	3304      	adds	r3, #4
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	e00c      	b.n	8002d56 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	f003 020f 	and.w	r2, r3, #15
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	3304      	adds	r3, #4
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68f9      	ldr	r1, [r7, #12]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f002 fc99 	bl	8005694 <USB_EPStopXfer>
 8002d62:	4603      	mov	r3, r0
 8002d64:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d66:	7afb      	ldrb	r3, [r7, #11]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	3310      	adds	r3, #16
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	3304      	adds	r3, #4
 8002d96:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d901      	bls.n	8002da8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e06b      	b.n	8002e80 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d902      	bls.n	8002dc4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	3303      	adds	r3, #3
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dcc:	e02a      	b.n	8002e24 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d902      	bls.n	8002dea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3303      	adds	r3, #3
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	68d9      	ldr	r1, [r3, #12]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	4603      	mov	r3, r0
 8002e06:	6978      	ldr	r0, [r7, #20]
 8002e08:	f002 fcee 	bl	80057e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	441a      	add	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	441a      	add	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d809      	bhi.n	8002e4e <PCD_WriteEmptyTxFifo+0xde>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d203      	bcs.n	8002e4e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1bf      	bne.n	8002dce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d811      	bhi.n	8002e7e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	2201      	movs	r2, #1
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	6939      	ldr	r1, [r7, #16]
 8002e76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3720      	adds	r7, #32
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	333c      	adds	r3, #60	; 0x3c
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	799b      	ldrb	r3, [r3, #6]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d17b      	bne.n	8002fb6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d015      	beq.n	8002ef4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	4a61      	ldr	r2, [pc, #388]	; (8003050 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	f240 80b9 	bls.w	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80b3 	beq.w	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eea:	461a      	mov	r2, r3
 8002eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ef0:	6093      	str	r3, [r2, #8]
 8002ef2:	e0a7      	b.n	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	6093      	str	r3, [r2, #8]
 8002f10:	e098      	b.n	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 8093 	bne.w	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	4a4b      	ldr	r2, [pc, #300]	; (8003050 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d90f      	bls.n	8002f46 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f42:	6093      	str	r3, [r2, #8]
 8002f44:	e07e      	b.n	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	3304      	adds	r3, #4
 8002f5a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a1a      	ldr	r2, [r3, #32]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	0159      	lsls	r1, r3, #5
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	440b      	add	r3, r1
 8002f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f72:	1ad2      	subs	r2, r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d114      	bne.n	8002fa8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002f90:	461a      	mov	r2, r3
 8002f92:	2101      	movs	r1, #1
 8002f94:	f002 febe 	bl	8005d14 <USB_EP0_OutStart>
 8002f98:	e006      	b.n	8002fa8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	441a      	add	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	4619      	mov	r1, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f004 ffcc 	bl	8007f4c <HAL_PCD_DataOutStageCallback>
 8002fb4:	e046      	b.n	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	4a26      	ldr	r2, [pc, #152]	; (8003054 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d124      	bne.n	8003008 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fda:	6093      	str	r3, [r2, #8]
 8002fdc:	e032      	b.n	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	4619      	mov	r1, r3
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f004 ffa3 	bl	8007f4c <HAL_PCD_DataOutStageCallback>
 8003006:	e01d      	b.n	8003044 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d114      	bne.n	8003038 <PCD_EP_OutXfrComplete_int+0x1b0>
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d108      	bne.n	8003038 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003030:	461a      	mov	r2, r3
 8003032:	2100      	movs	r1, #0
 8003034:	f002 fe6e 	bl	8005d14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f004 ff84 	bl	8007f4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	4f54300a 	.word	0x4f54300a
 8003054:	4f54310a 	.word	0x4f54310a

08003058 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	333c      	adds	r3, #60	; 0x3c
 8003070:	3304      	adds	r3, #4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d90e      	bls.n	80030ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003094:	2b00      	cmp	r3, #0
 8003096:	d009      	beq.n	80030ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a4:	461a      	mov	r2, r3
 80030a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f004 ff3b 	bl	8007f28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d90c      	bls.n	80030d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	799b      	ldrb	r3, [r3, #6]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d108      	bne.n	80030d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80030cc:	461a      	mov	r2, r3
 80030ce:	2101      	movs	r1, #1
 80030d0:	f002 fe20 	bl	8005d14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	4f54300a 	.word	0x4f54300a

080030e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	70fb      	strb	r3, [r7, #3]
 80030f0:	4613      	mov	r3, r2
 80030f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d107      	bne.n	8003112 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003102:	883b      	ldrh	r3, [r7, #0]
 8003104:	0419      	lsls	r1, r3, #16
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	430a      	orrs	r2, r1
 800310e:	629a      	str	r2, [r3, #40]	; 0x28
 8003110:	e028      	b.n	8003164 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	4413      	add	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
 8003124:	e00d      	b.n	8003142 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	3340      	adds	r3, #64	; 0x40
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	0c1b      	lsrs	r3, r3, #16
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	4413      	add	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	3301      	adds	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	3b01      	subs	r3, #1
 8003148:	429a      	cmp	r2, r3
 800314a:	d3ec      	bcc.n	8003126 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800314c:	883b      	ldrh	r3, [r7, #0]
 800314e:	0418      	lsls	r0, r3, #16
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	3b01      	subs	r3, #1
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	4302      	orrs	r2, r0
 800315c:	3340      	adds	r3, #64	; 0x40
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e267      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d075      	beq.n	80032b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ca:	4b88      	ldr	r3, [pc, #544]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d00c      	beq.n	80031f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d6:	4b85      	ldr	r3, [pc, #532]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d112      	bne.n	8003208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e2:	4b82      	ldr	r3, [pc, #520]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ee:	d10b      	bne.n	8003208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f0:	4b7e      	ldr	r3, [pc, #504]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d05b      	beq.n	80032b4 <HAL_RCC_OscConfig+0x108>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d157      	bne.n	80032b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e242      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003210:	d106      	bne.n	8003220 <HAL_RCC_OscConfig+0x74>
 8003212:	4b76      	ldr	r3, [pc, #472]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a75      	ldr	r2, [pc, #468]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e01d      	b.n	800325c <HAL_RCC_OscConfig+0xb0>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x98>
 800322a:	4b70      	ldr	r3, [pc, #448]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6f      	ldr	r2, [pc, #444]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 8003230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b6d      	ldr	r3, [pc, #436]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a6c      	ldr	r2, [pc, #432]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0xb0>
 8003244:	4b69      	ldr	r3, [pc, #420]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a68      	ldr	r2, [pc, #416]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 800324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b66      	ldr	r3, [pc, #408]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a65      	ldr	r2, [pc, #404]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 8003256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fd fe74 	bl	8000f50 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800326c:	f7fd fe70 	bl	8000f50 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e207      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b5b      	ldr	r3, [pc, #364]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0xc0>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328c:	f7fd fe60 	bl	8000f50 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003294:	f7fd fe5c 	bl	8000f50 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e1f3      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	4b51      	ldr	r3, [pc, #324]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0xe8>
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d063      	beq.n	800338a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032c2:	4b4a      	ldr	r3, [pc, #296]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ce:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d11c      	bne.n	8003314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032da:	4b44      	ldr	r3, [pc, #272]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d116      	bne.n	8003314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e6:	4b41      	ldr	r3, [pc, #260]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <HAL_RCC_OscConfig+0x152>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e1c7      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fe:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4937      	ldr	r1, [pc, #220]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	e03a      	b.n	800338a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d020      	beq.n	800335e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800331c:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <HAL_RCC_OscConfig+0x244>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fd fe15 	bl	8000f50 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800332a:	f7fd fe11 	bl	8000f50 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e1a8      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003348:	4b28      	ldr	r3, [pc, #160]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4925      	ldr	r1, [pc, #148]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]
 800335c:	e015      	b.n	800338a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335e:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <HAL_RCC_OscConfig+0x244>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fd fdf4 	bl	8000f50 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800336c:	f7fd fdf0 	bl	8000f50 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e187      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d036      	beq.n	8003404 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d016      	beq.n	80033cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <HAL_RCC_OscConfig+0x248>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fd fdd4 	bl	8000f50 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ac:	f7fd fdd0 	bl	8000f50 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e167      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_OscConfig+0x240>)
 80033c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x200>
 80033ca:	e01b      	b.n	8003404 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HAL_RCC_OscConfig+0x248>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d2:	f7fd fdbd 	bl	8000f50 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	e00e      	b.n	80033f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033da:	f7fd fdb9 	bl	8000f50 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d907      	bls.n	80033f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e150      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
 80033ec:	40023800 	.word	0x40023800
 80033f0:	42470000 	.word	0x42470000
 80033f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f8:	4b88      	ldr	r3, [pc, #544]	; (800361c <HAL_RCC_OscConfig+0x470>)
 80033fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1ea      	bne.n	80033da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8097 	beq.w	8003540 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003412:	2300      	movs	r3, #0
 8003414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003416:	4b81      	ldr	r3, [pc, #516]	; (800361c <HAL_RCC_OscConfig+0x470>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10f      	bne.n	8003442 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	4b7d      	ldr	r3, [pc, #500]	; (800361c <HAL_RCC_OscConfig+0x470>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	4a7c      	ldr	r2, [pc, #496]	; (800361c <HAL_RCC_OscConfig+0x470>)
 800342c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003430:	6413      	str	r3, [r2, #64]	; 0x40
 8003432:	4b7a      	ldr	r3, [pc, #488]	; (800361c <HAL_RCC_OscConfig+0x470>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343e:	2301      	movs	r3, #1
 8003440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003442:	4b77      	ldr	r3, [pc, #476]	; (8003620 <HAL_RCC_OscConfig+0x474>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d118      	bne.n	8003480 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344e:	4b74      	ldr	r3, [pc, #464]	; (8003620 <HAL_RCC_OscConfig+0x474>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a73      	ldr	r2, [pc, #460]	; (8003620 <HAL_RCC_OscConfig+0x474>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345a:	f7fd fd79 	bl	8000f50 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003462:	f7fd fd75 	bl	8000f50 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e10c      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	4b6a      	ldr	r3, [pc, #424]	; (8003620 <HAL_RCC_OscConfig+0x474>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d106      	bne.n	8003496 <HAL_RCC_OscConfig+0x2ea>
 8003488:	4b64      	ldr	r3, [pc, #400]	; (800361c <HAL_RCC_OscConfig+0x470>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	4a63      	ldr	r2, [pc, #396]	; (800361c <HAL_RCC_OscConfig+0x470>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	6713      	str	r3, [r2, #112]	; 0x70
 8003494:	e01c      	b.n	80034d0 <HAL_RCC_OscConfig+0x324>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b05      	cmp	r3, #5
 800349c:	d10c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x30c>
 800349e:	4b5f      	ldr	r3, [pc, #380]	; (800361c <HAL_RCC_OscConfig+0x470>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	4a5e      	ldr	r2, [pc, #376]	; (800361c <HAL_RCC_OscConfig+0x470>)
 80034a4:	f043 0304 	orr.w	r3, r3, #4
 80034a8:	6713      	str	r3, [r2, #112]	; 0x70
 80034aa:	4b5c      	ldr	r3, [pc, #368]	; (800361c <HAL_RCC_OscConfig+0x470>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	4a5b      	ldr	r2, [pc, #364]	; (800361c <HAL_RCC_OscConfig+0x470>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6713      	str	r3, [r2, #112]	; 0x70
 80034b6:	e00b      	b.n	80034d0 <HAL_RCC_OscConfig+0x324>
 80034b8:	4b58      	ldr	r3, [pc, #352]	; (800361c <HAL_RCC_OscConfig+0x470>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	4a57      	ldr	r2, [pc, #348]	; (800361c <HAL_RCC_OscConfig+0x470>)
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	6713      	str	r3, [r2, #112]	; 0x70
 80034c4:	4b55      	ldr	r3, [pc, #340]	; (800361c <HAL_RCC_OscConfig+0x470>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c8:	4a54      	ldr	r2, [pc, #336]	; (800361c <HAL_RCC_OscConfig+0x470>)
 80034ca:	f023 0304 	bic.w	r3, r3, #4
 80034ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d015      	beq.n	8003504 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d8:	f7fd fd3a 	bl	8000f50 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e0:	f7fd fd36 	bl	8000f50 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e0cb      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f6:	4b49      	ldr	r3, [pc, #292]	; (800361c <HAL_RCC_OscConfig+0x470>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0ee      	beq.n	80034e0 <HAL_RCC_OscConfig+0x334>
 8003502:	e014      	b.n	800352e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003504:	f7fd fd24 	bl	8000f50 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350a:	e00a      	b.n	8003522 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fd fd20 	bl	8000f50 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e0b5      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003522:	4b3e      	ldr	r3, [pc, #248]	; (800361c <HAL_RCC_OscConfig+0x470>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1ee      	bne.n	800350c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d105      	bne.n	8003540 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003534:	4b39      	ldr	r3, [pc, #228]	; (800361c <HAL_RCC_OscConfig+0x470>)
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	4a38      	ldr	r2, [pc, #224]	; (800361c <HAL_RCC_OscConfig+0x470>)
 800353a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80a1 	beq.w	800368c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800354a:	4b34      	ldr	r3, [pc, #208]	; (800361c <HAL_RCC_OscConfig+0x470>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b08      	cmp	r3, #8
 8003554:	d05c      	beq.n	8003610 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d141      	bne.n	80035e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355e:	4b31      	ldr	r3, [pc, #196]	; (8003624 <HAL_RCC_OscConfig+0x478>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7fd fcf4 	bl	8000f50 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356c:	f7fd fcf0 	bl	8000f50 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e087      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	4b27      	ldr	r3, [pc, #156]	; (800361c <HAL_RCC_OscConfig+0x470>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	019b      	lsls	r3, r3, #6
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	3b01      	subs	r3, #1
 80035a4:	041b      	lsls	r3, r3, #16
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	061b      	lsls	r3, r3, #24
 80035ae:	491b      	ldr	r1, [pc, #108]	; (800361c <HAL_RCC_OscConfig+0x470>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b4:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x478>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ba:	f7fd fcc9 	bl	8000f50 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fd fcc5 	bl	8000f50 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e05c      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <HAL_RCC_OscConfig+0x470>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x416>
 80035e0:	e054      	b.n	800368c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <HAL_RCC_OscConfig+0x478>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fd fcb2 	bl	8000f50 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fd fcae 	bl	8000f50 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e045      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_RCC_OscConfig+0x470>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x444>
 800360e:	e03d      	b.n	800368c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d107      	bne.n	8003628 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e038      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
 800361c:	40023800 	.word	0x40023800
 8003620:	40007000 	.word	0x40007000
 8003624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003628:	4b1b      	ldr	r3, [pc, #108]	; (8003698 <HAL_RCC_OscConfig+0x4ec>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d028      	beq.n	8003688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d121      	bne.n	8003688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d11a      	bne.n	8003688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003658:	4013      	ands	r3, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800365e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003660:	4293      	cmp	r3, r2
 8003662:	d111      	bne.n	8003688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	3b01      	subs	r3, #1
 8003672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d107      	bne.n	8003688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800

0800369c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0cc      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b0:	4b68      	ldr	r3, [pc, #416]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d90c      	bls.n	80036d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b65      	ldr	r3, [pc, #404]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b63      	ldr	r3, [pc, #396]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0b8      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d020      	beq.n	8003726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f0:	4b59      	ldr	r3, [pc, #356]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a58      	ldr	r2, [pc, #352]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003708:	4b53      	ldr	r3, [pc, #332]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a52      	ldr	r2, [pc, #328]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003714:	4b50      	ldr	r3, [pc, #320]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	494d      	ldr	r1, [pc, #308]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d044      	beq.n	80037bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b47      	ldr	r3, [pc, #284]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d119      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e07f      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d003      	beq.n	800375a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003756:	2b03      	cmp	r3, #3
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375a:	4b3f      	ldr	r3, [pc, #252]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e06f      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	4b3b      	ldr	r3, [pc, #236]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e067      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377a:	4b37      	ldr	r3, [pc, #220]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f023 0203 	bic.w	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4934      	ldr	r1, [pc, #208]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	4313      	orrs	r3, r2
 800378a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800378c:	f7fd fbe0 	bl	8000f50 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	e00a      	b.n	80037aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003794:	f7fd fbdc 	bl	8000f50 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e04f      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	4b2b      	ldr	r3, [pc, #172]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 020c 	and.w	r2, r3, #12
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d1eb      	bne.n	8003794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d20c      	bcs.n	80037e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b22      	ldr	r3, [pc, #136]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b20      	ldr	r3, [pc, #128]	; (8003854 <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e032      	b.n	800384a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f0:	4b19      	ldr	r3, [pc, #100]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4916      	ldr	r1, [pc, #88]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800380e:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	490e      	ldr	r1, [pc, #56]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003822:	f000 f821 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8003826:	4602      	mov	r2, r0
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	490a      	ldr	r1, [pc, #40]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	5ccb      	ldrb	r3, [r1, r3]
 8003836:	fa22 f303 	lsr.w	r3, r2, r3
 800383a:	4a09      	ldr	r2, [pc, #36]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fd fb40 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40023c00 	.word	0x40023c00
 8003858:	40023800 	.word	0x40023800
 800385c:	08008554 	.word	0x08008554
 8003860:	20000000 	.word	0x20000000
 8003864:	20000004 	.word	0x20000004

08003868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800386c:	b094      	sub	sp, #80	; 0x50
 800386e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	647b      	str	r3, [r7, #68]	; 0x44
 8003874:	2300      	movs	r3, #0
 8003876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003878:	2300      	movs	r3, #0
 800387a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003880:	4b79      	ldr	r3, [pc, #484]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 030c 	and.w	r3, r3, #12
 8003888:	2b08      	cmp	r3, #8
 800388a:	d00d      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x40>
 800388c:	2b08      	cmp	r3, #8
 800388e:	f200 80e1 	bhi.w	8003a54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0x34>
 8003896:	2b04      	cmp	r3, #4
 8003898:	d003      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800389a:	e0db      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800389c:	4b73      	ldr	r3, [pc, #460]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x204>)
 800389e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038a0:	e0db      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038a2:	4b73      	ldr	r3, [pc, #460]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x208>)
 80038a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038a6:	e0d8      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a8:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038b2:	4b6d      	ldr	r3, [pc, #436]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d063      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038be:	4b6a      	ldr	r3, [pc, #424]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	099b      	lsrs	r3, r3, #6
 80038c4:	2200      	movs	r2, #0
 80038c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80038c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d0:	633b      	str	r3, [r7, #48]	; 0x30
 80038d2:	2300      	movs	r3, #0
 80038d4:	637b      	str	r3, [r7, #52]	; 0x34
 80038d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038da:	4622      	mov	r2, r4
 80038dc:	462b      	mov	r3, r5
 80038de:	f04f 0000 	mov.w	r0, #0
 80038e2:	f04f 0100 	mov.w	r1, #0
 80038e6:	0159      	lsls	r1, r3, #5
 80038e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ec:	0150      	lsls	r0, r2, #5
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4621      	mov	r1, r4
 80038f4:	1a51      	subs	r1, r2, r1
 80038f6:	6139      	str	r1, [r7, #16]
 80038f8:	4629      	mov	r1, r5
 80038fa:	eb63 0301 	sbc.w	r3, r3, r1
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800390c:	4659      	mov	r1, fp
 800390e:	018b      	lsls	r3, r1, #6
 8003910:	4651      	mov	r1, sl
 8003912:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003916:	4651      	mov	r1, sl
 8003918:	018a      	lsls	r2, r1, #6
 800391a:	4651      	mov	r1, sl
 800391c:	ebb2 0801 	subs.w	r8, r2, r1
 8003920:	4659      	mov	r1, fp
 8003922:	eb63 0901 	sbc.w	r9, r3, r1
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800393a:	4690      	mov	r8, r2
 800393c:	4699      	mov	r9, r3
 800393e:	4623      	mov	r3, r4
 8003940:	eb18 0303 	adds.w	r3, r8, r3
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	462b      	mov	r3, r5
 8003948:	eb49 0303 	adc.w	r3, r9, r3
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800395a:	4629      	mov	r1, r5
 800395c:	024b      	lsls	r3, r1, #9
 800395e:	4621      	mov	r1, r4
 8003960:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003964:	4621      	mov	r1, r4
 8003966:	024a      	lsls	r2, r1, #9
 8003968:	4610      	mov	r0, r2
 800396a:	4619      	mov	r1, r3
 800396c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800396e:	2200      	movs	r2, #0
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
 8003972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003974:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003978:	f7fc fc26 	bl	80001c8 <__aeabi_uldivmod>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4613      	mov	r3, r2
 8003982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003984:	e058      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003986:	4b38      	ldr	r3, [pc, #224]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	099b      	lsrs	r3, r3, #6
 800398c:	2200      	movs	r2, #0
 800398e:	4618      	mov	r0, r3
 8003990:	4611      	mov	r1, r2
 8003992:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003996:	623b      	str	r3, [r7, #32]
 8003998:	2300      	movs	r3, #0
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
 800399c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039a0:	4642      	mov	r2, r8
 80039a2:	464b      	mov	r3, r9
 80039a4:	f04f 0000 	mov.w	r0, #0
 80039a8:	f04f 0100 	mov.w	r1, #0
 80039ac:	0159      	lsls	r1, r3, #5
 80039ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039b2:	0150      	lsls	r0, r2, #5
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4641      	mov	r1, r8
 80039ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80039be:	4649      	mov	r1, r9
 80039c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039d8:	ebb2 040a 	subs.w	r4, r2, sl
 80039dc:	eb63 050b 	sbc.w	r5, r3, fp
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	00eb      	lsls	r3, r5, #3
 80039ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ee:	00e2      	lsls	r2, r4, #3
 80039f0:	4614      	mov	r4, r2
 80039f2:	461d      	mov	r5, r3
 80039f4:	4643      	mov	r3, r8
 80039f6:	18e3      	adds	r3, r4, r3
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	464b      	mov	r3, r9
 80039fc:	eb45 0303 	adc.w	r3, r5, r3
 8003a00:	607b      	str	r3, [r7, #4]
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a0e:	4629      	mov	r1, r5
 8003a10:	028b      	lsls	r3, r1, #10
 8003a12:	4621      	mov	r1, r4
 8003a14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a18:	4621      	mov	r1, r4
 8003a1a:	028a      	lsls	r2, r1, #10
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a22:	2200      	movs	r2, #0
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	61fa      	str	r2, [r7, #28]
 8003a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a2c:	f7fc fbcc 	bl	80001c8 <__aeabi_uldivmod>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4613      	mov	r3, r2
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	0c1b      	lsrs	r3, r3, #16
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	3301      	adds	r3, #1
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a52:	e002      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a54:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3750      	adds	r7, #80	; 0x50
 8003a60:	46bd      	mov	sp, r7
 8003a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	00f42400 	.word	0x00f42400
 8003a70:	007a1200 	.word	0x007a1200

08003a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000000 	.word	0x20000000

08003a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e041      	b.n	8003b22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fd f91a 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4610      	mov	r0, r2
 8003acc:	f000 fad8 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e041      	b.n	8003bc0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f839 	bl	8003bc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4619      	mov	r1, r3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f000 fa89 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <HAL_TIM_PWM_Start+0x24>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	bf14      	ite	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	e022      	b.n	8003c46 <HAL_TIM_PWM_Start+0x6a>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d109      	bne.n	8003c1a <HAL_TIM_PWM_Start+0x3e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	bf14      	ite	ne
 8003c12:	2301      	movne	r3, #1
 8003c14:	2300      	moveq	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	e015      	b.n	8003c46 <HAL_TIM_PWM_Start+0x6a>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d109      	bne.n	8003c34 <HAL_TIM_PWM_Start+0x58>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	bf14      	ite	ne
 8003c2c:	2301      	movne	r3, #1
 8003c2e:	2300      	moveq	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	e008      	b.n	8003c46 <HAL_TIM_PWM_Start+0x6a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e07c      	b.n	8003d48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d104      	bne.n	8003c5e <HAL_TIM_PWM_Start+0x82>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c5c:	e013      	b.n	8003c86 <HAL_TIM_PWM_Start+0xaa>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d104      	bne.n	8003c6e <HAL_TIM_PWM_Start+0x92>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c6c:	e00b      	b.n	8003c86 <HAL_TIM_PWM_Start+0xaa>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d104      	bne.n	8003c7e <HAL_TIM_PWM_Start+0xa2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c7c:	e003      	b.n	8003c86 <HAL_TIM_PWM_Start+0xaa>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2202      	movs	r2, #2
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	6839      	ldr	r1, [r7, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fcec 	bl	800466c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2d      	ldr	r2, [pc, #180]	; (8003d50 <HAL_TIM_PWM_Start+0x174>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_TIM_PWM_Start+0xcc>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2c      	ldr	r2, [pc, #176]	; (8003d54 <HAL_TIM_PWM_Start+0x178>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_TIM_PWM_Start+0xd0>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_TIM_PWM_Start+0xd2>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a22      	ldr	r2, [pc, #136]	; (8003d50 <HAL_TIM_PWM_Start+0x174>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d022      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x136>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd4:	d01d      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x136>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <HAL_TIM_PWM_Start+0x17c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d018      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x136>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <HAL_TIM_PWM_Start+0x180>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x136>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <HAL_TIM_PWM_Start+0x184>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00e      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x136>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <HAL_TIM_PWM_Start+0x178>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d009      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x136>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <HAL_TIM_PWM_Start+0x188>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d004      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x136>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <HAL_TIM_PWM_Start+0x18c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d111      	bne.n	8003d36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b06      	cmp	r3, #6
 8003d22:	d010      	beq.n	8003d46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d34:	e007      	b.n	8003d46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40010400 	.word	0x40010400
 8003d58:	40000400 	.word	0x40000400
 8003d5c:	40000800 	.word	0x40000800
 8003d60:	40000c00 	.word	0x40000c00
 8003d64:	40014000 	.word	0x40014000
 8003d68:	40001800 	.word	0x40001800

08003d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e0ae      	b.n	8003ee8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b0c      	cmp	r3, #12
 8003d96:	f200 809f 	bhi.w	8003ed8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d9a:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da0:	08003dd5 	.word	0x08003dd5
 8003da4:	08003ed9 	.word	0x08003ed9
 8003da8:	08003ed9 	.word	0x08003ed9
 8003dac:	08003ed9 	.word	0x08003ed9
 8003db0:	08003e15 	.word	0x08003e15
 8003db4:	08003ed9 	.word	0x08003ed9
 8003db8:	08003ed9 	.word	0x08003ed9
 8003dbc:	08003ed9 	.word	0x08003ed9
 8003dc0:	08003e57 	.word	0x08003e57
 8003dc4:	08003ed9 	.word	0x08003ed9
 8003dc8:	08003ed9 	.word	0x08003ed9
 8003dcc:	08003ed9 	.word	0x08003ed9
 8003dd0:	08003e97 	.word	0x08003e97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f9fc 	bl	80041d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0208 	orr.w	r2, r2, #8
 8003dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0204 	bic.w	r2, r2, #4
 8003dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6999      	ldr	r1, [r3, #24]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	619a      	str	r2, [r3, #24]
      break;
 8003e12:	e064      	b.n	8003ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fa4c 	bl	80042b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6999      	ldr	r1, [r3, #24]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	021a      	lsls	r2, r3, #8
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	619a      	str	r2, [r3, #24]
      break;
 8003e54:	e043      	b.n	8003ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 faa1 	bl	80043a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0208 	orr.w	r2, r2, #8
 8003e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0204 	bic.w	r2, r2, #4
 8003e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69d9      	ldr	r1, [r3, #28]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	61da      	str	r2, [r3, #28]
      break;
 8003e94:	e023      	b.n	8003ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 faf5 	bl	800448c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69d9      	ldr	r1, [r3, #28]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	021a      	lsls	r2, r3, #8
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	61da      	str	r2, [r3, #28]
      break;
 8003ed6:	e002      	b.n	8003ede <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	75fb      	strb	r3, [r7, #23]
      break;
 8003edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_TIM_ConfigClockSource+0x1c>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e0b4      	b.n	8004076 <HAL_TIM_ConfigClockSource+0x186>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f44:	d03e      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0xd4>
 8003f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f4a:	f200 8087 	bhi.w	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f52:	f000 8086 	beq.w	8004062 <HAL_TIM_ConfigClockSource+0x172>
 8003f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5a:	d87f      	bhi.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f5c:	2b70      	cmp	r3, #112	; 0x70
 8003f5e:	d01a      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0xa6>
 8003f60:	2b70      	cmp	r3, #112	; 0x70
 8003f62:	d87b      	bhi.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f64:	2b60      	cmp	r3, #96	; 0x60
 8003f66:	d050      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x11a>
 8003f68:	2b60      	cmp	r3, #96	; 0x60
 8003f6a:	d877      	bhi.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f6c:	2b50      	cmp	r3, #80	; 0x50
 8003f6e:	d03c      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0xfa>
 8003f70:	2b50      	cmp	r3, #80	; 0x50
 8003f72:	d873      	bhi.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f74:	2b40      	cmp	r3, #64	; 0x40
 8003f76:	d058      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x13a>
 8003f78:	2b40      	cmp	r3, #64	; 0x40
 8003f7a:	d86f      	bhi.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f7c:	2b30      	cmp	r3, #48	; 0x30
 8003f7e:	d064      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x15a>
 8003f80:	2b30      	cmp	r3, #48	; 0x30
 8003f82:	d86b      	bhi.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d060      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x15a>
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d867      	bhi.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d05c      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x15a>
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d05a      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x15a>
 8003f94:	e062      	b.n	800405c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fa6:	f000 fb41 	bl	800462c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	609a      	str	r2, [r3, #8]
      break;
 8003fc2:	e04f      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fd4:	f000 fb2a 	bl	800462c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fe6:	609a      	str	r2, [r3, #8]
      break;
 8003fe8:	e03c      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f000 fa9e 	bl	8004538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2150      	movs	r1, #80	; 0x50
 8004002:	4618      	mov	r0, r3
 8004004:	f000 faf7 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 8004008:	e02c      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004016:	461a      	mov	r2, r3
 8004018:	f000 fabd 	bl	8004596 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2160      	movs	r1, #96	; 0x60
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fae7 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 8004028:	e01c      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004036:	461a      	mov	r2, r3
 8004038:	f000 fa7e 	bl	8004538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2140      	movs	r1, #64	; 0x40
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fad7 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 8004048:	e00c      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f000 face 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 800405a:	e003      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
      break;
 8004060:	e000      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004074:	7bfb      	ldrb	r3, [r7, #15]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a46      	ldr	r2, [pc, #280]	; (80041ac <TIM_Base_SetConfig+0x12c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d013      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409e:	d00f      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a43      	ldr	r2, [pc, #268]	; (80041b0 <TIM_Base_SetConfig+0x130>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00b      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a42      	ldr	r2, [pc, #264]	; (80041b4 <TIM_Base_SetConfig+0x134>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d007      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a41      	ldr	r2, [pc, #260]	; (80041b8 <TIM_Base_SetConfig+0x138>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a40      	ldr	r2, [pc, #256]	; (80041bc <TIM_Base_SetConfig+0x13c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d108      	bne.n	80040d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a35      	ldr	r2, [pc, #212]	; (80041ac <TIM_Base_SetConfig+0x12c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d02b      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e0:	d027      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a32      	ldr	r2, [pc, #200]	; (80041b0 <TIM_Base_SetConfig+0x130>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d023      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a31      	ldr	r2, [pc, #196]	; (80041b4 <TIM_Base_SetConfig+0x134>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01f      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a30      	ldr	r2, [pc, #192]	; (80041b8 <TIM_Base_SetConfig+0x138>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d01b      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2f      	ldr	r2, [pc, #188]	; (80041bc <TIM_Base_SetConfig+0x13c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d017      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a2e      	ldr	r2, [pc, #184]	; (80041c0 <TIM_Base_SetConfig+0x140>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a2d      	ldr	r2, [pc, #180]	; (80041c4 <TIM_Base_SetConfig+0x144>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00f      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a2c      	ldr	r2, [pc, #176]	; (80041c8 <TIM_Base_SetConfig+0x148>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00b      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a2b      	ldr	r2, [pc, #172]	; (80041cc <TIM_Base_SetConfig+0x14c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d007      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a2a      	ldr	r2, [pc, #168]	; (80041d0 <TIM_Base_SetConfig+0x150>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a29      	ldr	r2, [pc, #164]	; (80041d4 <TIM_Base_SetConfig+0x154>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d108      	bne.n	8004144 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a10      	ldr	r2, [pc, #64]	; (80041ac <TIM_Base_SetConfig+0x12c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <TIM_Base_SetConfig+0xf8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a12      	ldr	r2, [pc, #72]	; (80041bc <TIM_Base_SetConfig+0x13c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d103      	bne.n	8004180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b01      	cmp	r3, #1
 8004190:	d105      	bne.n	800419e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f023 0201 	bic.w	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	611a      	str	r2, [r3, #16]
  }
}
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40010000 	.word	0x40010000
 80041b0:	40000400 	.word	0x40000400
 80041b4:	40000800 	.word	0x40000800
 80041b8:	40000c00 	.word	0x40000c00
 80041bc:	40010400 	.word	0x40010400
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40014400 	.word	0x40014400
 80041c8:	40014800 	.word	0x40014800
 80041cc:	40001800 	.word	0x40001800
 80041d0:	40001c00 	.word	0x40001c00
 80041d4:	40002000 	.word	0x40002000

080041d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f023 0201 	bic.w	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0303 	bic.w	r3, r3, #3
 800420e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f023 0302 	bic.w	r3, r3, #2
 8004220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a20      	ldr	r2, [pc, #128]	; (80042b0 <TIM_OC1_SetConfig+0xd8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_OC1_SetConfig+0x64>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a1f      	ldr	r2, [pc, #124]	; (80042b4 <TIM_OC1_SetConfig+0xdc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d10c      	bne.n	8004256 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0308 	bic.w	r3, r3, #8
 8004242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 0304 	bic.w	r3, r3, #4
 8004254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a15      	ldr	r2, [pc, #84]	; (80042b0 <TIM_OC1_SetConfig+0xd8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_OC1_SetConfig+0x8e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a14      	ldr	r2, [pc, #80]	; (80042b4 <TIM_OC1_SetConfig+0xdc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d111      	bne.n	800428a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800426c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	621a      	str	r2, [r3, #32]
}
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	40010000 	.word	0x40010000
 80042b4:	40010400 	.word	0x40010400

080042b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	f023 0210 	bic.w	r2, r3, #16
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f023 0320 	bic.w	r3, r3, #32
 8004302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a22      	ldr	r2, [pc, #136]	; (800439c <TIM_OC2_SetConfig+0xe4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_OC2_SetConfig+0x68>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a21      	ldr	r2, [pc, #132]	; (80043a0 <TIM_OC2_SetConfig+0xe8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d10d      	bne.n	800433c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a17      	ldr	r2, [pc, #92]	; (800439c <TIM_OC2_SetConfig+0xe4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <TIM_OC2_SetConfig+0x94>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <TIM_OC2_SetConfig+0xe8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d113      	bne.n	8004374 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800435a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40010000 	.word	0x40010000
 80043a0:	40010400 	.word	0x40010400

080043a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0303 	bic.w	r3, r3, #3
 80043da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a21      	ldr	r2, [pc, #132]	; (8004484 <TIM_OC3_SetConfig+0xe0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <TIM_OC3_SetConfig+0x66>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a20      	ldr	r2, [pc, #128]	; (8004488 <TIM_OC3_SetConfig+0xe4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d10d      	bne.n	8004426 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a16      	ldr	r2, [pc, #88]	; (8004484 <TIM_OC3_SetConfig+0xe0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d003      	beq.n	8004436 <TIM_OC3_SetConfig+0x92>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a15      	ldr	r2, [pc, #84]	; (8004488 <TIM_OC3_SetConfig+0xe4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d113      	bne.n	800445e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800443c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	621a      	str	r2, [r3, #32]
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40010000 	.word	0x40010000
 8004488:	40010400 	.word	0x40010400

0800448c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	031b      	lsls	r3, r3, #12
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a12      	ldr	r2, [pc, #72]	; (8004530 <TIM_OC4_SetConfig+0xa4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d003      	beq.n	80044f4 <TIM_OC4_SetConfig+0x68>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a11      	ldr	r2, [pc, #68]	; (8004534 <TIM_OC4_SetConfig+0xa8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d109      	bne.n	8004508 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	019b      	lsls	r3, r3, #6
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	621a      	str	r2, [r3, #32]
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40010000 	.word	0x40010000
 8004534:	40010400 	.word	0x40010400

08004538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 0201 	bic.w	r2, r3, #1
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 030a 	bic.w	r3, r3, #10
 8004574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004596:	b480      	push	{r7}
 8004598:	b087      	sub	sp, #28
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f023 0210 	bic.w	r2, r3, #16
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	031b      	lsls	r3, r3, #12
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b085      	sub	sp, #20
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	f043 0307 	orr.w	r3, r3, #7
 8004618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	609a      	str	r2, [r3, #8]
}
 8004620:	bf00      	nop
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	021a      	lsls	r2, r3, #8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	431a      	orrs	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4313      	orrs	r3, r2
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	609a      	str	r2, [r3, #8]
}
 8004660:	bf00      	nop
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	2201      	movs	r2, #1
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a1a      	ldr	r2, [r3, #32]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	43db      	mvns	r3, r3
 800468e:	401a      	ands	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a1a      	ldr	r2, [r3, #32]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	fa01 f303 	lsl.w	r3, r1, r3
 80046a4:	431a      	orrs	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e05a      	b.n	8004786 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a21      	ldr	r2, [pc, #132]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d022      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471c:	d01d      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1d      	ldr	r2, [pc, #116]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d018      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1b      	ldr	r2, [pc, #108]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1a      	ldr	r2, [pc, #104]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00e      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a18      	ldr	r2, [pc, #96]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d009      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a17      	ldr	r2, [pc, #92]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d004      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a15      	ldr	r2, [pc, #84]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d10c      	bne.n	8004774 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	4313      	orrs	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40010400 	.word	0x40010400
 80047a8:	40014000 	.word	0x40014000
 80047ac:	40001800 	.word	0x40001800

080047b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047b0:	b084      	sub	sp, #16
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	f107 001c 	add.w	r0, r7, #28
 80047be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d123      	bne.n	8004812 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d105      	bne.n	8004806 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f001 fae2 	bl	8005dd0 <USB_CoreReset>
 800480c:	4603      	mov	r3, r0
 800480e:	73fb      	strb	r3, [r7, #15]
 8004810:	e01b      	b.n	800484a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f001 fad6 	bl	8005dd0 <USB_CoreReset>
 8004824:	4603      	mov	r3, r0
 8004826:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004828:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800482c:	2b00      	cmp	r3, #0
 800482e:	d106      	bne.n	800483e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
 800483c:	e005      	b.n	800484a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800484a:	7fbb      	ldrb	r3, [r7, #30]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d10b      	bne.n	8004868 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f043 0206 	orr.w	r2, r3, #6
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f043 0220 	orr.w	r2, r3, #32
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004874:	b004      	add	sp, #16
 8004876:	4770      	bx	lr

08004878 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	2b02      	cmp	r3, #2
 800488a:	d165      	bne.n	8004958 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	4a41      	ldr	r2, [pc, #260]	; (8004994 <USB_SetTurnaroundTime+0x11c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d906      	bls.n	80048a2 <USB_SetTurnaroundTime+0x2a>
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4a40      	ldr	r2, [pc, #256]	; (8004998 <USB_SetTurnaroundTime+0x120>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d202      	bcs.n	80048a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800489c:	230f      	movs	r3, #15
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	e062      	b.n	8004968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4a3c      	ldr	r2, [pc, #240]	; (8004998 <USB_SetTurnaroundTime+0x120>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d306      	bcc.n	80048b8 <USB_SetTurnaroundTime+0x40>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4a3b      	ldr	r2, [pc, #236]	; (800499c <USB_SetTurnaroundTime+0x124>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d202      	bcs.n	80048b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048b2:	230e      	movs	r3, #14
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	e057      	b.n	8004968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4a38      	ldr	r2, [pc, #224]	; (800499c <USB_SetTurnaroundTime+0x124>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d306      	bcc.n	80048ce <USB_SetTurnaroundTime+0x56>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4a37      	ldr	r2, [pc, #220]	; (80049a0 <USB_SetTurnaroundTime+0x128>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d202      	bcs.n	80048ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80048c8:	230d      	movs	r3, #13
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	e04c      	b.n	8004968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4a33      	ldr	r2, [pc, #204]	; (80049a0 <USB_SetTurnaroundTime+0x128>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d306      	bcc.n	80048e4 <USB_SetTurnaroundTime+0x6c>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	4a32      	ldr	r2, [pc, #200]	; (80049a4 <USB_SetTurnaroundTime+0x12c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d802      	bhi.n	80048e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80048de:	230c      	movs	r3, #12
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	e041      	b.n	8004968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4a2f      	ldr	r2, [pc, #188]	; (80049a4 <USB_SetTurnaroundTime+0x12c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d906      	bls.n	80048fa <USB_SetTurnaroundTime+0x82>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4a2e      	ldr	r2, [pc, #184]	; (80049a8 <USB_SetTurnaroundTime+0x130>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d802      	bhi.n	80048fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048f4:	230b      	movs	r3, #11
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	e036      	b.n	8004968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4a2a      	ldr	r2, [pc, #168]	; (80049a8 <USB_SetTurnaroundTime+0x130>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d906      	bls.n	8004910 <USB_SetTurnaroundTime+0x98>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4a29      	ldr	r2, [pc, #164]	; (80049ac <USB_SetTurnaroundTime+0x134>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d802      	bhi.n	8004910 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800490a:	230a      	movs	r3, #10
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e02b      	b.n	8004968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4a26      	ldr	r2, [pc, #152]	; (80049ac <USB_SetTurnaroundTime+0x134>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d906      	bls.n	8004926 <USB_SetTurnaroundTime+0xae>
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4a25      	ldr	r2, [pc, #148]	; (80049b0 <USB_SetTurnaroundTime+0x138>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d202      	bcs.n	8004926 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004920:	2309      	movs	r3, #9
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	e020      	b.n	8004968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	4a21      	ldr	r2, [pc, #132]	; (80049b0 <USB_SetTurnaroundTime+0x138>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d306      	bcc.n	800493c <USB_SetTurnaroundTime+0xc4>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4a20      	ldr	r2, [pc, #128]	; (80049b4 <USB_SetTurnaroundTime+0x13c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d802      	bhi.n	800493c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004936:	2308      	movs	r3, #8
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e015      	b.n	8004968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <USB_SetTurnaroundTime+0x13c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d906      	bls.n	8004952 <USB_SetTurnaroundTime+0xda>
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <USB_SetTurnaroundTime+0x140>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d202      	bcs.n	8004952 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800494c:	2307      	movs	r3, #7
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e00a      	b.n	8004968 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004952:	2306      	movs	r3, #6
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	e007      	b.n	8004968 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800495e:	2309      	movs	r3, #9
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	e001      	b.n	8004968 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004964:	2309      	movs	r3, #9
 8004966:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	029b      	lsls	r3, r3, #10
 800497c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004980:	431a      	orrs	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	00d8acbf 	.word	0x00d8acbf
 8004998:	00e4e1c0 	.word	0x00e4e1c0
 800499c:	00f42400 	.word	0x00f42400
 80049a0:	01067380 	.word	0x01067380
 80049a4:	011a499f 	.word	0x011a499f
 80049a8:	01312cff 	.word	0x01312cff
 80049ac:	014ca43f 	.word	0x014ca43f
 80049b0:	016e3600 	.word	0x016e3600
 80049b4:	01a6ab1f 	.word	0x01a6ab1f
 80049b8:	01e84800 	.word	0x01e84800

080049bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f043 0201 	orr.w	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f023 0201 	bic.w	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d115      	bne.n	8004a4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a2e:	200a      	movs	r0, #10
 8004a30:	f7fc fa9a 	bl	8000f68 <HAL_Delay>
      ms += 10U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	330a      	adds	r3, #10
 8004a38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f001 f939 	bl	8005cb2 <USB_GetMode>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d01e      	beq.n	8004a84 <USB_SetCurrentMode+0x84>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2bc7      	cmp	r3, #199	; 0xc7
 8004a4a:	d9f0      	bls.n	8004a2e <USB_SetCurrentMode+0x2e>
 8004a4c:	e01a      	b.n	8004a84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d115      	bne.n	8004a80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a60:	200a      	movs	r0, #10
 8004a62:	f7fc fa81 	bl	8000f68 <HAL_Delay>
      ms += 10U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	330a      	adds	r3, #10
 8004a6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f001 f920 	bl	8005cb2 <USB_GetMode>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <USB_SetCurrentMode+0x84>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2bc7      	cmp	r3, #199	; 0xc7
 8004a7c:	d9f0      	bls.n	8004a60 <USB_SetCurrentMode+0x60>
 8004a7e:	e001      	b.n	8004a84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e005      	b.n	8004a90 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2bc8      	cmp	r3, #200	; 0xc8
 8004a88:	d101      	bne.n	8004a8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a98:	b084      	sub	sp, #16
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b086      	sub	sp, #24
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	e009      	b.n	8004acc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	3340      	adds	r3, #64	; 0x40
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b0e      	cmp	r3, #14
 8004ad0:	d9f2      	bls.n	8004ab8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ad2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d11c      	bne.n	8004b14 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	639a      	str	r2, [r3, #56]	; 0x38
 8004b12:	e00b      	b.n	8004b2c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b32:	461a      	mov	r2, r3
 8004b34:	2300      	movs	r3, #0
 8004b36:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b38:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d10d      	bne.n	8004b5c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d104      	bne.n	8004b52 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b48:	2100      	movs	r1, #0
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f968 	bl	8004e20 <USB_SetDevSpeed>
 8004b50:	e008      	b.n	8004b64 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b52:	2101      	movs	r1, #1
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f963 	bl	8004e20 <USB_SetDevSpeed>
 8004b5a:	e003      	b.n	8004b64 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b5c:	2103      	movs	r1, #3
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f95e 	bl	8004e20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b64:	2110      	movs	r1, #16
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f8fa 	bl	8004d60 <USB_FlushTxFifo>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f924 	bl	8004dc4 <USB_FlushRxFifo>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2300      	movs	r3, #0
 8004b90:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004baa:	2300      	movs	r3, #0
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	e043      	b.n	8004c38 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bc6:	d118      	bne.n	8004bfa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	e013      	b.n	8004c0c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	e008      	b.n	8004c0c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c06:	461a      	mov	r2, r3
 8004c08:	2300      	movs	r3, #0
 8004c0a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	3301      	adds	r3, #1
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d3b5      	bcc.n	8004bb0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	e043      	b.n	8004cd2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c60:	d118      	bne.n	8004c94 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c74:	461a      	mov	r2, r3
 8004c76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	e013      	b.n	8004ca6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e008      	b.n	8004ca6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d3b5      	bcc.n	8004c4a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004cfe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d105      	bne.n	8004d14 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	f043 0210 	orr.w	r2, r3, #16
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699a      	ldr	r2, [r3, #24]
 8004d18:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <USB_DevInit+0x2c4>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d20:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	f043 0208 	orr.w	r2, r3, #8
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d107      	bne.n	8004d4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d44:	f043 0304 	orr.w	r3, r3, #4
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d58:	b004      	add	sp, #16
 8004d5a:	4770      	bx	lr
 8004d5c:	803c3800 	.word	0x803c3800

08004d60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3301      	adds	r3, #1
 8004d72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d7a:	d901      	bls.n	8004d80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e01b      	b.n	8004db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	daf2      	bge.n	8004d6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	019b      	lsls	r3, r3, #6
 8004d90:	f043 0220 	orr.w	r2, r3, #32
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004da4:	d901      	bls.n	8004daa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e006      	b.n	8004db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d0f0      	beq.n	8004d98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ddc:	d901      	bls.n	8004de2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e018      	b.n	8004e14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	daf2      	bge.n	8004dd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2210      	movs	r2, #16
 8004df2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e00:	d901      	bls.n	8004e06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e006      	b.n	8004e14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	2b10      	cmp	r3, #16
 8004e10:	d0f0      	beq.n	8004df4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e40:	4313      	orrs	r3, r2
 8004e42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b087      	sub	sp, #28
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0306 	and.w	r3, r3, #6
 8004e6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e72:	2300      	movs	r3, #0
 8004e74:	75fb      	strb	r3, [r7, #23]
 8004e76:	e00a      	b.n	8004e8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d002      	beq.n	8004e84 <USB_GetDevSpeed+0x32>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b06      	cmp	r3, #6
 8004e82:	d102      	bne.n	8004e8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e84:	2302      	movs	r3, #2
 8004e86:	75fb      	strb	r3, [r7, #23]
 8004e88:	e001      	b.n	8004e8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e8a:	230f      	movs	r3, #15
 8004e8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	785b      	ldrb	r3, [r3, #1]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d13a      	bne.n	8004f2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	2101      	movs	r1, #1
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	68f9      	ldr	r1, [r7, #12]
 8004ed2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d155      	bne.n	8004f9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	791b      	ldrb	r3, [r3, #4]
 8004f0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	059b      	lsls	r3, r3, #22
 8004f12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f14:	4313      	orrs	r3, r2
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	0151      	lsls	r1, r2, #5
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	e036      	b.n	8004f9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f34:	69da      	ldr	r2, [r3, #28]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	2101      	movs	r1, #1
 8004f40:	fa01 f303 	lsl.w	r3, r1, r3
 8004f44:	041b      	lsls	r3, r3, #16
 8004f46:	68f9      	ldr	r1, [r7, #12]
 8004f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d11a      	bne.n	8004f9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	791b      	ldrb	r3, [r3, #4]
 8004f80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f82:	430b      	orrs	r3, r1
 8004f84:	4313      	orrs	r3, r2
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d161      	bne.n	800508c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fde:	d11f      	bne.n	8005020 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ffe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	0151      	lsls	r1, r2, #5
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	440a      	add	r2, r1
 8005016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800501e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	2101      	movs	r1, #1
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	b29b      	uxth	r3, r3
 8005038:	43db      	mvns	r3, r3
 800503a:	68f9      	ldr	r1, [r7, #12]
 800503c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005040:	4013      	ands	r3, r2
 8005042:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	2101      	movs	r1, #1
 8005056:	fa01 f303 	lsl.w	r3, r1, r3
 800505a:	b29b      	uxth	r3, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	68f9      	ldr	r1, [r7, #12]
 8005060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005064:	4013      	ands	r3, r2
 8005066:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	0159      	lsls	r1, r3, #5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	440b      	add	r3, r1
 800507e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005082:	4619      	mov	r1, r3
 8005084:	4b35      	ldr	r3, [pc, #212]	; (800515c <USB_DeactivateEndpoint+0x1b0>)
 8005086:	4013      	ands	r3, r2
 8005088:	600b      	str	r3, [r1, #0]
 800508a:	e060      	b.n	800514e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800509e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050a2:	d11f      	bne.n	80050e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	0151      	lsls	r1, r2, #5
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	440a      	add	r2, r1
 80050ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	2101      	movs	r1, #1
 80050f6:	fa01 f303 	lsl.w	r3, r1, r3
 80050fa:	041b      	lsls	r3, r3, #16
 80050fc:	43db      	mvns	r3, r3
 80050fe:	68f9      	ldr	r1, [r7, #12]
 8005100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005104:	4013      	ands	r3, r2
 8005106:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	2101      	movs	r1, #1
 800511a:	fa01 f303 	lsl.w	r3, r1, r3
 800511e:	041b      	lsls	r3, r3, #16
 8005120:	43db      	mvns	r3, r3
 8005122:	68f9      	ldr	r1, [r7, #12]
 8005124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005128:	4013      	ands	r3, r2
 800512a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	0159      	lsls	r1, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	440b      	add	r3, r1
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	4619      	mov	r1, r3
 8005148:	4b05      	ldr	r3, [pc, #20]	; (8005160 <USB_DeactivateEndpoint+0x1b4>)
 800514a:	4013      	ands	r3, r2
 800514c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	ec337800 	.word	0xec337800
 8005160:	eff37800 	.word	0xeff37800

08005164 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	; 0x28
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	4613      	mov	r3, r2
 8005170:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2b01      	cmp	r3, #1
 8005182:	f040 817a 	bne.w	800547a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d132      	bne.n	80051f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	0151      	lsls	r1, r2, #5
 80051c4:	69fa      	ldr	r2, [r7, #28]
 80051c6:	440a      	add	r2, r1
 80051c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ec:	0cdb      	lsrs	r3, r3, #19
 80051ee:	04db      	lsls	r3, r3, #19
 80051f0:	6113      	str	r3, [r2, #16]
 80051f2:	e092      	b.n	800531a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520e:	0cdb      	lsrs	r3, r3, #19
 8005210:	04db      	lsls	r3, r3, #19
 8005212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005232:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005236:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d11a      	bne.n	8005274 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	429a      	cmp	r2, r3
 8005248:	d903      	bls.n	8005252 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	440a      	add	r2, r1
 8005268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800526c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005270:	6113      	str	r3, [r2, #16]
 8005272:	e01b      	b.n	80052ac <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005280:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	6919      	ldr	r1, [r3, #16]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	440b      	add	r3, r1
 800528c:	1e59      	subs	r1, r3, #1
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	fbb1 f3f3 	udiv	r3, r1, r3
 8005296:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005298:	4ba2      	ldr	r3, [pc, #648]	; (8005524 <USB_EPStartXfer+0x3c0>)
 800529a:	400b      	ands	r3, r1
 800529c:	69b9      	ldr	r1, [r7, #24]
 800529e:	0148      	lsls	r0, r1, #5
 80052a0:	69f9      	ldr	r1, [r7, #28]
 80052a2:	4401      	add	r1, r0
 80052a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052a8:	4313      	orrs	r3, r2
 80052aa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052c2:	69b9      	ldr	r1, [r7, #24]
 80052c4:	0148      	lsls	r0, r1, #5
 80052c6:	69f9      	ldr	r1, [r7, #28]
 80052c8:	4401      	add	r1, r0
 80052ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052ce:	4313      	orrs	r3, r2
 80052d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	791b      	ldrb	r3, [r3, #4]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d11f      	bne.n	800531a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	0151      	lsls	r1, r2, #5
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	440a      	add	r2, r1
 80052f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80052f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005318:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d14b      	bne.n	80053b8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d009      	beq.n	800533c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	461a      	mov	r2, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	791b      	ldrb	r3, [r3, #4]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d128      	bne.n	8005396 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005350:	2b00      	cmp	r3, #0
 8005352:	d110      	bne.n	8005376 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	0151      	lsls	r1, r2, #5
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	440a      	add	r2, r1
 800536a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800536e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	e00f      	b.n	8005396 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005394:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	0151      	lsls	r1, r2, #5
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	440a      	add	r2, r1
 80053ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e165      	b.n	8005684 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	791b      	ldrb	r3, [r3, #4]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d015      	beq.n	800540c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 814d 	beq.w	8005684 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	2101      	movs	r1, #1
 80053fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005400:	69f9      	ldr	r1, [r7, #28]
 8005402:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005406:	4313      	orrs	r3, r2
 8005408:	634b      	str	r3, [r1, #52]	; 0x34
 800540a:	e13b      	b.n	8005684 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d110      	bne.n	800543e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	0151      	lsls	r1, r2, #5
 800542e:	69fa      	ldr	r2, [r7, #28]
 8005430:	440a      	add	r2, r1
 8005432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005436:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	e00f      	b.n	800545e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	440a      	add	r2, r1
 8005454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800545c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	68d9      	ldr	r1, [r3, #12]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	781a      	ldrb	r2, [r3, #0]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	b298      	uxth	r0, r3
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	4603      	mov	r3, r0
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f9b8 	bl	80057e8 <USB_WritePacket>
 8005478:	e104      	b.n	8005684 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	0151      	lsls	r1, r2, #5
 800548c:	69fa      	ldr	r2, [r7, #28]
 800548e:	440a      	add	r2, r1
 8005490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005494:	0cdb      	lsrs	r3, r3, #19
 8005496:	04db      	lsls	r3, r3, #19
 8005498:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054bc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d131      	bne.n	8005528 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f2:	69b9      	ldr	r1, [r7, #24]
 80054f4:	0148      	lsls	r0, r1, #5
 80054f6:	69f9      	ldr	r1, [r7, #28]
 80054f8:	4401      	add	r1, r0
 80054fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054fe:	4313      	orrs	r3, r2
 8005500:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	0151      	lsls	r1, r2, #5
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	440a      	add	r2, r1
 8005518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005520:	6113      	str	r3, [r2, #16]
 8005522:	e061      	b.n	80055e8 <USB_EPStartXfer+0x484>
 8005524:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d123      	bne.n	8005578 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005546:	69b9      	ldr	r1, [r7, #24]
 8005548:	0148      	lsls	r0, r1, #5
 800554a:	69f9      	ldr	r1, [r7, #28]
 800554c:	4401      	add	r1, r0
 800554e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005552:	4313      	orrs	r3, r2
 8005554:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	69fa      	ldr	r2, [r7, #28]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005574:	6113      	str	r3, [r2, #16]
 8005576:	e037      	b.n	80055e8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	4413      	add	r3, r2
 8005582:	1e5a      	subs	r2, r3, #1
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	fbb2 f3f3 	udiv	r3, r2, r3
 800558c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	8afa      	ldrh	r2, [r7, #22]
 8005594:	fb03 f202 	mul.w	r2, r3, r2
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	8afb      	ldrh	r3, [r7, #22]
 80055ac:	04d9      	lsls	r1, r3, #19
 80055ae:	4b38      	ldr	r3, [pc, #224]	; (8005690 <USB_EPStartXfer+0x52c>)
 80055b0:	400b      	ands	r3, r1
 80055b2:	69b9      	ldr	r1, [r7, #24]
 80055b4:	0148      	lsls	r0, r1, #5
 80055b6:	69f9      	ldr	r1, [r7, #28]
 80055b8:	4401      	add	r1, r0
 80055ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055be:	4313      	orrs	r3, r2
 80055c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055d8:	69b9      	ldr	r1, [r7, #24]
 80055da:	0148      	lsls	r0, r1, #5
 80055dc:	69f9      	ldr	r1, [r7, #28]
 80055de:	4401      	add	r1, r0
 80055e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055e4:	4313      	orrs	r3, r2
 80055e6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80055e8:	79fb      	ldrb	r3, [r7, #7]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d10d      	bne.n	800560a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	68d9      	ldr	r1, [r3, #12]
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005606:	460a      	mov	r2, r1
 8005608:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	791b      	ldrb	r3, [r3, #4]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d128      	bne.n	8005664 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d110      	bne.n	8005644 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e00f      	b.n	8005664 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	0151      	lsls	r1, r2, #5
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	440a      	add	r2, r1
 800565a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800565e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005662:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	440a      	add	r2, r1
 800567a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800567e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005682:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3720      	adds	r7, #32
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	1ff80000 	.word	0x1ff80000

08005694 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	785b      	ldrb	r3, [r3, #1]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d14a      	bne.n	8005748 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ca:	f040 8086 	bne.w	80057da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	7812      	ldrb	r2, [r2, #0]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	7812      	ldrb	r2, [r2, #0]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	440a      	add	r2, r1
 800570c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005714:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3301      	adds	r3, #1
 800571a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005722:	4293      	cmp	r3, r2
 8005724:	d902      	bls.n	800572c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	75fb      	strb	r3, [r7, #23]
          break;
 800572a:	e056      	b.n	80057da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005744:	d0e7      	beq.n	8005716 <USB_EPStopXfer+0x82>
 8005746:	e048      	b.n	80057da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800575c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005760:	d13b      	bne.n	80057da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	7812      	ldrb	r2, [r2, #0]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	440a      	add	r2, r1
 800577c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005780:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005784:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	7812      	ldrb	r2, [r2, #0]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3301      	adds	r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d902      	bls.n	80057c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	75fb      	strb	r3, [r7, #23]
          break;
 80057be:	e00c      	b.n	80057da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057d8:	d0e7      	beq.n	80057aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80057da:	7dfb      	ldrb	r3, [r7, #23]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b089      	sub	sp, #36	; 0x24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4611      	mov	r1, r2
 80057f4:	461a      	mov	r2, r3
 80057f6:	460b      	mov	r3, r1
 80057f8:	71fb      	strb	r3, [r7, #7]
 80057fa:	4613      	mov	r3, r2
 80057fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005806:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800580a:	2b00      	cmp	r3, #0
 800580c:	d123      	bne.n	8005856 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800580e:	88bb      	ldrh	r3, [r7, #4]
 8005810:	3303      	adds	r3, #3
 8005812:	089b      	lsrs	r3, r3, #2
 8005814:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005816:	2300      	movs	r3, #0
 8005818:	61bb      	str	r3, [r7, #24]
 800581a:	e018      	b.n	800584e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	031a      	lsls	r2, r3, #12
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	4413      	add	r3, r2
 8005824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005828:	461a      	mov	r2, r3
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	3301      	adds	r3, #1
 8005834:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	3301      	adds	r3, #1
 800583a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	3301      	adds	r3, #1
 8005840:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	3301      	adds	r3, #1
 8005846:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	3301      	adds	r3, #1
 800584c:	61bb      	str	r3, [r7, #24]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	429a      	cmp	r2, r3
 8005854:	d3e2      	bcc.n	800581c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3724      	adds	r7, #36	; 0x24
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005864:	b480      	push	{r7}
 8005866:	b08b      	sub	sp, #44	; 0x2c
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	4613      	mov	r3, r2
 8005870:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	089b      	lsrs	r3, r3, #2
 800587e:	b29b      	uxth	r3, r3
 8005880:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	f003 0303 	and.w	r3, r3, #3
 8005888:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800588a:	2300      	movs	r3, #0
 800588c:	623b      	str	r3, [r7, #32]
 800588e:	e014      	b.n	80058ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	601a      	str	r2, [r3, #0]
    pDest++;
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	3301      	adds	r3, #1
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	3301      	adds	r3, #1
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	3301      	adds	r3, #1
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	3301      	adds	r3, #1
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	3301      	adds	r3, #1
 80058b8:	623b      	str	r3, [r7, #32]
 80058ba:	6a3a      	ldr	r2, [r7, #32]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d3e6      	bcc.n	8005890 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058c2:	8bfb      	ldrh	r3, [r7, #30]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01e      	beq.n	8005906 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d2:	461a      	mov	r2, r3
 80058d4:	f107 0310 	add.w	r3, r7, #16
 80058d8:	6812      	ldr	r2, [r2, #0]
 80058da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	fa22 f303 	lsr.w	r3, r2, r3
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	701a      	strb	r2, [r3, #0]
      i++;
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	3301      	adds	r3, #1
 80058f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	3301      	adds	r3, #1
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80058fa:	8bfb      	ldrh	r3, [r7, #30]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005900:	8bfb      	ldrh	r3, [r7, #30]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1ea      	bne.n	80058dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005908:	4618      	mov	r0, r3
 800590a:	372c      	adds	r7, #44	; 0x2c
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d12c      	bne.n	800598a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	db12      	blt.n	8005968 <USB_EPSetStall+0x54>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00f      	beq.n	8005968 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	0151      	lsls	r1, r2, #5
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	440a      	add	r2, r1
 800595e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005962:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005966:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	0151      	lsls	r1, r2, #5
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	440a      	add	r2, r1
 800597e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005982:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	e02b      	b.n	80059e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	db12      	blt.n	80059c2 <USB_EPSetStall+0xae>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00f      	beq.n	80059c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	0151      	lsls	r1, r2, #5
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	440a      	add	r2, r1
 80059b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d128      	bne.n	8005a5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	791b      	ldrb	r3, [r3, #4]
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d003      	beq.n	8005a3c <USB_EPClearStall+0x4c>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	791b      	ldrb	r3, [r3, #4]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d138      	bne.n	8005aae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	e027      	b.n	8005aae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	791b      	ldrb	r3, [r3, #4]
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d003      	beq.n	8005a8e <USB_EPClearStall+0x9e>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	791b      	ldrb	r3, [r3, #4]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d10f      	bne.n	8005aae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ada:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ade:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005af0:	68f9      	ldr	r1, [r7, #12]
 8005af2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005af6:	4313      	orrs	r3, r2
 8005af8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b22:	f023 0303 	bic.w	r3, r3, #3
 8005b26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b36:	f023 0302 	bic.w	r3, r3, #2
 8005b3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b64:	f023 0303 	bic.w	r3, r3, #3
 8005b68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b78:	f043 0302 	orr.w	r3, r3, #2
 8005b7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	0c1b      	lsrs	r3, r3, #16
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b085      	sub	sp, #20
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	4013      	ands	r3, r2
 8005c08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	b29b      	uxth	r3, r3
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	460b      	mov	r3, r1
 8005c24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	4013      	ands	r3, r2
 8005c46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c48:	68bb      	ldr	r3, [r7, #8]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b087      	sub	sp, #28
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	460b      	mov	r3, r1
 8005c60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	fa22 f303 	lsr.w	r3, r2, r3
 8005c86:	01db      	lsls	r3, r3, #7
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005cec:	f023 0307 	bic.w	r3, r3, #7
 8005cf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	333c      	adds	r3, #60	; 0x3c
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4a26      	ldr	r2, [pc, #152]	; (8005dcc <USB_EP0_OutStart+0xb8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d90a      	bls.n	8005d4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d48:	d101      	bne.n	8005d4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e037      	b.n	8005dbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d54:	461a      	mov	r2, r3
 8005d56:	2300      	movs	r3, #0
 8005d58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7c:	f043 0318 	orr.w	r3, r3, #24
 8005d80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005d94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d96:	7afb      	ldrb	r3, [r7, #11]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d10f      	bne.n	8005dbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da2:	461a      	mov	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005dba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	4f54300a 	.word	0x4f54300a

08005dd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3301      	adds	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005de8:	d901      	bls.n	8005dee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e01b      	b.n	8005e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	daf2      	bge.n	8005ddc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f043 0201 	orr.w	r2, r3, #1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005e12:	d901      	bls.n	8005e18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e006      	b.n	8005e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d0f0      	beq.n	8005e06 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
	...

08005e34 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005e40:	2018      	movs	r0, #24
 8005e42:	f002 fadb 	bl	80083fc <USBD_static_malloc>
 8005e46:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d109      	bne.n	8005e62 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	32b0      	adds	r2, #176	; 0xb0
 8005e58:	2100      	movs	r1, #0
 8005e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e08a      	b.n	8005f78 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	32b0      	adds	r2, #176	; 0xb0
 8005e6c:	68f9      	ldr	r1, [r7, #12]
 8005e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	32b0      	adds	r2, #176	; 0xb0
 8005e7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	7c1b      	ldrb	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d11b      	bne.n	8005ec6 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e8e:	4b3c      	ldr	r3, [pc, #240]	; (8005f80 <USBD_CUSTOM_HID_Init+0x14c>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	f003 020f 	and.w	r2, r3, #15
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3326      	adds	r3, #38	; 0x26
 8005ea4:	2205      	movs	r2, #5
 8005ea6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005ea8:	4b36      	ldr	r3, [pc, #216]	; (8005f84 <USBD_CUSTOM_HID_Init+0x150>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	f003 020f 	and.w	r2, r3, #15
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	440b      	add	r3, r1
 8005ebc:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005ec0:	2205      	movs	r2, #5
 8005ec2:	801a      	strh	r2, [r3, #0]
 8005ec4:	e01a      	b.n	8005efc <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005ec6:	4b2e      	ldr	r3, [pc, #184]	; (8005f80 <USBD_CUSTOM_HID_Init+0x14c>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	f003 020f 	and.w	r2, r3, #15
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	440b      	add	r3, r1
 8005eda:	3326      	adds	r3, #38	; 0x26
 8005edc:	2205      	movs	r2, #5
 8005ede:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005ee0:	4b28      	ldr	r3, [pc, #160]	; (8005f84 <USBD_CUSTOM_HID_Init+0x150>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	f003 020f 	and.w	r2, r3, #15
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005ef8:	2205      	movs	r2, #5
 8005efa:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8005efc:	4b20      	ldr	r3, [pc, #128]	; (8005f80 <USBD_CUSTOM_HID_Init+0x14c>)
 8005efe:	7819      	ldrb	r1, [r3, #0]
 8005f00:	2302      	movs	r3, #2
 8005f02:	2203      	movs	r2, #3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f002 f968 	bl	80081da <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8005f0a:	4b1d      	ldr	r3, [pc, #116]	; (8005f80 <USBD_CUSTOM_HID_Init+0x14c>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	f003 020f 	and.w	r2, r3, #15
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	3324      	adds	r3, #36	; 0x24
 8005f20:	2201      	movs	r2, #1
 8005f22:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8005f24:	4b17      	ldr	r3, [pc, #92]	; (8005f84 <USBD_CUSTOM_HID_Init+0x150>)
 8005f26:	7819      	ldrb	r1, [r3, #0]
 8005f28:	2302      	movs	r3, #2
 8005f2a:	2203      	movs	r2, #3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f002 f954 	bl	80081da <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8005f32:	4b14      	ldr	r3, [pc, #80]	; (8005f84 <USBD_CUSTOM_HID_Init+0x150>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	f003 020f 	and.w	r2, r3, #15
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	440b      	add	r3, r1
 8005f46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	33b0      	adds	r3, #176	; 0xb0
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005f68:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <USBD_CUSTOM_HID_Init+0x150>)
 8005f6a:	7819      	ldrb	r1, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	2302      	movs	r3, #2
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f002 fa21 	bl	80083b8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20000086 	.word	0x20000086
 8005f84:	20000087 	.word	0x20000087

08005f88 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8005f94:	4b37      	ldr	r3, [pc, #220]	; (8006074 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f002 f943 	bl	8008226 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8005fa0:	4b34      	ldr	r3, [pc, #208]	; (8006074 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	f003 020f 	and.w	r2, r3, #15
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	3324      	adds	r3, #36	; 0x24
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8005fba:	4b2e      	ldr	r3, [pc, #184]	; (8006074 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	f003 020f 	and.w	r2, r3, #15
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	3326      	adds	r3, #38	; 0x26
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8005fd4:	4b28      	ldr	r3, [pc, #160]	; (8006078 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f002 f923 	bl	8008226 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8005fe0:	4b25      	ldr	r3, [pc, #148]	; (8006078 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	f003 020f 	and.w	r2, r3, #15
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8005ffc:	4b1e      	ldr	r3, [pc, #120]	; (8006078 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	f003 020f 	and.w	r2, r3, #15
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006014:	2200      	movs	r2, #0
 8006016:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	32b0      	adds	r2, #176	; 0xb0
 8006022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d01f      	beq.n	800606a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	33b0      	adds	r3, #176	; 0xb0
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	32b0      	adds	r2, #176	; 0xb0
 8006048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604c:	4618      	mov	r0, r3
 800604e:	f002 f9e3 	bl	8008418 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	32b0      	adds	r2, #176	; 0xb0
 800605c:	2100      	movs	r1, #0
 800605e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000086 	.word	0x20000086
 8006078:	20000087 	.word	0x20000087

0800607c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	32b0      	adds	r2, #176	; 0xb0
 8006090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006094:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800609a:	2300      	movs	r3, #0
 800609c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e0f8      	b.n	80062a2 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d056      	beq.n	800616a <USBD_CUSTOM_HID_Setup+0xee>
 80060bc:	2b20      	cmp	r3, #32
 80060be:	f040 80e8 	bne.w	8006292 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	785b      	ldrb	r3, [r3, #1]
 80060c6:	3b02      	subs	r3, #2
 80060c8:	2b09      	cmp	r3, #9
 80060ca:	d846      	bhi.n	800615a <USBD_CUSTOM_HID_Setup+0xde>
 80060cc:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <USBD_CUSTOM_HID_Setup+0x58>)
 80060ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d2:	bf00      	nop
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	0800610b 	.word	0x0800610b
 80060dc:	0800615b 	.word	0x0800615b
 80060e0:	0800615b 	.word	0x0800615b
 80060e4:	0800615b 	.word	0x0800615b
 80060e8:	0800615b 	.word	0x0800615b
 80060ec:	0800615b 	.word	0x0800615b
 80060f0:	0800613d 	.word	0x0800613d
 80060f4:	0800611b 	.word	0x0800611b
 80060f8:	080060fd 	.word	0x080060fd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	885b      	ldrh	r3, [r3, #2]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	461a      	mov	r2, r3
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	605a      	str	r2, [r3, #4]
          break;
 8006108:	e02e      	b.n	8006168 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	3304      	adds	r3, #4
 800610e:	2201      	movs	r2, #1
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 fccc 	bl	8007ab0 <USBD_CtlSendData>
          break;
 8006118:	e026      	b.n	8006168 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	885b      	ldrh	r3, [r3, #2]
 800611e:	0a1b      	lsrs	r3, r3, #8
 8006120:	b29b      	uxth	r3, r3
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	609a      	str	r2, [r3, #8]
          break;
 800612a:	e01d      	b.n	8006168 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	3308      	adds	r3, #8
 8006130:	2201      	movs	r2, #1
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fcbb 	bl	8007ab0 <USBD_CtlSendData>
          break;
 800613a:	e015      	b.n	8006168 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2201      	movs	r2, #1
 8006140:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006142:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	88db      	ldrh	r3, [r3, #6]
 8006148:	2b02      	cmp	r3, #2
 800614a:	bf28      	it	cs
 800614c:	2302      	movcs	r3, #2
 800614e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006150:	461a      	mov	r2, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 fcd8 	bl	8007b08 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006158:	e006      	b.n	8006168 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 fc36 	bl	80079ce <USBD_CtlError>
          ret = USBD_FAIL;
 8006162:	2303      	movs	r3, #3
 8006164:	75fb      	strb	r3, [r7, #23]
          break;
 8006166:	bf00      	nop
      }
      break;
 8006168:	e09a      	b.n	80062a0 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b0b      	cmp	r3, #11
 8006170:	f200 8086 	bhi.w	8006280 <USBD_CUSTOM_HID_Setup+0x204>
 8006174:	a201      	add	r2, pc, #4	; (adr r2, 800617c <USBD_CUSTOM_HID_Setup+0x100>)
 8006176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617a:	bf00      	nop
 800617c:	080061ad 	.word	0x080061ad
 8006180:	0800628f 	.word	0x0800628f
 8006184:	08006281 	.word	0x08006281
 8006188:	08006281 	.word	0x08006281
 800618c:	08006281 	.word	0x08006281
 8006190:	08006281 	.word	0x08006281
 8006194:	080061d7 	.word	0x080061d7
 8006198:	08006281 	.word	0x08006281
 800619c:	08006281 	.word	0x08006281
 80061a0:	08006281 	.word	0x08006281
 80061a4:	0800622f 	.word	0x0800622f
 80061a8:	08006259 	.word	0x08006259
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d107      	bne.n	80061c8 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061b8:	f107 030e 	add.w	r3, r7, #14
 80061bc:	2202      	movs	r2, #2
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 fc75 	bl	8007ab0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061c6:	e063      	b.n	8006290 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 fbff 	bl	80079ce <USBD_CtlError>
            ret = USBD_FAIL;
 80061d0:	2303      	movs	r3, #3
 80061d2:	75fb      	strb	r3, [r7, #23]
          break;
 80061d4:	e05c      	b.n	8006290 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	885b      	ldrh	r3, [r3, #2]
 80061da:	0a1b      	lsrs	r3, r3, #8
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b22      	cmp	r3, #34	; 0x22
 80061e0:	d110      	bne.n	8006204 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	88db      	ldrh	r3, [r3, #6]
 80061e6:	2b2a      	cmp	r3, #42	; 0x2a
 80061e8:	bf28      	it	cs
 80061ea:	232a      	movcs	r3, #42	; 0x2a
 80061ec:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	33b0      	adds	r3, #176	; 0xb0
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	61bb      	str	r3, [r7, #24]
 8006202:	e00d      	b.n	8006220 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	885b      	ldrh	r3, [r3, #2]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b21      	cmp	r3, #33	; 0x21
 800620e:	d107      	bne.n	8006220 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006210:	4b26      	ldr	r3, [pc, #152]	; (80062ac <USBD_CUSTOM_HID_Setup+0x230>)
 8006212:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	88db      	ldrh	r3, [r3, #6]
 8006218:	2b09      	cmp	r3, #9
 800621a:	bf28      	it	cs
 800621c:	2309      	movcs	r3, #9
 800621e:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006220:	8bfb      	ldrh	r3, [r7, #30]
 8006222:	461a      	mov	r2, r3
 8006224:	69b9      	ldr	r1, [r7, #24]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f001 fc42 	bl	8007ab0 <USBD_CtlSendData>
          break;
 800622c:	e030      	b.n	8006290 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b03      	cmp	r3, #3
 8006238:	d107      	bne.n	800624a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	330c      	adds	r3, #12
 800623e:	2201      	movs	r2, #1
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f001 fc34 	bl	8007ab0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006248:	e022      	b.n	8006290 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 fbbe 	bl	80079ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006252:	2303      	movs	r3, #3
 8006254:	75fb      	strb	r3, [r7, #23]
          break;
 8006256:	e01b      	b.n	8006290 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b03      	cmp	r3, #3
 8006262:	d106      	bne.n	8006272 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	885b      	ldrh	r3, [r3, #2]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006270:	e00e      	b.n	8006290 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 fbaa 	bl	80079ce <USBD_CtlError>
            ret = USBD_FAIL;
 800627a:	2303      	movs	r3, #3
 800627c:	75fb      	strb	r3, [r7, #23]
          break;
 800627e:	e007      	b.n	8006290 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 fba3 	bl	80079ce <USBD_CtlError>
          ret = USBD_FAIL;
 8006288:	2303      	movs	r3, #3
 800628a:	75fb      	strb	r3, [r7, #23]
          break;
 800628c:	e000      	b.n	8006290 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800628e:	bf00      	nop
      }
      break;
 8006290:	e006      	b.n	80062a0 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 fb9a 	bl	80079ce <USBD_CtlError>
      ret = USBD_FAIL;
 800629a:	2303      	movs	r3, #3
 800629c:	75fb      	strb	r3, [r7, #23]
      break;
 800629e:	bf00      	nop
  }
  return (uint8_t)ret;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3720      	adds	r7, #32
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000070 	.word	0x20000070

080062b0 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	32b0      	adds	r2, #176	; 0xb0
 80062c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062cc:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e017      	b.n	8006308 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d110      	bne.n	8006306 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	7d1b      	ldrb	r3, [r3, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2201      	movs	r2, #1
 80062f0:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80062f2:	4b07      	ldr	r3, [pc, #28]	; (8006310 <USBD_CUSTOM_HID_SendReport+0x60>)
 80062f4:	7819      	ldrb	r1, [r3, #0]
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f002 f83b 	bl	8008376 <USBD_LL_Transmit>
 8006300:	e001      	b.n	8006306 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006302:	2301      	movs	r3, #1
 8006304:	e000      	b.n	8006308 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20000086 	.word	0x20000086

08006314 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800631c:	2181      	movs	r1, #129	; 0x81
 800631e:	4815      	ldr	r0, [pc, #84]	; (8006374 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006320:	f000 fd1d 	bl	8006d5e <USBD_GetEpDesc>
 8006324:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006326:	2101      	movs	r1, #1
 8006328:	4812      	ldr	r0, [pc, #72]	; (8006374 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800632a:	f000 fd18 	bl	8006d5e <USBD_GetEpDesc>
 800632e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f042 0202 	orr.w	r2, r2, #2
 800633e:	711a      	strb	r2, [r3, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2205      	movs	r2, #5
 8006348:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d009      	beq.n	8006364 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2200      	movs	r2, #0
 8006354:	f042 0202 	orr.w	r2, r2, #2
 8006358:	711a      	strb	r2, [r3, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2205      	movs	r2, #5
 8006362:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2229      	movs	r2, #41	; 0x29
 8006368:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800636a:	4b02      	ldr	r3, [pc, #8]	; (8006374 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20000044 	.word	0x20000044

08006378 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006380:	2181      	movs	r1, #129	; 0x81
 8006382:	4815      	ldr	r0, [pc, #84]	; (80063d8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006384:	f000 fceb 	bl	8006d5e <USBD_GetEpDesc>
 8006388:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800638a:	2101      	movs	r1, #1
 800638c:	4812      	ldr	r0, [pc, #72]	; (80063d8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800638e:	f000 fce6 	bl	8006d5e <USBD_GetEpDesc>
 8006392:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d009      	beq.n	80063ae <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f042 0202 	orr.w	r2, r2, #2
 80063a2:	711a      	strb	r2, [r3, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2205      	movs	r2, #5
 80063ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d009      	beq.n	80063c8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f042 0202 	orr.w	r2, r2, #2
 80063bc:	711a      	strb	r2, [r3, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2205      	movs	r2, #5
 80063c6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2229      	movs	r2, #41	; 0x29
 80063cc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80063ce:	4b02      	ldr	r3, [pc, #8]	; (80063d8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	20000044 	.word	0x20000044

080063dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80063e4:	2181      	movs	r1, #129	; 0x81
 80063e6:	4815      	ldr	r0, [pc, #84]	; (800643c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80063e8:	f000 fcb9 	bl	8006d5e <USBD_GetEpDesc>
 80063ec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80063ee:	2101      	movs	r1, #1
 80063f0:	4812      	ldr	r0, [pc, #72]	; (800643c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80063f2:	f000 fcb4 	bl	8006d5e <USBD_GetEpDesc>
 80063f6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d009      	beq.n	8006412 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f042 0202 	orr.w	r2, r2, #2
 8006406:	711a      	strb	r2, [r3, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2205      	movs	r2, #5
 8006410:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d009      	beq.n	800642c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2200      	movs	r2, #0
 800641c:	f042 0202 	orr.w	r2, r2, #2
 8006420:	711a      	strb	r2, [r3, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2205      	movs	r2, #5
 800642a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2229      	movs	r2, #41	; 0x29
 8006430:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006432:	4b02      	ldr	r3, [pc, #8]	; (800643c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20000044 	.word	0x20000044

08006440 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	32b0      	adds	r2, #176	; 0xb0
 8006456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645a:	2200      	movs	r2, #0
 800645c:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	32b0      	adds	r2, #176	; 0xb0
 8006482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800648a:	2303      	movs	r3, #3
 800648c:	e017      	b.n	80064be <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	32b0      	adds	r2, #176	; 0xb0
 8006498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800649c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	33b0      	adds	r3, #176	; 0xb0
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	7810      	ldrb	r0, [r2, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	7852      	ldrb	r2, [r2, #1]
 80064b8:	4611      	mov	r1, r2
 80064ba:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	32b0      	adds	r2, #176	; 0xb0
 80064da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e00f      	b.n	8006506 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	32b0      	adds	r2, #176	; 0xb0
 80064f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80064f6:	4b06      	ldr	r3, [pc, #24]	; (8006510 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80064f8:	7819      	ldrb	r1, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	2302      	movs	r3, #2
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f001 ff5a 	bl	80083b8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000087 	.word	0x20000087

08006514 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	32b0      	adds	r2, #176	; 0xb0
 8006526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006532:	2303      	movs	r3, #3
 8006534:	e016      	b.n	8006564 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d111      	bne.n	8006562 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	33b0      	adds	r3, #176	; 0xb0
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	7810      	ldrb	r0, [r2, #0]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	7852      	ldrb	r2, [r2, #1]
 8006558:	4611      	mov	r1, r2
 800655a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	220a      	movs	r2, #10
 8006578:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800657a:	4b03      	ldr	r3, [pc, #12]	; (8006588 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	2000007c 	.word	0x2000007c

0800658c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800659c:	2303      	movs	r3, #3
 800659e:	e009      	b.n	80065b4 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	33b0      	adds	r3, #176	; 0xb0
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	4613      	mov	r3, r2
 80065cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e01f      	b.n	8006618 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	79fa      	ldrb	r2, [r7, #7]
 800660a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f001 fd7d 	bl	800810c <USBD_LL_Init>
 8006612:	4603      	mov	r3, r0
 8006614:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006616:	7dfb      	ldrb	r3, [r7, #23]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006634:	2303      	movs	r3, #3
 8006636:	e025      	b.n	8006684 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	32ae      	adds	r2, #174	; 0xae
 800664a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00f      	beq.n	8006674 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	32ae      	adds	r2, #174	; 0xae
 800665e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	f107 020e 	add.w	r2, r7, #14
 8006668:	4610      	mov	r0, r2
 800666a:	4798      	blx	r3
 800666c:	4602      	mov	r2, r0
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f001 fd85 	bl	80081a4 <USBD_LL_Start>
 800669a:	4603      	mov	r3, r0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	460b      	mov	r3, r1
 80066c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d009      	beq.n	80066e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	78fa      	ldrb	r2, [r7, #3]
 80066de:	4611      	mov	r1, r2
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
 80066e4:	4603      	mov	r3, r0
 80066e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	78fa      	ldrb	r2, [r7, #3]
 800670c:	4611      	mov	r1, r2
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	4798      	blx	r3
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006718:	2303      	movs	r3, #3
 800671a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800671c:	7bfb      	ldrb	r3, [r7, #15]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	4618      	mov	r0, r3
 800673a:	f001 f90e 	bl	800795a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800674c:	461a      	mov	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800675a:	f003 031f 	and.w	r3, r3, #31
 800675e:	2b02      	cmp	r3, #2
 8006760:	d01a      	beq.n	8006798 <USBD_LL_SetupStage+0x72>
 8006762:	2b02      	cmp	r3, #2
 8006764:	d822      	bhi.n	80067ac <USBD_LL_SetupStage+0x86>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <USBD_LL_SetupStage+0x4a>
 800676a:	2b01      	cmp	r3, #1
 800676c:	d00a      	beq.n	8006784 <USBD_LL_SetupStage+0x5e>
 800676e:	e01d      	b.n	80067ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fb65 	bl	8006e48 <USBD_StdDevReq>
 800677e:	4603      	mov	r3, r0
 8006780:	73fb      	strb	r3, [r7, #15]
      break;
 8006782:	e020      	b.n	80067c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fbcd 	bl	8006f2c <USBD_StdItfReq>
 8006792:	4603      	mov	r3, r0
 8006794:	73fb      	strb	r3, [r7, #15]
      break;
 8006796:	e016      	b.n	80067c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fc2f 	bl	8007004 <USBD_StdEPReq>
 80067a6:	4603      	mov	r3, r0
 80067a8:	73fb      	strb	r3, [r7, #15]
      break;
 80067aa:	e00c      	b.n	80067c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 fd52 	bl	8008264 <USBD_LL_StallEP>
 80067c0:	4603      	mov	r3, r0
 80067c2:	73fb      	strb	r3, [r7, #15]
      break;
 80067c4:	bf00      	nop
  }

  return ret;
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	460b      	mov	r3, r1
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80067e2:	7afb      	ldrb	r3, [r7, #11]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d16e      	bne.n	80068c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	f040 8098 	bne.w	800692c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	429a      	cmp	r2, r3
 8006806:	d913      	bls.n	8006830 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	1ad2      	subs	r2, r2, r3
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	4293      	cmp	r3, r2
 8006820:	bf28      	it	cs
 8006822:	4613      	movcs	r3, r2
 8006824:	461a      	mov	r2, r3
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f001 f98a 	bl	8007b42 <USBD_CtlContinueRx>
 800682e:	e07d      	b.n	800692c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006836:	f003 031f 	and.w	r3, r3, #31
 800683a:	2b02      	cmp	r3, #2
 800683c:	d014      	beq.n	8006868 <USBD_LL_DataOutStage+0x98>
 800683e:	2b02      	cmp	r3, #2
 8006840:	d81d      	bhi.n	800687e <USBD_LL_DataOutStage+0xae>
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <USBD_LL_DataOutStage+0x7c>
 8006846:	2b01      	cmp	r3, #1
 8006848:	d003      	beq.n	8006852 <USBD_LL_DataOutStage+0x82>
 800684a:	e018      	b.n	800687e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	75bb      	strb	r3, [r7, #22]
            break;
 8006850:	e018      	b.n	8006884 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006858:	b2db      	uxtb	r3, r3
 800685a:	4619      	mov	r1, r3
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 fa64 	bl	8006d2a <USBD_CoreFindIF>
 8006862:	4603      	mov	r3, r0
 8006864:	75bb      	strb	r3, [r7, #22]
            break;
 8006866:	e00d      	b.n	8006884 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800686e:	b2db      	uxtb	r3, r3
 8006870:	4619      	mov	r1, r3
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 fa66 	bl	8006d44 <USBD_CoreFindEP>
 8006878:	4603      	mov	r3, r0
 800687a:	75bb      	strb	r3, [r7, #22]
            break;
 800687c:	e002      	b.n	8006884 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	75bb      	strb	r3, [r7, #22]
            break;
 8006882:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006884:	7dbb      	ldrb	r3, [r7, #22]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d119      	bne.n	80068be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b03      	cmp	r3, #3
 8006894:	d113      	bne.n	80068be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006896:	7dba      	ldrb	r2, [r7, #22]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	32ae      	adds	r2, #174	; 0xae
 800689c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00b      	beq.n	80068be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80068a6:	7dba      	ldrb	r2, [r7, #22]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80068ae:	7dba      	ldrb	r2, [r7, #22]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	32ae      	adds	r2, #174	; 0xae
 80068b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f001 f950 	bl	8007b64 <USBD_CtlSendStatus>
 80068c4:	e032      	b.n	800692c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80068c6:	7afb      	ldrb	r3, [r7, #11]
 80068c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	4619      	mov	r1, r3
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 fa37 	bl	8006d44 <USBD_CoreFindEP>
 80068d6:	4603      	mov	r3, r0
 80068d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068da:	7dbb      	ldrb	r3, [r7, #22]
 80068dc:	2bff      	cmp	r3, #255	; 0xff
 80068de:	d025      	beq.n	800692c <USBD_LL_DataOutStage+0x15c>
 80068e0:	7dbb      	ldrb	r3, [r7, #22]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d122      	bne.n	800692c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d117      	bne.n	8006922 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80068f2:	7dba      	ldrb	r2, [r7, #22]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	32ae      	adds	r2, #174	; 0xae
 80068f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00f      	beq.n	8006922 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006902:	7dba      	ldrb	r2, [r7, #22]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800690a:	7dba      	ldrb	r2, [r7, #22]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	32ae      	adds	r2, #174	; 0xae
 8006910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	7afa      	ldrb	r2, [r7, #11]
 8006918:	4611      	mov	r1, r2
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	4798      	blx	r3
 800691e:	4603      	mov	r3, r0
 8006920:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006928:	7dfb      	ldrb	r3, [r7, #23]
 800692a:	e000      	b.n	800692e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b086      	sub	sp, #24
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	460b      	mov	r3, r1
 8006940:	607a      	str	r2, [r7, #4]
 8006942:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006944:	7afb      	ldrb	r3, [r7, #11]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d16f      	bne.n	8006a2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3314      	adds	r3, #20
 800694e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006956:	2b02      	cmp	r3, #2
 8006958:	d15a      	bne.n	8006a10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	429a      	cmp	r2, r3
 8006964:	d914      	bls.n	8006990 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	1ad2      	subs	r2, r2, r3
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	461a      	mov	r2, r3
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f001 f8b2 	bl	8007ae6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006982:	2300      	movs	r3, #0
 8006984:	2200      	movs	r2, #0
 8006986:	2100      	movs	r1, #0
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f001 fd15 	bl	80083b8 <USBD_LL_PrepareReceive>
 800698e:	e03f      	b.n	8006a10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	429a      	cmp	r2, r3
 800699a:	d11c      	bne.n	80069d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d316      	bcc.n	80069d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d20f      	bcs.n	80069d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80069b6:	2200      	movs	r2, #0
 80069b8:	2100      	movs	r1, #0
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f001 f893 	bl	8007ae6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069c8:	2300      	movs	r3, #0
 80069ca:	2200      	movs	r2, #0
 80069cc:	2100      	movs	r1, #0
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f001 fcf2 	bl	80083b8 <USBD_LL_PrepareReceive>
 80069d4:	e01c      	b.n	8006a10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d10f      	bne.n	8006a02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d009      	beq.n	8006a02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a02:	2180      	movs	r1, #128	; 0x80
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f001 fc2d 	bl	8008264 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f001 f8bd 	bl	8007b8a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d03a      	beq.n	8006a90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7ff fe42 	bl	80066a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a28:	e032      	b.n	8006a90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006a2a:	7afb      	ldrb	r3, [r7, #11]
 8006a2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	4619      	mov	r1, r3
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f985 	bl	8006d44 <USBD_CoreFindEP>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	2bff      	cmp	r3, #255	; 0xff
 8006a42:	d025      	beq.n	8006a90 <USBD_LL_DataInStage+0x15a>
 8006a44:	7dfb      	ldrb	r3, [r7, #23]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d122      	bne.n	8006a90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d11c      	bne.n	8006a90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006a56:	7dfa      	ldrb	r2, [r7, #23]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	32ae      	adds	r2, #174	; 0xae
 8006a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d014      	beq.n	8006a90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006a66:	7dfa      	ldrb	r2, [r7, #23]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006a6e:	7dfa      	ldrb	r2, [r7, #23]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	32ae      	adds	r2, #174	; 0xae
 8006a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	7afa      	ldrb	r2, [r7, #11]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	4798      	blx	r3
 8006a82:	4603      	mov	r3, r0
 8006a84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006a86:	7dbb      	ldrb	r3, [r7, #22]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006a8c:	7dbb      	ldrb	r3, [r7, #22]
 8006a8e:	e000      	b.n	8006a92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d014      	beq.n	8006b00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00e      	beq.n	8006b00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6852      	ldr	r2, [r2, #4]
 8006aee:	b2d2      	uxtb	r2, r2
 8006af0:	4611      	mov	r1, r2
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	4798      	blx	r3
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006afc:	2303      	movs	r3, #3
 8006afe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b00:	2340      	movs	r3, #64	; 0x40
 8006b02:	2200      	movs	r2, #0
 8006b04:	2100      	movs	r1, #0
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 fb67 	bl	80081da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2240      	movs	r2, #64	; 0x40
 8006b18:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b1c:	2340      	movs	r3, #64	; 0x40
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2180      	movs	r1, #128	; 0x80
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 fb59 	bl	80081da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2240      	movs	r2, #64	; 0x40
 8006b32:	621a      	str	r2, [r3, #32]

  return ret;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	460b      	mov	r3, r1
 8006b48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	78fa      	ldrb	r2, [r7, #3]
 8006b4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d006      	beq.n	8006b80 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2204      	movs	r2, #4
 8006b84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d106      	bne.n	8006bb8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d110      	bne.n	8006bfc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00b      	beq.n	8006bfc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d005      	beq.n	8006bfc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b082      	sub	sp, #8
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	32ae      	adds	r2, #174	; 0xae
 8006c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e01c      	b.n	8006c62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d115      	bne.n	8006c60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	32ae      	adds	r2, #174	; 0xae
 8006c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00b      	beq.n	8006c60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	32ae      	adds	r2, #174	; 0xae
 8006c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	78fa      	ldrb	r2, [r7, #3]
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	460b      	mov	r3, r1
 8006c74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	32ae      	adds	r2, #174	; 0xae
 8006c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e01c      	b.n	8006cc6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d115      	bne.n	8006cc4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	32ae      	adds	r2, #174	; 0xae
 8006ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00b      	beq.n	8006cc4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	32ae      	adds	r2, #174	; 0xae
 8006cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	78fa      	ldrb	r2, [r7, #3]
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00e      	beq.n	8006d20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	6852      	ldr	r2, [r2, #4]
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	4611      	mov	r1, r2
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	4798      	blx	r3
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b086      	sub	sp, #24
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	460b      	mov	r3, r1
 8006d68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	885b      	ldrh	r3, [r3, #2]
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d920      	bls.n	8006dc8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006d8e:	e013      	b.n	8006db8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006d90:	f107 030a 	add.w	r3, r7, #10
 8006d94:	4619      	mov	r1, r3
 8006d96:	6978      	ldr	r0, [r7, #20]
 8006d98:	f000 f81b 	bl	8006dd2 <USBD_GetNextDesc>
 8006d9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	785b      	ldrb	r3, [r3, #1]
 8006da2:	2b05      	cmp	r3, #5
 8006da4:	d108      	bne.n	8006db8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	789b      	ldrb	r3, [r3, #2]
 8006dae:	78fa      	ldrb	r2, [r7, #3]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d008      	beq.n	8006dc6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	885b      	ldrh	r3, [r3, #2]
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	897b      	ldrh	r3, [r7, #10]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d8e5      	bhi.n	8006d90 <USBD_GetEpDesc+0x32>
 8006dc4:	e000      	b.n	8006dc8 <USBD_GetEpDesc+0x6a>
          break;
 8006dc6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006dc8:	693b      	ldr	r3, [r7, #16]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b085      	sub	sp, #20
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	881a      	ldrh	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	4413      	add	r3, r2
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	3301      	adds	r3, #1
 8006e22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e2a:	8a3b      	ldrh	r3, [r7, #16]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	b21a      	sxth	r2, r3
 8006e30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	b21b      	sxth	r3, r3
 8006e38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006e3a:	89fb      	ldrh	r3, [r7, #14]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e5e:	2b40      	cmp	r3, #64	; 0x40
 8006e60:	d005      	beq.n	8006e6e <USBD_StdDevReq+0x26>
 8006e62:	2b40      	cmp	r3, #64	; 0x40
 8006e64:	d857      	bhi.n	8006f16 <USBD_StdDevReq+0xce>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00f      	beq.n	8006e8a <USBD_StdDevReq+0x42>
 8006e6a:	2b20      	cmp	r3, #32
 8006e6c:	d153      	bne.n	8006f16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	32ae      	adds	r2, #174	; 0xae
 8006e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	4798      	blx	r3
 8006e84:	4603      	mov	r3, r0
 8006e86:	73fb      	strb	r3, [r7, #15]
      break;
 8006e88:	e04a      	b.n	8006f20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	785b      	ldrb	r3, [r3, #1]
 8006e8e:	2b09      	cmp	r3, #9
 8006e90:	d83b      	bhi.n	8006f0a <USBD_StdDevReq+0xc2>
 8006e92:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <USBD_StdDevReq+0x50>)
 8006e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e98:	08006eed 	.word	0x08006eed
 8006e9c:	08006f01 	.word	0x08006f01
 8006ea0:	08006f0b 	.word	0x08006f0b
 8006ea4:	08006ef7 	.word	0x08006ef7
 8006ea8:	08006f0b 	.word	0x08006f0b
 8006eac:	08006ecb 	.word	0x08006ecb
 8006eb0:	08006ec1 	.word	0x08006ec1
 8006eb4:	08006f0b 	.word	0x08006f0b
 8006eb8:	08006ee3 	.word	0x08006ee3
 8006ebc:	08006ed5 	.word	0x08006ed5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fa3c 	bl	8007340 <USBD_GetDescriptor>
          break;
 8006ec8:	e024      	b.n	8006f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fba1 	bl	8007614 <USBD_SetAddress>
          break;
 8006ed2:	e01f      	b.n	8006f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fbe0 	bl	800769c <USBD_SetConfig>
 8006edc:	4603      	mov	r3, r0
 8006ede:	73fb      	strb	r3, [r7, #15]
          break;
 8006ee0:	e018      	b.n	8006f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fc83 	bl	80077f0 <USBD_GetConfig>
          break;
 8006eea:	e013      	b.n	8006f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fcb4 	bl	800785c <USBD_GetStatus>
          break;
 8006ef4:	e00e      	b.n	8006f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fce3 	bl	80078c4 <USBD_SetFeature>
          break;
 8006efe:	e009      	b.n	8006f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fd07 	bl	8007916 <USBD_ClrFeature>
          break;
 8006f08:	e004      	b.n	8006f14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fd5e 	bl	80079ce <USBD_CtlError>
          break;
 8006f12:	bf00      	nop
      }
      break;
 8006f14:	e004      	b.n	8006f20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fd58 	bl	80079ce <USBD_CtlError>
      break;
 8006f1e:	bf00      	nop
  }

  return ret;
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop

08006f2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f42:	2b40      	cmp	r3, #64	; 0x40
 8006f44:	d005      	beq.n	8006f52 <USBD_StdItfReq+0x26>
 8006f46:	2b40      	cmp	r3, #64	; 0x40
 8006f48:	d852      	bhi.n	8006ff0 <USBD_StdItfReq+0xc4>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <USBD_StdItfReq+0x26>
 8006f4e:	2b20      	cmp	r3, #32
 8006f50:	d14e      	bne.n	8006ff0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d840      	bhi.n	8006fe2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	889b      	ldrh	r3, [r3, #4]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d836      	bhi.n	8006fd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	889b      	ldrh	r3, [r3, #4]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff fed9 	bl	8006d2a <USBD_CoreFindIF>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	2bff      	cmp	r3, #255	; 0xff
 8006f80:	d01d      	beq.n	8006fbe <USBD_StdItfReq+0x92>
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d11a      	bne.n	8006fbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006f88:	7bba      	ldrb	r2, [r7, #14]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	32ae      	adds	r2, #174	; 0xae
 8006f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00f      	beq.n	8006fb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006f98:	7bba      	ldrb	r2, [r7, #14]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006fa0:	7bba      	ldrb	r2, [r7, #14]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	32ae      	adds	r2, #174	; 0xae
 8006fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	4798      	blx	r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006fb6:	e004      	b.n	8006fc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006fbc:	e001      	b.n	8006fc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	88db      	ldrh	r3, [r3, #6]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d110      	bne.n	8006fec <USBD_StdItfReq+0xc0>
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10d      	bne.n	8006fec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fdc7 	bl	8007b64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006fd6:	e009      	b.n	8006fec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fcf7 	bl	80079ce <USBD_CtlError>
          break;
 8006fe0:	e004      	b.n	8006fec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fcf2 	bl	80079ce <USBD_CtlError>
          break;
 8006fea:	e000      	b.n	8006fee <USBD_StdItfReq+0xc2>
          break;
 8006fec:	bf00      	nop
      }
      break;
 8006fee:	e004      	b.n	8006ffa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fceb 	bl	80079ce <USBD_CtlError>
      break;
 8006ff8:	bf00      	nop
  }

  return ret;
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	889b      	ldrh	r3, [r3, #4]
 8007016:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007020:	2b40      	cmp	r3, #64	; 0x40
 8007022:	d007      	beq.n	8007034 <USBD_StdEPReq+0x30>
 8007024:	2b40      	cmp	r3, #64	; 0x40
 8007026:	f200 817f 	bhi.w	8007328 <USBD_StdEPReq+0x324>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d02a      	beq.n	8007084 <USBD_StdEPReq+0x80>
 800702e:	2b20      	cmp	r3, #32
 8007030:	f040 817a 	bne.w	8007328 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007034:	7bbb      	ldrb	r3, [r7, #14]
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff fe83 	bl	8006d44 <USBD_CoreFindEP>
 800703e:	4603      	mov	r3, r0
 8007040:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007042:	7b7b      	ldrb	r3, [r7, #13]
 8007044:	2bff      	cmp	r3, #255	; 0xff
 8007046:	f000 8174 	beq.w	8007332 <USBD_StdEPReq+0x32e>
 800704a:	7b7b      	ldrb	r3, [r7, #13]
 800704c:	2b00      	cmp	r3, #0
 800704e:	f040 8170 	bne.w	8007332 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007052:	7b7a      	ldrb	r2, [r7, #13]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800705a:	7b7a      	ldrb	r2, [r7, #13]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	32ae      	adds	r2, #174	; 0xae
 8007060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 8163 	beq.w	8007332 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800706c:	7b7a      	ldrb	r2, [r7, #13]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	32ae      	adds	r2, #174	; 0xae
 8007072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
 800707e:	4603      	mov	r3, r0
 8007080:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007082:	e156      	b.n	8007332 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	2b03      	cmp	r3, #3
 800708a:	d008      	beq.n	800709e <USBD_StdEPReq+0x9a>
 800708c:	2b03      	cmp	r3, #3
 800708e:	f300 8145 	bgt.w	800731c <USBD_StdEPReq+0x318>
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 809b 	beq.w	80071ce <USBD_StdEPReq+0x1ca>
 8007098:	2b01      	cmp	r3, #1
 800709a:	d03c      	beq.n	8007116 <USBD_StdEPReq+0x112>
 800709c:	e13e      	b.n	800731c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d002      	beq.n	80070b0 <USBD_StdEPReq+0xac>
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d016      	beq.n	80070dc <USBD_StdEPReq+0xd8>
 80070ae:	e02c      	b.n	800710a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070b0:	7bbb      	ldrb	r3, [r7, #14]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00d      	beq.n	80070d2 <USBD_StdEPReq+0xce>
 80070b6:	7bbb      	ldrb	r3, [r7, #14]
 80070b8:	2b80      	cmp	r3, #128	; 0x80
 80070ba:	d00a      	beq.n	80070d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 f8cf 	bl	8008264 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070c6:	2180      	movs	r1, #128	; 0x80
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f001 f8cb 	bl	8008264 <USBD_LL_StallEP>
 80070ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070d0:	e020      	b.n	8007114 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fc7a 	bl	80079ce <USBD_CtlError>
              break;
 80070da:	e01b      	b.n	8007114 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	885b      	ldrh	r3, [r3, #2]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10e      	bne.n	8007102 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00b      	beq.n	8007102 <USBD_StdEPReq+0xfe>
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	2b80      	cmp	r3, #128	; 0x80
 80070ee:	d008      	beq.n	8007102 <USBD_StdEPReq+0xfe>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	88db      	ldrh	r3, [r3, #6]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 f8b1 	bl	8008264 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fd2e 	bl	8007b64 <USBD_CtlSendStatus>

              break;
 8007108:	e004      	b.n	8007114 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fc5e 	bl	80079ce <USBD_CtlError>
              break;
 8007112:	bf00      	nop
          }
          break;
 8007114:	e107      	b.n	8007326 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d002      	beq.n	8007128 <USBD_StdEPReq+0x124>
 8007122:	2b03      	cmp	r3, #3
 8007124:	d016      	beq.n	8007154 <USBD_StdEPReq+0x150>
 8007126:	e04b      	b.n	80071c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00d      	beq.n	800714a <USBD_StdEPReq+0x146>
 800712e:	7bbb      	ldrb	r3, [r7, #14]
 8007130:	2b80      	cmp	r3, #128	; 0x80
 8007132:	d00a      	beq.n	800714a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007134:	7bbb      	ldrb	r3, [r7, #14]
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 f893 	bl	8008264 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800713e:	2180      	movs	r1, #128	; 0x80
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f001 f88f 	bl	8008264 <USBD_LL_StallEP>
 8007146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007148:	e040      	b.n	80071cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fc3e 	bl	80079ce <USBD_CtlError>
              break;
 8007152:	e03b      	b.n	80071cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	885b      	ldrh	r3, [r3, #2]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d136      	bne.n	80071ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007162:	2b00      	cmp	r3, #0
 8007164:	d004      	beq.n	8007170 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f001 f899 	bl	80082a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fcf7 	bl	8007b64 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007176:	7bbb      	ldrb	r3, [r7, #14]
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7ff fde2 	bl	8006d44 <USBD_CoreFindEP>
 8007180:	4603      	mov	r3, r0
 8007182:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007184:	7b7b      	ldrb	r3, [r7, #13]
 8007186:	2bff      	cmp	r3, #255	; 0xff
 8007188:	d01f      	beq.n	80071ca <USBD_StdEPReq+0x1c6>
 800718a:	7b7b      	ldrb	r3, [r7, #13]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d11c      	bne.n	80071ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007190:	7b7a      	ldrb	r2, [r7, #13]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007198:	7b7a      	ldrb	r2, [r7, #13]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	32ae      	adds	r2, #174	; 0xae
 800719e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d010      	beq.n	80071ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80071a8:	7b7a      	ldrb	r2, [r7, #13]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	32ae      	adds	r2, #174	; 0xae
 80071ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
 80071ba:	4603      	mov	r3, r0
 80071bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80071be:	e004      	b.n	80071ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fc03 	bl	80079ce <USBD_CtlError>
              break;
 80071c8:	e000      	b.n	80071cc <USBD_StdEPReq+0x1c8>
              break;
 80071ca:	bf00      	nop
          }
          break;
 80071cc:	e0ab      	b.n	8007326 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d002      	beq.n	80071e0 <USBD_StdEPReq+0x1dc>
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d032      	beq.n	8007244 <USBD_StdEPReq+0x240>
 80071de:	e097      	b.n	8007310 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <USBD_StdEPReq+0x1f2>
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
 80071e8:	2b80      	cmp	r3, #128	; 0x80
 80071ea:	d004      	beq.n	80071f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fbed 	bl	80079ce <USBD_CtlError>
                break;
 80071f4:	e091      	b.n	800731a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da0b      	bge.n	8007216 <USBD_StdEPReq+0x212>
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007204:	4613      	mov	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	3310      	adds	r3, #16
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	4413      	add	r3, r2
 8007212:	3304      	adds	r3, #4
 8007214:	e00b      	b.n	800722e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800721c:	4613      	mov	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	4413      	add	r3, r2
 800722c:	3304      	adds	r3, #4
 800722e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2202      	movs	r2, #2
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fc37 	bl	8007ab0 <USBD_CtlSendData>
              break;
 8007242:	e06a      	b.n	800731a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007248:	2b00      	cmp	r3, #0
 800724a:	da11      	bge.n	8007270 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	f003 020f 	and.w	r2, r3, #15
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	4613      	mov	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	440b      	add	r3, r1
 800725e:	3324      	adds	r3, #36	; 0x24
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d117      	bne.n	8007296 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fbb0 	bl	80079ce <USBD_CtlError>
                  break;
 800726e:	e054      	b.n	800731a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	f003 020f 	and.w	r2, r3, #15
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	4613      	mov	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	440b      	add	r3, r1
 8007282:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d104      	bne.n	8007296 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fb9d 	bl	80079ce <USBD_CtlError>
                  break;
 8007294:	e041      	b.n	800731a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800729a:	2b00      	cmp	r3, #0
 800729c:	da0b      	bge.n	80072b6 <USBD_StdEPReq+0x2b2>
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	3310      	adds	r3, #16
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	4413      	add	r3, r2
 80072b2:	3304      	adds	r3, #4
 80072b4:	e00b      	b.n	80072ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072b6:	7bbb      	ldrb	r3, [r7, #14]
 80072b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	4413      	add	r3, r2
 80072cc:	3304      	adds	r3, #4
 80072ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <USBD_StdEPReq+0x2d8>
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	2b80      	cmp	r3, #128	; 0x80
 80072da:	d103      	bne.n	80072e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2200      	movs	r2, #0
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	e00e      	b.n	8007302 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fff9 	bl	80082e0 <USBD_LL_IsStallEP>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2201      	movs	r2, #1
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	e002      	b.n	8007302 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2200      	movs	r2, #0
 8007300:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2202      	movs	r2, #2
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fbd1 	bl	8007ab0 <USBD_CtlSendData>
              break;
 800730e:	e004      	b.n	800731a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fb5b 	bl	80079ce <USBD_CtlError>
              break;
 8007318:	bf00      	nop
          }
          break;
 800731a:	e004      	b.n	8007326 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fb55 	bl	80079ce <USBD_CtlError>
          break;
 8007324:	bf00      	nop
      }
      break;
 8007326:	e005      	b.n	8007334 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fb4f 	bl	80079ce <USBD_CtlError>
      break;
 8007330:	e000      	b.n	8007334 <USBD_StdEPReq+0x330>
      break;
 8007332:	bf00      	nop
  }

  return ret;
 8007334:	7bfb      	ldrb	r3, [r7, #15]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
	...

08007340 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	885b      	ldrh	r3, [r3, #2]
 800735a:	0a1b      	lsrs	r3, r3, #8
 800735c:	b29b      	uxth	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	2b06      	cmp	r3, #6
 8007362:	f200 8128 	bhi.w	80075b6 <USBD_GetDescriptor+0x276>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <USBD_GetDescriptor+0x2c>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	08007389 	.word	0x08007389
 8007370:	080073a1 	.word	0x080073a1
 8007374:	080073e1 	.word	0x080073e1
 8007378:	080075b7 	.word	0x080075b7
 800737c:	080075b7 	.word	0x080075b7
 8007380:	08007557 	.word	0x08007557
 8007384:	08007583 	.word	0x08007583
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	7c12      	ldrb	r2, [r2, #16]
 8007394:	f107 0108 	add.w	r1, r7, #8
 8007398:	4610      	mov	r0, r2
 800739a:	4798      	blx	r3
 800739c:	60f8      	str	r0, [r7, #12]
      break;
 800739e:	e112      	b.n	80075c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	7c1b      	ldrb	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10d      	bne.n	80073c4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b0:	f107 0208 	add.w	r2, r7, #8
 80073b4:	4610      	mov	r0, r2
 80073b6:	4798      	blx	r3
 80073b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	3301      	adds	r3, #1
 80073be:	2202      	movs	r2, #2
 80073c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80073c2:	e100      	b.n	80075c6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	f107 0208 	add.w	r2, r7, #8
 80073d0:	4610      	mov	r0, r2
 80073d2:	4798      	blx	r3
 80073d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3301      	adds	r3, #1
 80073da:	2202      	movs	r2, #2
 80073dc:	701a      	strb	r2, [r3, #0]
      break;
 80073de:	e0f2      	b.n	80075c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	885b      	ldrh	r3, [r3, #2]
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b05      	cmp	r3, #5
 80073e8:	f200 80ac 	bhi.w	8007544 <USBD_GetDescriptor+0x204>
 80073ec:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <USBD_GetDescriptor+0xb4>)
 80073ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f2:	bf00      	nop
 80073f4:	0800740d 	.word	0x0800740d
 80073f8:	08007441 	.word	0x08007441
 80073fc:	08007475 	.word	0x08007475
 8007400:	080074a9 	.word	0x080074a9
 8007404:	080074dd 	.word	0x080074dd
 8007408:	08007511 	.word	0x08007511
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00b      	beq.n	8007430 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	7c12      	ldrb	r2, [r2, #16]
 8007424:	f107 0108 	add.w	r1, r7, #8
 8007428:	4610      	mov	r0, r2
 800742a:	4798      	blx	r3
 800742c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800742e:	e091      	b.n	8007554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 facb 	bl	80079ce <USBD_CtlError>
            err++;
 8007438:	7afb      	ldrb	r3, [r7, #11]
 800743a:	3301      	adds	r3, #1
 800743c:	72fb      	strb	r3, [r7, #11]
          break;
 800743e:	e089      	b.n	8007554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00b      	beq.n	8007464 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	7c12      	ldrb	r2, [r2, #16]
 8007458:	f107 0108 	add.w	r1, r7, #8
 800745c:	4610      	mov	r0, r2
 800745e:	4798      	blx	r3
 8007460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007462:	e077      	b.n	8007554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fab1 	bl	80079ce <USBD_CtlError>
            err++;
 800746c:	7afb      	ldrb	r3, [r7, #11]
 800746e:	3301      	adds	r3, #1
 8007470:	72fb      	strb	r3, [r7, #11]
          break;
 8007472:	e06f      	b.n	8007554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00b      	beq.n	8007498 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	7c12      	ldrb	r2, [r2, #16]
 800748c:	f107 0108 	add.w	r1, r7, #8
 8007490:	4610      	mov	r0, r2
 8007492:	4798      	blx	r3
 8007494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007496:	e05d      	b.n	8007554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fa97 	bl	80079ce <USBD_CtlError>
            err++;
 80074a0:	7afb      	ldrb	r3, [r7, #11]
 80074a2:	3301      	adds	r3, #1
 80074a4:	72fb      	strb	r3, [r7, #11]
          break;
 80074a6:	e055      	b.n	8007554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00b      	beq.n	80074cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	7c12      	ldrb	r2, [r2, #16]
 80074c0:	f107 0108 	add.w	r1, r7, #8
 80074c4:	4610      	mov	r0, r2
 80074c6:	4798      	blx	r3
 80074c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ca:	e043      	b.n	8007554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fa7d 	bl	80079ce <USBD_CtlError>
            err++;
 80074d4:	7afb      	ldrb	r3, [r7, #11]
 80074d6:	3301      	adds	r3, #1
 80074d8:	72fb      	strb	r3, [r7, #11]
          break;
 80074da:	e03b      	b.n	8007554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00b      	beq.n	8007500 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	7c12      	ldrb	r2, [r2, #16]
 80074f4:	f107 0108 	add.w	r1, r7, #8
 80074f8:	4610      	mov	r0, r2
 80074fa:	4798      	blx	r3
 80074fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074fe:	e029      	b.n	8007554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa63 	bl	80079ce <USBD_CtlError>
            err++;
 8007508:	7afb      	ldrb	r3, [r7, #11]
 800750a:	3301      	adds	r3, #1
 800750c:	72fb      	strb	r3, [r7, #11]
          break;
 800750e:	e021      	b.n	8007554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00b      	beq.n	8007534 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	7c12      	ldrb	r2, [r2, #16]
 8007528:	f107 0108 	add.w	r1, r7, #8
 800752c:	4610      	mov	r0, r2
 800752e:	4798      	blx	r3
 8007530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007532:	e00f      	b.n	8007554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fa49 	bl	80079ce <USBD_CtlError>
            err++;
 800753c:	7afb      	ldrb	r3, [r7, #11]
 800753e:	3301      	adds	r3, #1
 8007540:	72fb      	strb	r3, [r7, #11]
          break;
 8007542:	e007      	b.n	8007554 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fa41 	bl	80079ce <USBD_CtlError>
          err++;
 800754c:	7afb      	ldrb	r3, [r7, #11]
 800754e:	3301      	adds	r3, #1
 8007550:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007552:	bf00      	nop
      }
      break;
 8007554:	e037      	b.n	80075c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	7c1b      	ldrb	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d109      	bne.n	8007572 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007566:	f107 0208 	add.w	r2, r7, #8
 800756a:	4610      	mov	r0, r2
 800756c:	4798      	blx	r3
 800756e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007570:	e029      	b.n	80075c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fa2a 	bl	80079ce <USBD_CtlError>
        err++;
 800757a:	7afb      	ldrb	r3, [r7, #11]
 800757c:	3301      	adds	r3, #1
 800757e:	72fb      	strb	r3, [r7, #11]
      break;
 8007580:	e021      	b.n	80075c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	7c1b      	ldrb	r3, [r3, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10d      	bne.n	80075a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	f107 0208 	add.w	r2, r7, #8
 8007596:	4610      	mov	r0, r2
 8007598:	4798      	blx	r3
 800759a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3301      	adds	r3, #1
 80075a0:	2207      	movs	r2, #7
 80075a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075a4:	e00f      	b.n	80075c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fa10 	bl	80079ce <USBD_CtlError>
        err++;
 80075ae:	7afb      	ldrb	r3, [r7, #11]
 80075b0:	3301      	adds	r3, #1
 80075b2:	72fb      	strb	r3, [r7, #11]
      break;
 80075b4:	e007      	b.n	80075c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fa08 	bl	80079ce <USBD_CtlError>
      err++;
 80075be:	7afb      	ldrb	r3, [r7, #11]
 80075c0:	3301      	adds	r3, #1
 80075c2:	72fb      	strb	r3, [r7, #11]
      break;
 80075c4:	bf00      	nop
  }

  if (err != 0U)
 80075c6:	7afb      	ldrb	r3, [r7, #11]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d11e      	bne.n	800760a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	88db      	ldrh	r3, [r3, #6]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d016      	beq.n	8007602 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80075d4:	893b      	ldrh	r3, [r7, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00e      	beq.n	80075f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	88da      	ldrh	r2, [r3, #6]
 80075de:	893b      	ldrh	r3, [r7, #8]
 80075e0:	4293      	cmp	r3, r2
 80075e2:	bf28      	it	cs
 80075e4:	4613      	movcs	r3, r2
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075ea:	893b      	ldrh	r3, [r7, #8]
 80075ec:	461a      	mov	r2, r3
 80075ee:	68f9      	ldr	r1, [r7, #12]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fa5d 	bl	8007ab0 <USBD_CtlSendData>
 80075f6:	e009      	b.n	800760c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f9e7 	bl	80079ce <USBD_CtlError>
 8007600:	e004      	b.n	800760c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 faae 	bl	8007b64 <USBD_CtlSendStatus>
 8007608:	e000      	b.n	800760c <USBD_GetDescriptor+0x2cc>
    return;
 800760a:	bf00      	nop
  }
}
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop

08007614 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	889b      	ldrh	r3, [r3, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d131      	bne.n	800768a <USBD_SetAddress+0x76>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	88db      	ldrh	r3, [r3, #6]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d12d      	bne.n	800768a <USBD_SetAddress+0x76>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	885b      	ldrh	r3, [r3, #2]
 8007632:	2b7f      	cmp	r3, #127	; 0x7f
 8007634:	d829      	bhi.n	800768a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	885b      	ldrh	r3, [r3, #2]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007640:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b03      	cmp	r3, #3
 800764c:	d104      	bne.n	8007658 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f9bc 	bl	80079ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007656:	e01d      	b.n	8007694 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	7bfa      	ldrb	r2, [r7, #15]
 800765c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fe67 	bl	8008338 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fa7a 	bl	8007b64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d004      	beq.n	8007680 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2202      	movs	r2, #2
 800767a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767e:	e009      	b.n	8007694 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007688:	e004      	b.n	8007694 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f99e 	bl	80079ce <USBD_CtlError>
  }
}
 8007692:	bf00      	nop
 8007694:	bf00      	nop
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	885b      	ldrh	r3, [r3, #2]
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	4b4e      	ldr	r3, [pc, #312]	; (80077ec <USBD_SetConfig+0x150>)
 80076b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80076b4:	4b4d      	ldr	r3, [pc, #308]	; (80077ec <USBD_SetConfig+0x150>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d905      	bls.n	80076c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f985 	bl	80079ce <USBD_CtlError>
    return USBD_FAIL;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e08c      	b.n	80077e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d002      	beq.n	80076da <USBD_SetConfig+0x3e>
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d029      	beq.n	800772c <USBD_SetConfig+0x90>
 80076d8:	e075      	b.n	80077c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80076da:	4b44      	ldr	r3, [pc, #272]	; (80077ec <USBD_SetConfig+0x150>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d020      	beq.n	8007724 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80076e2:	4b42      	ldr	r3, [pc, #264]	; (80077ec <USBD_SetConfig+0x150>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80076ec:	4b3f      	ldr	r3, [pc, #252]	; (80077ec <USBD_SetConfig+0x150>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7fe ffe1 	bl	80066ba <USBD_SetClassConfig>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d008      	beq.n	8007714 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f962 	bl	80079ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2202      	movs	r2, #2
 800770e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007712:	e065      	b.n	80077e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fa25 	bl	8007b64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2203      	movs	r2, #3
 800771e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007722:	e05d      	b.n	80077e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fa1d 	bl	8007b64 <USBD_CtlSendStatus>
      break;
 800772a:	e059      	b.n	80077e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800772c:	4b2f      	ldr	r3, [pc, #188]	; (80077ec <USBD_SetConfig+0x150>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d112      	bne.n	800775a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800773c:	4b2b      	ldr	r3, [pc, #172]	; (80077ec <USBD_SetConfig+0x150>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	461a      	mov	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007746:	4b29      	ldr	r3, [pc, #164]	; (80077ec <USBD_SetConfig+0x150>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7fe ffd0 	bl	80066f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa06 	bl	8007b64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007758:	e042      	b.n	80077e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800775a:	4b24      	ldr	r3, [pc, #144]	; (80077ec <USBD_SetConfig+0x150>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	461a      	mov	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	429a      	cmp	r2, r3
 8007766:	d02a      	beq.n	80077be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7fe ffbe 	bl	80066f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007776:	4b1d      	ldr	r3, [pc, #116]	; (80077ec <USBD_SetConfig+0x150>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007780:	4b1a      	ldr	r3, [pc, #104]	; (80077ec <USBD_SetConfig+0x150>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fe ff97 	bl	80066ba <USBD_SetClassConfig>
 800778c:	4603      	mov	r3, r0
 800778e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007790:	7bfb      	ldrb	r3, [r7, #15]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00f      	beq.n	80077b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f918 	bl	80079ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7fe ffa3 	bl	80066f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80077b4:	e014      	b.n	80077e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f9d4 	bl	8007b64 <USBD_CtlSendStatus>
      break;
 80077bc:	e010      	b.n	80077e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f9d0 	bl	8007b64 <USBD_CtlSendStatus>
      break;
 80077c4:	e00c      	b.n	80077e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f900 	bl	80079ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077ce:	4b07      	ldr	r3, [pc, #28]	; (80077ec <USBD_SetConfig+0x150>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7fe ff8c 	bl	80066f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80077da:	2303      	movs	r3, #3
 80077dc:	73fb      	strb	r3, [r7, #15]
      break;
 80077de:	bf00      	nop
  }

  return ret;
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20000214 	.word	0x20000214

080077f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	88db      	ldrh	r3, [r3, #6]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d004      	beq.n	800780c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f8e2 	bl	80079ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800780a:	e023      	b.n	8007854 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	dc02      	bgt.n	800781e <USBD_GetConfig+0x2e>
 8007818:	2b00      	cmp	r3, #0
 800781a:	dc03      	bgt.n	8007824 <USBD_GetConfig+0x34>
 800781c:	e015      	b.n	800784a <USBD_GetConfig+0x5a>
 800781e:	2b03      	cmp	r3, #3
 8007820:	d00b      	beq.n	800783a <USBD_GetConfig+0x4a>
 8007822:	e012      	b.n	800784a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	3308      	adds	r3, #8
 800782e:	2201      	movs	r2, #1
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f93c 	bl	8007ab0 <USBD_CtlSendData>
        break;
 8007838:	e00c      	b.n	8007854 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3304      	adds	r3, #4
 800783e:	2201      	movs	r2, #1
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f934 	bl	8007ab0 <USBD_CtlSendData>
        break;
 8007848:	e004      	b.n	8007854 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f8be 	bl	80079ce <USBD_CtlError>
        break;
 8007852:	bf00      	nop
}
 8007854:	bf00      	nop
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800786c:	b2db      	uxtb	r3, r3
 800786e:	3b01      	subs	r3, #1
 8007870:	2b02      	cmp	r3, #2
 8007872:	d81e      	bhi.n	80078b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	88db      	ldrh	r3, [r3, #6]
 8007878:	2b02      	cmp	r3, #2
 800787a:	d004      	beq.n	8007886 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f8a5 	bl	80079ce <USBD_CtlError>
        break;
 8007884:	e01a      	b.n	80078bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f043 0202 	orr.w	r2, r3, #2
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	330c      	adds	r3, #12
 80078a6:	2202      	movs	r2, #2
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f900 	bl	8007ab0 <USBD_CtlSendData>
      break;
 80078b0:	e004      	b.n	80078bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f88a 	bl	80079ce <USBD_CtlError>
      break;
 80078ba:	bf00      	nop
  }
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	885b      	ldrh	r3, [r3, #2]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d107      	bne.n	80078e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f940 	bl	8007b64 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80078e4:	e013      	b.n	800790e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	885b      	ldrh	r3, [r3, #2]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d10b      	bne.n	8007906 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	889b      	ldrh	r3, [r3, #4]
 80078f2:	0a1b      	lsrs	r3, r3, #8
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f930 	bl	8007b64 <USBD_CtlSendStatus>
}
 8007904:	e003      	b.n	800790e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f860 	bl	80079ce <USBD_CtlError>
}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b082      	sub	sp, #8
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007926:	b2db      	uxtb	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	2b02      	cmp	r3, #2
 800792c:	d80b      	bhi.n	8007946 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	885b      	ldrh	r3, [r3, #2]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d10c      	bne.n	8007950 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f910 	bl	8007b64 <USBD_CtlSendStatus>
      }
      break;
 8007944:	e004      	b.n	8007950 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f840 	bl	80079ce <USBD_CtlError>
      break;
 800794e:	e000      	b.n	8007952 <USBD_ClrFeature+0x3c>
      break;
 8007950:	bf00      	nop
  }
}
 8007952:	bf00      	nop
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	781a      	ldrb	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3301      	adds	r3, #1
 8007974:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	781a      	ldrb	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3301      	adds	r3, #1
 8007982:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f7ff fa41 	bl	8006e0c <SWAPBYTE>
 800798a:	4603      	mov	r3, r0
 800798c:	461a      	mov	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3301      	adds	r3, #1
 8007996:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3301      	adds	r3, #1
 800799c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f7ff fa34 	bl	8006e0c <SWAPBYTE>
 80079a4:	4603      	mov	r3, r0
 80079a6:	461a      	mov	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3301      	adds	r3, #1
 80079b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3301      	adds	r3, #1
 80079b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f7ff fa27 	bl	8006e0c <SWAPBYTE>
 80079be:	4603      	mov	r3, r0
 80079c0:	461a      	mov	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	80da      	strh	r2, [r3, #6]
}
 80079c6:	bf00      	nop
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80079d8:	2180      	movs	r1, #128	; 0x80
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fc42 	bl	8008264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80079e0:	2100      	movs	r1, #0
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fc3e 	bl	8008264 <USBD_LL_StallEP>
}
 80079e8:	bf00      	nop
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d036      	beq.n	8007a74 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007a0a:	6938      	ldr	r0, [r7, #16]
 8007a0c:	f000 f836 	bl	8007a7c <USBD_GetLen>
 8007a10:	4603      	mov	r3, r0
 8007a12:	3301      	adds	r3, #1
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	4413      	add	r3, r2
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	7812      	ldrb	r2, [r2, #0]
 8007a28:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a2a:	7dfb      	ldrb	r3, [r7, #23]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	4413      	add	r3, r2
 8007a36:	2203      	movs	r2, #3
 8007a38:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a40:	e013      	b.n	8007a6a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	4413      	add	r3, r2
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	7812      	ldrb	r2, [r2, #0]
 8007a4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	3301      	adds	r3, #1
 8007a52:	613b      	str	r3, [r7, #16]
    idx++;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	3301      	adds	r3, #1
 8007a58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	4413      	add	r3, r2
 8007a60:	2200      	movs	r2, #0
 8007a62:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
 8007a66:	3301      	adds	r3, #1
 8007a68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e7      	bne.n	8007a42 <USBD_GetString+0x52>
 8007a72:	e000      	b.n	8007a76 <USBD_GetString+0x86>
    return;
 8007a74:	bf00      	nop
  }
}
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a8c:	e005      	b.n	8007a9a <USBD_GetLen+0x1e>
  {
    len++;
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	3301      	adds	r3, #1
 8007a92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	3301      	adds	r3, #1
 8007a98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1f5      	bne.n	8007a8e <USBD_GetLen+0x12>
  }

  return len;
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 fc4d 	bl	8008376 <USBD_LL_Transmit>

  return USBD_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	2100      	movs	r1, #0
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 fc3c 	bl	8008376 <USBD_LL_Transmit>

  return USBD_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2203      	movs	r2, #3
 8007b18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	2100      	movs	r1, #0
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 fc40 	bl	80083b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	2100      	movs	r1, #0
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 fc2f 	bl	80083b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2204      	movs	r2, #4
 8007b70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b74:	2300      	movs	r3, #0
 8007b76:	2200      	movs	r2, #0
 8007b78:	2100      	movs	r1, #0
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fbfb 	bl	8008376 <USBD_LL_Transmit>

  return USBD_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2205      	movs	r2, #5
 8007b96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fc09 	bl	80083b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	4912      	ldr	r1, [pc, #72]	; (8007c00 <MX_USB_DEVICE_Init+0x50>)
 8007bb8:	4812      	ldr	r0, [pc, #72]	; (8007c04 <MX_USB_DEVICE_Init+0x54>)
 8007bba:	f7fe fd01 	bl	80065c0 <USBD_Init>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007bc4:	f7f8 fff0 	bl	8000ba8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007bc8:	490f      	ldr	r1, [pc, #60]	; (8007c08 <MX_USB_DEVICE_Init+0x58>)
 8007bca:	480e      	ldr	r0, [pc, #56]	; (8007c04 <MX_USB_DEVICE_Init+0x54>)
 8007bcc:	f7fe fd28 	bl	8006620 <USBD_RegisterClass>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007bd6:	f7f8 ffe7 	bl	8000ba8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007bda:	490c      	ldr	r1, [pc, #48]	; (8007c0c <MX_USB_DEVICE_Init+0x5c>)
 8007bdc:	4809      	ldr	r0, [pc, #36]	; (8007c04 <MX_USB_DEVICE_Init+0x54>)
 8007bde:	f7fe fcd5 	bl	800658c <USBD_CUSTOM_HID_RegisterInterface>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007be8:	f7f8 ffde 	bl	8000ba8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007bec:	4805      	ldr	r0, [pc, #20]	; (8007c04 <MX_USB_DEVICE_Init+0x54>)
 8007bee:	f7fe fd4d 	bl	800668c <USBD_Start>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007bf8:	f7f8 ffd6 	bl	8000ba8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007bfc:	bf00      	nop
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	200000c4 	.word	0x200000c4
 8007c04:	20000218 	.word	0x20000218
 8007c08:	2000000c 	.word	0x2000000c
 8007c0c:	200000b4 	.word	0x200000b4

08007c10 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007c10:	b480      	push	{r7}
 8007c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007c20:	b480      	push	{r7}
 8007c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007c24:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	460a      	mov	r2, r1
 8007c3a:	71fb      	strb	r3, [r7, #7]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8007c40:	4806      	ldr	r0, [pc, #24]	; (8007c5c <CUSTOM_HID_OutEvent_FS+0x2c>)
 8007c42:	f7fe fc41 	bl	80064c8 <USBD_CUSTOM_HID_ReceivePacket>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8007c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c50:	e000      	b.n	8007c54 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8007c52:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	20000218 	.word	0x20000218

08007c60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	4603      	mov	r3, r0
 8007c68:	6039      	str	r1, [r7, #0]
 8007c6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2212      	movs	r2, #18
 8007c70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c72:	4b03      	ldr	r3, [pc, #12]	; (8007c80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	200000e0 	.word	0x200000e0

08007c84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	6039      	str	r1, [r7, #0]
 8007c8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2204      	movs	r2, #4
 8007c94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c96:	4b03      	ldr	r3, [pc, #12]	; (8007ca4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	200000f4 	.word	0x200000f4

08007ca8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	6039      	str	r1, [r7, #0]
 8007cb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cb4:	79fb      	ldrb	r3, [r7, #7]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d105      	bne.n	8007cc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	4907      	ldr	r1, [pc, #28]	; (8007cdc <USBD_FS_ProductStrDescriptor+0x34>)
 8007cbe:	4808      	ldr	r0, [pc, #32]	; (8007ce0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007cc0:	f7ff fe96 	bl	80079f0 <USBD_GetString>
 8007cc4:	e004      	b.n	8007cd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	4904      	ldr	r1, [pc, #16]	; (8007cdc <USBD_FS_ProductStrDescriptor+0x34>)
 8007cca:	4805      	ldr	r0, [pc, #20]	; (8007ce0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ccc:	f7ff fe90 	bl	80079f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cd0:	4b02      	ldr	r3, [pc, #8]	; (8007cdc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	200004f4 	.word	0x200004f4
 8007ce0:	080084f4 	.word	0x080084f4

08007ce4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	6039      	str	r1, [r7, #0]
 8007cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	4904      	ldr	r1, [pc, #16]	; (8007d04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007cf4:	4804      	ldr	r0, [pc, #16]	; (8007d08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007cf6:	f7ff fe7b 	bl	80079f0 <USBD_GetString>
  return USBD_StrDesc;
 8007cfa:	4b02      	ldr	r3, [pc, #8]	; (8007d04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	200004f4 	.word	0x200004f4
 8007d08:	08008514 	.word	0x08008514

08007d0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	4603      	mov	r3, r0
 8007d14:	6039      	str	r1, [r7, #0]
 8007d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	221a      	movs	r2, #26
 8007d1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d1e:	f000 f843 	bl	8007da8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d22:	4b02      	ldr	r3, [pc, #8]	; (8007d2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	200000f8 	.word	0x200000f8

08007d30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	6039      	str	r1, [r7, #0]
 8007d3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d105      	bne.n	8007d4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	4907      	ldr	r1, [pc, #28]	; (8007d64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d46:	4808      	ldr	r0, [pc, #32]	; (8007d68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d48:	f7ff fe52 	bl	80079f0 <USBD_GetString>
 8007d4c:	e004      	b.n	8007d58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	4904      	ldr	r1, [pc, #16]	; (8007d64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d52:	4805      	ldr	r0, [pc, #20]	; (8007d68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d54:	f7ff fe4c 	bl	80079f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d58:	4b02      	ldr	r3, [pc, #8]	; (8007d64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	200004f4 	.word	0x200004f4
 8007d68:	08008528 	.word	0x08008528

08007d6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	4603      	mov	r3, r0
 8007d74:	6039      	str	r1, [r7, #0]
 8007d76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d78:	79fb      	ldrb	r3, [r7, #7]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d105      	bne.n	8007d8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	4907      	ldr	r1, [pc, #28]	; (8007da0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d82:	4808      	ldr	r0, [pc, #32]	; (8007da4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d84:	f7ff fe34 	bl	80079f0 <USBD_GetString>
 8007d88:	e004      	b.n	8007d94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	4904      	ldr	r1, [pc, #16]	; (8007da0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d8e:	4805      	ldr	r0, [pc, #20]	; (8007da4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d90:	f7ff fe2e 	bl	80079f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d94:	4b02      	ldr	r3, [pc, #8]	; (8007da0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	200004f4 	.word	0x200004f4
 8007da4:	0800853c 	.word	0x0800853c

08007da8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007dae:	4b0f      	ldr	r3, [pc, #60]	; (8007dec <Get_SerialNum+0x44>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007db4:	4b0e      	ldr	r3, [pc, #56]	; (8007df0 <Get_SerialNum+0x48>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007dba:	4b0e      	ldr	r3, [pc, #56]	; (8007df4 <Get_SerialNum+0x4c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d009      	beq.n	8007de2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007dce:	2208      	movs	r2, #8
 8007dd0:	4909      	ldr	r1, [pc, #36]	; (8007df8 <Get_SerialNum+0x50>)
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 f814 	bl	8007e00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007dd8:	2204      	movs	r2, #4
 8007dda:	4908      	ldr	r1, [pc, #32]	; (8007dfc <Get_SerialNum+0x54>)
 8007ddc:	68b8      	ldr	r0, [r7, #8]
 8007dde:	f000 f80f 	bl	8007e00 <IntToUnicode>
  }
}
 8007de2:	bf00      	nop
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	1fff7a10 	.word	0x1fff7a10
 8007df0:	1fff7a14 	.word	0x1fff7a14
 8007df4:	1fff7a18 	.word	0x1fff7a18
 8007df8:	200000fa 	.word	0x200000fa
 8007dfc:	2000010a 	.word	0x2000010a

08007e00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e12:	2300      	movs	r3, #0
 8007e14:	75fb      	strb	r3, [r7, #23]
 8007e16:	e027      	b.n	8007e68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	0f1b      	lsrs	r3, r3, #28
 8007e1c:	2b09      	cmp	r3, #9
 8007e1e:	d80b      	bhi.n	8007e38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	0f1b      	lsrs	r3, r3, #28
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	440b      	add	r3, r1
 8007e30:	3230      	adds	r2, #48	; 0x30
 8007e32:	b2d2      	uxtb	r2, r2
 8007e34:	701a      	strb	r2, [r3, #0]
 8007e36:	e00a      	b.n	8007e4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	0f1b      	lsrs	r3, r3, #28
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	005b      	lsls	r3, r3, #1
 8007e42:	4619      	mov	r1, r3
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	440b      	add	r3, r1
 8007e48:	3237      	adds	r2, #55	; 0x37
 8007e4a:	b2d2      	uxtb	r2, r2
 8007e4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	011b      	lsls	r3, r3, #4
 8007e52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	3301      	adds	r3, #1
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	2200      	movs	r2, #0
 8007e60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
 8007e64:	3301      	adds	r3, #1
 8007e66:	75fb      	strb	r3, [r7, #23]
 8007e68:	7dfa      	ldrb	r2, [r7, #23]
 8007e6a:	79fb      	ldrb	r3, [r7, #7]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d3d3      	bcc.n	8007e18 <IntToUnicode+0x18>
  }
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
	...

08007e80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08a      	sub	sp, #40	; 0x28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e88:	f107 0314 	add.w	r3, r7, #20
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	605a      	str	r2, [r3, #4]
 8007e92:	609a      	str	r2, [r3, #8]
 8007e94:	60da      	str	r2, [r3, #12]
 8007e96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ea0:	d13a      	bne.n	8007f18 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	613b      	str	r3, [r7, #16]
 8007ea6:	4b1e      	ldr	r3, [pc, #120]	; (8007f20 <HAL_PCD_MspInit+0xa0>)
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eaa:	4a1d      	ldr	r2, [pc, #116]	; (8007f20 <HAL_PCD_MspInit+0xa0>)
 8007eac:	f043 0301 	orr.w	r3, r3, #1
 8007eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8007eb2:	4b1b      	ldr	r3, [pc, #108]	; (8007f20 <HAL_PCD_MspInit+0xa0>)
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	613b      	str	r3, [r7, #16]
 8007ebc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ebe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ed0:	230a      	movs	r3, #10
 8007ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ed4:	f107 0314 	add.w	r3, r7, #20
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4812      	ldr	r0, [pc, #72]	; (8007f24 <HAL_PCD_MspInit+0xa4>)
 8007edc:	f7f9 fd7a 	bl	80019d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ee0:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <HAL_PCD_MspInit+0xa0>)
 8007ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee4:	4a0e      	ldr	r2, [pc, #56]	; (8007f20 <HAL_PCD_MspInit+0xa0>)
 8007ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eea:	6353      	str	r3, [r2, #52]	; 0x34
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <HAL_PCD_MspInit+0xa0>)
 8007ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef4:	4a0a      	ldr	r2, [pc, #40]	; (8007f20 <HAL_PCD_MspInit+0xa0>)
 8007ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007efa:	6453      	str	r3, [r2, #68]	; 0x44
 8007efc:	4b08      	ldr	r3, [pc, #32]	; (8007f20 <HAL_PCD_MspInit+0xa0>)
 8007efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f04:	60fb      	str	r3, [r7, #12]
 8007f06:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	2043      	movs	r0, #67	; 0x43
 8007f0e:	f7f9 fd2a 	bl	8001966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f12:	2043      	movs	r0, #67	; 0x43
 8007f14:	f7f9 fd43 	bl	800199e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f18:	bf00      	nop
 8007f1a:	3728      	adds	r7, #40	; 0x28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	40023800 	.word	0x40023800
 8007f24:	40020000 	.word	0x40020000

08007f28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4610      	mov	r0, r2
 8007f40:	f7fe fbf1 	bl	8006726 <USBD_LL_SetupStage>
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007f5e:	78fa      	ldrb	r2, [r7, #3]
 8007f60:	6879      	ldr	r1, [r7, #4]
 8007f62:	4613      	mov	r3, r2
 8007f64:	00db      	lsls	r3, r3, #3
 8007f66:	4413      	add	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	440b      	add	r3, r1
 8007f6c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	78fb      	ldrb	r3, [r7, #3]
 8007f74:	4619      	mov	r1, r3
 8007f76:	f7fe fc2b 	bl	80067d0 <USBD_LL_DataOutStage>
}
 8007f7a:	bf00      	nop
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007f94:	78fa      	ldrb	r2, [r7, #3]
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	4413      	add	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	440b      	add	r3, r1
 8007fa2:	3320      	adds	r3, #32
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	78fb      	ldrb	r3, [r7, #3]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	f7fe fcc4 	bl	8006936 <USBD_LL_DataInStage>
}
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b082      	sub	sp, #8
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fe fdfe 	bl	8006bc6 <USBD_LL_SOF>
}
 8007fca:	bf00      	nop
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	79db      	ldrb	r3, [r3, #7]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d102      	bne.n	8007fec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]
 8007fea:	e008      	b.n	8007ffe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	79db      	ldrb	r3, [r3, #7]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d102      	bne.n	8007ffa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	73fb      	strb	r3, [r7, #15]
 8007ff8:	e001      	b.n	8007ffe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007ffa:	f7f8 fdd5 	bl	8000ba8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008004:	7bfa      	ldrb	r2, [r7, #15]
 8008006:	4611      	mov	r1, r2
 8008008:	4618      	mov	r0, r3
 800800a:	f7fe fd98 	bl	8006b3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008014:	4618      	mov	r0, r3
 8008016:	f7fe fd40 	bl	8006a9a <USBD_LL_Reset>
}
 800801a:	bf00      	nop
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe fd93 	bl	8006b5e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	6812      	ldr	r2, [r2, #0]
 8008046:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800804a:	f043 0301 	orr.w	r3, r3, #1
 800804e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7adb      	ldrb	r3, [r3, #11]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d005      	beq.n	8008064 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008058:	4b04      	ldr	r3, [pc, #16]	; (800806c <HAL_PCD_SuspendCallback+0x48>)
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	4a03      	ldr	r2, [pc, #12]	; (800806c <HAL_PCD_SuspendCallback+0x48>)
 800805e:	f043 0306 	orr.w	r3, r3, #6
 8008062:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008064:	bf00      	nop
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	e000ed00 	.word	0xe000ed00

08008070 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800807e:	4618      	mov	r0, r3
 8008080:	f7fe fd89 	bl	8006b96 <USBD_LL_Resume>
}
 8008084:	bf00      	nop
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800809e:	78fa      	ldrb	r2, [r7, #3]
 80080a0:	4611      	mov	r1, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe fde1 	bl	8006c6a <USBD_LL_IsoOUTIncomplete>
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	460b      	mov	r3, r1
 80080ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80080c2:	78fa      	ldrb	r2, [r7, #3]
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe fd9d 	bl	8006c06 <USBD_LL_IsoINIncomplete>
}
 80080cc:	bf00      	nop
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fe fdf3 	bl	8006cce <USBD_LL_DevConnected>
}
 80080e8:	bf00      	nop
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fdf0 	bl	8006ce4 <USBD_LL_DevDisconnected>
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d13c      	bne.n	8008196 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800811c:	4a20      	ldr	r2, [pc, #128]	; (80081a0 <USBD_LL_Init+0x94>)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a1e      	ldr	r2, [pc, #120]	; (80081a0 <USBD_LL_Init+0x94>)
 8008128:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800812c:	4b1c      	ldr	r3, [pc, #112]	; (80081a0 <USBD_LL_Init+0x94>)
 800812e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008132:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008134:	4b1a      	ldr	r3, [pc, #104]	; (80081a0 <USBD_LL_Init+0x94>)
 8008136:	2204      	movs	r2, #4
 8008138:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800813a:	4b19      	ldr	r3, [pc, #100]	; (80081a0 <USBD_LL_Init+0x94>)
 800813c:	2202      	movs	r2, #2
 800813e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008140:	4b17      	ldr	r3, [pc, #92]	; (80081a0 <USBD_LL_Init+0x94>)
 8008142:	2200      	movs	r2, #0
 8008144:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008146:	4b16      	ldr	r3, [pc, #88]	; (80081a0 <USBD_LL_Init+0x94>)
 8008148:	2202      	movs	r2, #2
 800814a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800814c:	4b14      	ldr	r3, [pc, #80]	; (80081a0 <USBD_LL_Init+0x94>)
 800814e:	2200      	movs	r2, #0
 8008150:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008152:	4b13      	ldr	r3, [pc, #76]	; (80081a0 <USBD_LL_Init+0x94>)
 8008154:	2200      	movs	r2, #0
 8008156:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008158:	4b11      	ldr	r3, [pc, #68]	; (80081a0 <USBD_LL_Init+0x94>)
 800815a:	2200      	movs	r2, #0
 800815c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800815e:	4b10      	ldr	r3, [pc, #64]	; (80081a0 <USBD_LL_Init+0x94>)
 8008160:	2200      	movs	r2, #0
 8008162:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008164:	4b0e      	ldr	r3, [pc, #56]	; (80081a0 <USBD_LL_Init+0x94>)
 8008166:	2200      	movs	r2, #0
 8008168:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800816a:	480d      	ldr	r0, [pc, #52]	; (80081a0 <USBD_LL_Init+0x94>)
 800816c:	f7f9 fde6 	bl	8001d3c <HAL_PCD_Init>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008176:	f7f8 fd17 	bl	8000ba8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800817a:	2180      	movs	r1, #128	; 0x80
 800817c:	4808      	ldr	r0, [pc, #32]	; (80081a0 <USBD_LL_Init+0x94>)
 800817e:	f7fa fff8 	bl	8003172 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008182:	2240      	movs	r2, #64	; 0x40
 8008184:	2100      	movs	r1, #0
 8008186:	4806      	ldr	r0, [pc, #24]	; (80081a0 <USBD_LL_Init+0x94>)
 8008188:	f7fa ffac 	bl	80030e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800818c:	2280      	movs	r2, #128	; 0x80
 800818e:	2101      	movs	r1, #1
 8008190:	4803      	ldr	r0, [pc, #12]	; (80081a0 <USBD_LL_Init+0x94>)
 8008192:	f7fa ffa7 	bl	80030e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	200006f4 	.word	0x200006f4

080081a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7f9 fecd 	bl	8001f5a <HAL_PCD_Start>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 f930 	bl	800842c <USBD_Get_USB_Status>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b084      	sub	sp, #16
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	4608      	mov	r0, r1
 80081e4:	4611      	mov	r1, r2
 80081e6:	461a      	mov	r2, r3
 80081e8:	4603      	mov	r3, r0
 80081ea:	70fb      	strb	r3, [r7, #3]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70bb      	strb	r3, [r7, #2]
 80081f0:	4613      	mov	r3, r2
 80081f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008202:	78bb      	ldrb	r3, [r7, #2]
 8008204:	883a      	ldrh	r2, [r7, #0]
 8008206:	78f9      	ldrb	r1, [r7, #3]
 8008208:	f7fa fba1 	bl	800294e <HAL_PCD_EP_Open>
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 f90a 	bl	800842c <USBD_Get_USB_Status>
 8008218:	4603      	mov	r3, r0
 800821a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800821c:	7bbb      	ldrb	r3, [r7, #14]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	460b      	mov	r3, r1
 8008230:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008240:	78fa      	ldrb	r2, [r7, #3]
 8008242:	4611      	mov	r1, r2
 8008244:	4618      	mov	r0, r3
 8008246:	f7fa fbea 	bl	8002a1e <HAL_PCD_EP_Close>
 800824a:	4603      	mov	r3, r0
 800824c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	4618      	mov	r0, r3
 8008252:	f000 f8eb 	bl	800842c <USBD_Get_USB_Status>
 8008256:	4603      	mov	r3, r0
 8008258:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800825a:	7bbb      	ldrb	r3, [r7, #14]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	460b      	mov	r3, r1
 800826e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800827e:	78fa      	ldrb	r2, [r7, #3]
 8008280:	4611      	mov	r1, r2
 8008282:	4618      	mov	r0, r3
 8008284:	f7fa fc8a 	bl	8002b9c <HAL_PCD_EP_SetStall>
 8008288:	4603      	mov	r3, r0
 800828a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800828c:	7bfb      	ldrb	r3, [r7, #15]
 800828e:	4618      	mov	r0, r3
 8008290:	f000 f8cc 	bl	800842c <USBD_Get_USB_Status>
 8008294:	4603      	mov	r3, r0
 8008296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008298:	7bbb      	ldrb	r3, [r7, #14]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082bc:	78fa      	ldrb	r2, [r7, #3]
 80082be:	4611      	mov	r1, r2
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7fa fcce 	bl	8002c62 <HAL_PCD_EP_ClrStall>
 80082c6:	4603      	mov	r3, r0
 80082c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 f8ad 	bl	800842c <USBD_Get_USB_Status>
 80082d2:	4603      	mov	r3, r0
 80082d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	da0b      	bge.n	8008314 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082fc:	78fb      	ldrb	r3, [r7, #3]
 80082fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008302:	68f9      	ldr	r1, [r7, #12]
 8008304:	4613      	mov	r3, r2
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	440b      	add	r3, r1
 800830e:	3316      	adds	r3, #22
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	e00b      	b.n	800832c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800831a:	68f9      	ldr	r1, [r7, #12]
 800831c:	4613      	mov	r3, r2
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	440b      	add	r3, r1
 8008326:	f203 2356 	addw	r3, r3, #598	; 0x256
 800832a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008352:	78fa      	ldrb	r2, [r7, #3]
 8008354:	4611      	mov	r1, r2
 8008356:	4618      	mov	r0, r3
 8008358:	f7fa fad5 	bl	8002906 <HAL_PCD_SetAddress>
 800835c:	4603      	mov	r3, r0
 800835e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	4618      	mov	r0, r3
 8008364:	f000 f862 	bl	800842c <USBD_Get_USB_Status>
 8008368:	4603      	mov	r3, r0
 800836a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800836c:	7bbb      	ldrb	r3, [r7, #14]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b086      	sub	sp, #24
 800837a:	af00      	add	r7, sp, #0
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	603b      	str	r3, [r7, #0]
 8008382:	460b      	mov	r3, r1
 8008384:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008394:	7af9      	ldrb	r1, [r7, #11]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	f7fa fbc5 	bl	8002b28 <HAL_PCD_EP_Transmit>
 800839e:	4603      	mov	r3, r0
 80083a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a2:	7dfb      	ldrb	r3, [r7, #23]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 f841 	bl	800842c <USBD_Get_USB_Status>
 80083aa:	4603      	mov	r3, r0
 80083ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	607a      	str	r2, [r7, #4]
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	460b      	mov	r3, r1
 80083c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80083d6:	7af9      	ldrb	r1, [r7, #11]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	f7fa fb69 	bl	8002ab2 <HAL_PCD_EP_Receive>
 80083e0:	4603      	mov	r3, r0
 80083e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 f820 	bl	800842c <USBD_Get_USB_Status>
 80083ec:	4603      	mov	r3, r0
 80083ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
	...

080083fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008404:	4b03      	ldr	r3, [pc, #12]	; (8008414 <USBD_static_malloc+0x18>)
}
 8008406:	4618      	mov	r0, r3
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	20000bd8 	.word	0x20000bd8

08008418 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]

}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	2b03      	cmp	r3, #3
 800843e:	d817      	bhi.n	8008470 <USBD_Get_USB_Status+0x44>
 8008440:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <USBD_Get_USB_Status+0x1c>)
 8008442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008446:	bf00      	nop
 8008448:	08008459 	.word	0x08008459
 800844c:	0800845f 	.word	0x0800845f
 8008450:	08008465 	.word	0x08008465
 8008454:	0800846b 	.word	0x0800846b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]
    break;
 800845c:	e00b      	b.n	8008476 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800845e:	2303      	movs	r3, #3
 8008460:	73fb      	strb	r3, [r7, #15]
    break;
 8008462:	e008      	b.n	8008476 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008464:	2301      	movs	r3, #1
 8008466:	73fb      	strb	r3, [r7, #15]
    break;
 8008468:	e005      	b.n	8008476 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800846a:	2303      	movs	r3, #3
 800846c:	73fb      	strb	r3, [r7, #15]
    break;
 800846e:	e002      	b.n	8008476 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008470:	2303      	movs	r3, #3
 8008472:	73fb      	strb	r3, [r7, #15]
    break;
 8008474:	bf00      	nop
  }
  return usb_status;
 8008476:	7bfb      	ldrb	r3, [r7, #15]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <memset>:
 8008484:	4402      	add	r2, r0
 8008486:	4603      	mov	r3, r0
 8008488:	4293      	cmp	r3, r2
 800848a:	d100      	bne.n	800848e <memset+0xa>
 800848c:	4770      	bx	lr
 800848e:	f803 1b01 	strb.w	r1, [r3], #1
 8008492:	e7f9      	b.n	8008488 <memset+0x4>

08008494 <__libc_init_array>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	4d0d      	ldr	r5, [pc, #52]	; (80084cc <__libc_init_array+0x38>)
 8008498:	4c0d      	ldr	r4, [pc, #52]	; (80084d0 <__libc_init_array+0x3c>)
 800849a:	1b64      	subs	r4, r4, r5
 800849c:	10a4      	asrs	r4, r4, #2
 800849e:	2600      	movs	r6, #0
 80084a0:	42a6      	cmp	r6, r4
 80084a2:	d109      	bne.n	80084b8 <__libc_init_array+0x24>
 80084a4:	4d0b      	ldr	r5, [pc, #44]	; (80084d4 <__libc_init_array+0x40>)
 80084a6:	4c0c      	ldr	r4, [pc, #48]	; (80084d8 <__libc_init_array+0x44>)
 80084a8:	f000 f818 	bl	80084dc <_init>
 80084ac:	1b64      	subs	r4, r4, r5
 80084ae:	10a4      	asrs	r4, r4, #2
 80084b0:	2600      	movs	r6, #0
 80084b2:	42a6      	cmp	r6, r4
 80084b4:	d105      	bne.n	80084c2 <__libc_init_array+0x2e>
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084bc:	4798      	blx	r3
 80084be:	3601      	adds	r6, #1
 80084c0:	e7ee      	b.n	80084a0 <__libc_init_array+0xc>
 80084c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c6:	4798      	blx	r3
 80084c8:	3601      	adds	r6, #1
 80084ca:	e7f2      	b.n	80084b2 <__libc_init_array+0x1e>
 80084cc:	0800856c 	.word	0x0800856c
 80084d0:	0800856c 	.word	0x0800856c
 80084d4:	0800856c 	.word	0x0800856c
 80084d8:	08008570 	.word	0x08008570

080084dc <_init>:
 80084dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084de:	bf00      	nop
 80084e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e2:	bc08      	pop	{r3}
 80084e4:	469e      	mov	lr, r3
 80084e6:	4770      	bx	lr

080084e8 <_fini>:
 80084e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ea:	bf00      	nop
 80084ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ee:	bc08      	pop	{r3}
 80084f0:	469e      	mov	lr, r3
 80084f2:	4770      	bx	lr
