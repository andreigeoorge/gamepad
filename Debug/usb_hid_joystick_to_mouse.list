
usb_hid_joystick_to_mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084e8  080084e8  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  080084e8  080084e8  000184e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084f0  080084f0  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084f0  080084f0  000184f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084f4  080084f4  000184f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  080084f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020134  2**0
                  CONTENTS
 10 .bss          00000ad8  20000134  20000134  00020134  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c0c  20000c0c  00020134  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013376  00000000  00000000  000201a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031c7  00000000  00000000  0003351d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001188  00000000  00000000  000366e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d5e  00000000  00000000  00037870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024b12  00000000  00000000  000385ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015759  00000000  00000000  0005d0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d914f  00000000  00000000  00072839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004930  00000000  00000000  0014b988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001502b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000134 	.word	0x20000134
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008460 	.word	0x08008460

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000138 	.word	0x20000138
 80001c4:	08008460 	.word	0x08008460

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b087      	sub	sp, #28
 80004c8:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	uint8_t ucMouseBuffer[MOUSE_BUFF_SIZE_UC];
	JoystickTypeDef Joystick_t;
	uint32_t uiAdc1Val = 0U;
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
	uint32_t uiAdc2Val = 0U;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60bb      	str	r3, [r7, #8]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d2:	f000 fc99 	bl	8000e08 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d6:	f000 f889 	bl	80005ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004da:	f000 fa2f 	bl	800093c <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 80004de:	f007 fb29 	bl	8007b34 <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 80004e2:	f000 f8ed 	bl	80006c0 <MX_ADC1_Init>
	MX_ADC2_Init();
 80004e6:	f000 f93f 	bl	8000768 <MX_ADC2_Init>
	MX_TIM4_Init();
 80004ea:	f000 f991 	bl	8000810 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80004ee:	2100      	movs	r1, #0
 80004f0:	4839      	ldr	r0, [pc, #228]	; (80005d8 <main+0x114>)
 80004f2:	f003 fb35 	bl	8003b60 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80004f6:	2104      	movs	r1, #4
 80004f8:	4837      	ldr	r0, [pc, #220]	; (80005d8 <main+0x114>)
 80004fa:	f003 fb31 	bl	8003b60 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80004fe:	2108      	movs	r1, #8
 8000500:	4835      	ldr	r0, [pc, #212]	; (80005d8 <main+0x114>)
 8000502:	f003 fb2d 	bl	8003b60 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000506:	210c      	movs	r1, #12
 8000508:	4833      	ldr	r0, [pc, #204]	; (80005d8 <main+0x114>)
 800050a:	f003 fb29 	bl	8003b60 <HAL_TIM_PWM_Start>

	ucMouseBuffer[0] = 0U; /*Right and Left clicks (0: None, 1: Left Click, 2: Right click)*/
 800050e:	2300      	movs	r3, #0
 8000510:	713b      	strb	r3, [r7, #4]
	ucMouseBuffer[1] = 0U; /*X movement (0: not moving, +ve: Right movement, -ve: Left movement)*/
 8000512:	2300      	movs	r3, #0
 8000514:	717b      	strb	r3, [r7, #5]
	ucMouseBuffer[2] = 0U; /*Y movement (0: not moving, +ve: Down movement, -ve: Up movement)*/
 8000516:	2300      	movs	r3, #0
 8000518:	71bb      	strb	r3, [r7, #6]
	ucMouseBuffer[3] = 0U; /*Scroll (0: No scroll, +ve: Up scroll, -ve: Down scroll)*/
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/*Get the ADC1 value*/
		HAL_ADC_Start(&hadc1);
 800051e:	482f      	ldr	r0, [pc, #188]	; (80005dc <main+0x118>)
 8000520:	f000 fd4c 	bl	8000fbc <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 5U) == HAL_OK) {
 8000524:	2105      	movs	r1, #5
 8000526:	482d      	ldr	r0, [pc, #180]	; (80005dc <main+0x118>)
 8000528:	f000 fe4d 	bl	80011c6 <HAL_ADC_PollForConversion>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d103      	bne.n	800053a <main+0x76>
			uiAdc1Val = HAL_ADC_GetValue(&hadc1);
 8000532:	482a      	ldr	r0, [pc, #168]	; (80005dc <main+0x118>)
 8000534:	f000 fed2 	bl	80012dc <HAL_ADC_GetValue>
 8000538:	60f8      	str	r0, [r7, #12]
		}
		HAL_ADC_Stop(&hadc1);
 800053a:	4828      	ldr	r0, [pc, #160]	; (80005dc <main+0x118>)
 800053c:	f000 fe10 	bl	8001160 <HAL_ADC_Stop>

		/*Get the ADC2 value*/
		HAL_ADC_Start(&hadc2);
 8000540:	4827      	ldr	r0, [pc, #156]	; (80005e0 <main+0x11c>)
 8000542:	f000 fd3b 	bl	8000fbc <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc2, 5U) == HAL_OK) {
 8000546:	2105      	movs	r1, #5
 8000548:	4825      	ldr	r0, [pc, #148]	; (80005e0 <main+0x11c>)
 800054a:	f000 fe3c 	bl	80011c6 <HAL_ADC_PollForConversion>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d103      	bne.n	800055c <main+0x98>
			uiAdc2Val = HAL_ADC_GetValue(&hadc2);
 8000554:	4822      	ldr	r0, [pc, #136]	; (80005e0 <main+0x11c>)
 8000556:	f000 fec1 	bl	80012dc <HAL_ADC_GetValue>
 800055a:	60b8      	str	r0, [r7, #8]
		}
		HAL_ADC_Stop(&hadc2);
 800055c:	4820      	ldr	r0, [pc, #128]	; (80005e0 <main+0x11c>)
 800055e:	f000 fdff 	bl	8001160 <HAL_ADC_Stop>

		JoystickToLeds(uiAdc1Val, uiAdc2Val, &Joystick_t.up, &Joystick_t.down,
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	b2d8      	uxtb	r0, r3
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	b2d9      	uxtb	r1, r3
 800056a:	463b      	mov	r3, r7
 800056c:	1c5c      	adds	r4, r3, #1
 800056e:	463a      	mov	r2, r7
 8000570:	463b      	mov	r3, r7
 8000572:	3303      	adds	r3, #3
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	463b      	mov	r3, r7
 8000578:	3302      	adds	r3, #2
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	4623      	mov	r3, r4
 800057e:	f000 fa27 	bl	80009d0 <JoystickToLeds>
				&Joystick_t.left, &Joystick_t.right);

		/*Modify PWM duty cycle according to ADCs values*/
		htim4.Instance->CCR1 = (uint32_t) Joystick_t.down;
 8000582:	787a      	ldrb	r2, [r7, #1]
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <main+0x114>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = (uint32_t) Joystick_t.right;
 800058a:	78fa      	ldrb	r2, [r7, #3]
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <main+0x114>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR3 = (uint32_t) Joystick_t.up;
 8000592:	783a      	ldrb	r2, [r7, #0]
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <main+0x114>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR4 = (uint32_t) Joystick_t.left;
 800059a:	78ba      	ldrb	r2, [r7, #2]
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <main+0x114>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	641a      	str	r2, [r3, #64]	; 0x40

		/*Read GPIO Button 0 state and update the Mouse signal*/
		ucMouseBuffer[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80005a2:	2101      	movs	r1, #1
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <main+0x120>)
 80005a6:	f001 fb73 	bl	8001c90 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	713b      	strb	r3, [r7, #4]

		/*Convert Joystick reads into Mouse signals*/
		JoystickToUsb(uiAdc1Val, uiAdc2Val, &ucMouseBuffer[1], &ucMouseBuffer[2]);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	b2d8      	uxtb	r0, r3
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	b2d9      	uxtb	r1, r3
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	1c9c      	adds	r4, r3, #2
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	1c5a      	adds	r2, r3, #1
 80005be:	4623      	mov	r3, r4
 80005c0:	f000 fa67 	bl	8000a92 <JoystickToUsb>

		/*Send the Mouse signals through USB*/
		USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, ucMouseBuffer, 4);
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2204      	movs	r2, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <main+0x124>)
 80005cc:	f005 fe32 	bl	8006234 <USBD_CUSTOM_HID_SendReport>
		HAL_Delay(100U);
 80005d0:	2064      	movs	r0, #100	; 0x64
 80005d2:	f000 fc8b 	bl	8000eec <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 80005d6:	e7a2      	b.n	800051e <main+0x5a>
 80005d8:	200001e0 	.word	0x200001e0
 80005dc:	20000150 	.word	0x20000150
 80005e0:	20000198 	.word	0x20000198
 80005e4:	40020000 	.word	0x40020000
 80005e8:	20000230 	.word	0x20000230

080005ec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f007 ff04 	bl	8008408 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd0>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000660:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fd5c 	bl	8003130 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x96>
		Error_Handler();
 800067e:	f000 fa55 	bl	8000b2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000692:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2105      	movs	r1, #5
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 ffbd 	bl	8003620 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc4>
		Error_Handler();
 80006ac:	f000 fa3e 	bl	8000b2c <Error_Handler>
	}
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	; 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <MX_ADC1_Init+0x9c>)
 80006d4:	4a22      	ldr	r2, [pc, #136]	; (8000760 <MX_ADC1_Init+0xa0>)
 80006d6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <MX_ADC1_Init+0x9c>)
 80006da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006de:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_ADC1_Init+0x9c>)
 80006e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006e6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_ADC1_Init+0x9c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_ADC1_Init+0x9c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_ADC1_Init+0x9c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_ADC1_Init+0x9c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_ADC1_Init+0x9c>)
 8000704:	4a17      	ldr	r2, [pc, #92]	; (8000764 <MX_ADC1_Init+0xa4>)
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_ADC1_Init+0x9c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_ADC1_Init+0x9c>)
 8000710:	2201      	movs	r2, #1
 8000712:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_ADC1_Init+0x9c>)
 8000716:	2200      	movs	r2, #0
 8000718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_ADC1_Init+0x9c>)
 800071e:	2201      	movs	r2, #1
 8000720:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000722:	480e      	ldr	r0, [pc, #56]	; (800075c <MX_ADC1_Init+0x9c>)
 8000724:	f000 fc06 	bl	8000f34 <HAL_ADC_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0x72>
		Error_Handler();
 800072e:	f000 f9fd 	bl	8000b2c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000732:	2301      	movs	r3, #1
 8000734:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000736:	2301      	movs	r3, #1
 8000738:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800073e:	463b      	mov	r3, r7
 8000740:	4619      	mov	r1, r3
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <MX_ADC1_Init+0x9c>)
 8000744:	f000 fdd8 	bl	80012f8 <HAL_ADC_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC1_Init+0x92>
		Error_Handler();
 800074e:	f000 f9ed 	bl	8000b2c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000150 	.word	0x20000150
 8000760:	40012000 	.word	0x40012000
 8000764:	0f000001 	.word	0x0f000001

08000768 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_ADC2_Init+0x9c>)
 800077c:	4a22      	ldr	r2, [pc, #136]	; (8000808 <MX_ADC2_Init+0xa0>)
 800077e:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000780:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_ADC2_Init+0x9c>)
 8000782:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000786:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_ADC2_Init+0x9c>)
 800078a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800078e:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_ADC2_Init+0x9c>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_ADC2_Init+0x9c>)
 8000798:	2200      	movs	r2, #0
 800079a:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_ADC2_Init+0x9c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_ADC2_Init+0x9c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_ADC2_Init+0x9c>)
 80007ac:	4a17      	ldr	r2, [pc, #92]	; (800080c <MX_ADC2_Init+0xa4>)
 80007ae:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_ADC2_Init+0x9c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_ADC2_Init+0x9c>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_ADC2_Init+0x9c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_ADC2_Init+0x9c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80007ca:	480e      	ldr	r0, [pc, #56]	; (8000804 <MX_ADC2_Init+0x9c>)
 80007cc:	f000 fbb2 	bl	8000f34 <HAL_ADC_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC2_Init+0x72>
		Error_Handler();
 80007d6:	f000 f9a9 	bl	8000b2c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80007da:	2302      	movs	r3, #2
 80007dc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80007de:	2301      	movs	r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_ADC2_Init+0x9c>)
 80007ec:	f000 fd84 	bl	80012f8 <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC2_Init+0x92>
		Error_Handler();
 80007f6:	f000 f999 	bl	8000b2c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000198 	.word	0x20000198
 8000808:	40012100 	.word	0x40012100
 800080c:	0f000001 	.word	0x0f000001

08000810 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b08e      	sub	sp, #56	; 0x38
 8000814:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000840:	4b3c      	ldr	r3, [pc, #240]	; (8000934 <MX_TIM4_Init+0x124>)
 8000842:	4a3d      	ldr	r2, [pc, #244]	; (8000938 <MX_TIM4_Init+0x128>)
 8000844:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16;
 8000846:	4b3b      	ldr	r3, [pc, #236]	; (8000934 <MX_TIM4_Init+0x124>)
 8000848:	2210      	movs	r2, #16
 800084a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b39      	ldr	r3, [pc, #228]	; (8000934 <MX_TIM4_Init+0x124>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100;
 8000852:	4b38      	ldr	r3, [pc, #224]	; (8000934 <MX_TIM4_Init+0x124>)
 8000854:	2264      	movs	r2, #100	; 0x64
 8000856:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b36      	ldr	r3, [pc, #216]	; (8000934 <MX_TIM4_Init+0x124>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	4b35      	ldr	r3, [pc, #212]	; (8000934 <MX_TIM4_Init+0x124>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000864:	4833      	ldr	r0, [pc, #204]	; (8000934 <MX_TIM4_Init+0x124>)
 8000866:	f003 f8d3 	bl	8003a10 <HAL_TIM_Base_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM4_Init+0x64>
		Error_Handler();
 8000870:	f000 f95c 	bl	8000b2c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800087a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087e:	4619      	mov	r1, r3
 8000880:	482c      	ldr	r0, [pc, #176]	; (8000934 <MX_TIM4_Init+0x124>)
 8000882:	f003 faf7 	bl	8003e74 <HAL_TIM_ConfigClockSource>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM4_Init+0x80>
		Error_Handler();
 800088c:	f000 f94e 	bl	8000b2c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000890:	4828      	ldr	r0, [pc, #160]	; (8000934 <MX_TIM4_Init+0x124>)
 8000892:	f003 f90c 	bl	8003aae <HAL_TIM_PWM_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM4_Init+0x90>
		Error_Handler();
 800089c:	f000 f946 	bl	8000b2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4619      	mov	r1, r3
 80008ae:	4821      	ldr	r0, [pc, #132]	; (8000934 <MX_TIM4_Init+0x124>)
 80008b0:	f003 fec4 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM4_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 80008ba:	f000 f937 	bl	8000b2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008be:	2360      	movs	r3, #96	; 0x60
 80008c0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 100;
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4817      	ldr	r0, [pc, #92]	; (8000934 <MX_TIM4_Init+0x124>)
 80008d6:	f003 fa0b 	bl	8003cf0 <HAL_TIM_PWM_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM4_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 80008e0:	f000 f924 	bl	8000b2c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2204      	movs	r2, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	4812      	ldr	r0, [pc, #72]	; (8000934 <MX_TIM4_Init+0x124>)
 80008ec:	f003 fa00 	bl	8003cf0 <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM4_Init+0xea>
			!= HAL_OK) {
		Error_Handler();
 80008f6:	f000 f919 	bl	8000b2c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2208      	movs	r2, #8
 80008fe:	4619      	mov	r1, r3
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_TIM4_Init+0x124>)
 8000902:	f003 f9f5 	bl	8003cf0 <HAL_TIM_PWM_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM4_Init+0x100>
			!= HAL_OK) {
		Error_Handler();
 800090c:	f000 f90e 	bl	8000b2c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	220c      	movs	r2, #12
 8000914:	4619      	mov	r1, r3
 8000916:	4807      	ldr	r0, [pc, #28]	; (8000934 <MX_TIM4_Init+0x124>)
 8000918:	f003 f9ea 	bl	8003cf0 <HAL_TIM_PWM_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM4_Init+0x116>
			!= HAL_OK) {
		Error_Handler();
 8000922:	f000 f903 	bl	8000b2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000926:	4803      	ldr	r0, [pc, #12]	; (8000934 <MX_TIM4_Init+0x124>)
 8000928:	f000 f9c4 	bl	8000cb4 <HAL_TIM_MspPostInit>

}
 800092c:	bf00      	nop
 800092e:	3738      	adds	r7, #56	; 0x38
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200001e0 	.word	0x200001e0
 8000938:	40000800 	.word	0x40000800

0800093c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_GPIO_Init+0x8c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <MX_GPIO_Init+0x8c>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_GPIO_Init+0x8c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_GPIO_Init+0x8c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <MX_GPIO_Init+0x8c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_GPIO_Init+0x8c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_GPIO_Init+0x8c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <MX_GPIO_Init+0x8c>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_GPIO_Init+0x8c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a6:	2301      	movs	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0x90>)
 80009ba:	f000 ffcd 	bl	8001958 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <JoystickToLeds>:

/* USER CODE BEGIN 4 */
void JoystickToLeds(uint8_t ucAdcXIn, uint8_t ucAdcYIn, uint8_t *ucPosUpOut,
		uint8_t *ucPosDownOut, uint8_t *ucPosLeftOut, uint8_t *ucPosRightOut) {
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60ba      	str	r2, [r7, #8]
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4603      	mov	r3, r0
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	460b      	mov	r3, r1
 80009e0:	73bb      	strb	r3, [r7, #14]
	/*X AXIS*/
	if (ucAdcXIn > 123U && ucAdcXIn < 135U) /*MIDDLE*/
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	2b7b      	cmp	r3, #123	; 0x7b
 80009e6:	d909      	bls.n	80009fc <JoystickToLeds+0x2c>
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	2b86      	cmp	r3, #134	; 0x86
 80009ec:	d806      	bhi.n	80009fc <JoystickToLeds+0x2c>
	{
		*ucPosUpOut = 0U;
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
		*ucPosDownOut = 0U;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
 80009fa:	e01b      	b.n	8000a34 <JoystickToLeds+0x64>
	} else if (ucAdcXIn >= 135U) /*UP*/
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	2b86      	cmp	r3, #134	; 0x86
 8000a00:	d90a      	bls.n	8000a18 <JoystickToLeds+0x48>
	{
		*ucPosUpOut = (128U + (int8_t) ucAdcXIn) / 2U;
 8000a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a06:	3380      	adds	r3, #128	; 0x80
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	701a      	strb	r2, [r3, #0]
		*ucPosDownOut = 0U;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	e00d      	b.n	8000a34 <JoystickToLeds+0x64>
	} else if (ucAdcXIn <= 123U) /*DOWN*/
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	2b7b      	cmp	r3, #123	; 0x7b
 8000a1c:	d80a      	bhi.n	8000a34 <JoystickToLeds+0x64>
	{
		*ucPosUpOut = 0U;
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
		*ucPosDownOut = (128U - (int8_t) ucAdcXIn) / 2U;
 8000a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a28:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000a2c:	085b      	lsrs	r3, r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	701a      	strb	r2, [r3, #0]
	}

	/*Y AXIS*/
	if (ucAdcYIn > 123U && ucAdcYIn < 135U) /*MIDDLE*/
 8000a34:	7bbb      	ldrb	r3, [r7, #14]
 8000a36:	2b7b      	cmp	r3, #123	; 0x7b
 8000a38:	d909      	bls.n	8000a4e <JoystickToLeds+0x7e>
 8000a3a:	7bbb      	ldrb	r3, [r7, #14]
 8000a3c:	2b86      	cmp	r3, #134	; 0x86
 8000a3e:	d806      	bhi.n	8000a4e <JoystickToLeds+0x7e>
	{
		*ucPosLeftOut = 0U;
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
		*ucPosRightOut = 0U;
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
	} else if (ucAdcYIn <= 123U) /*LEFT*/
	{
		*ucPosLeftOut = (128U - (int8_t) ucAdcYIn) / 2U;
		*ucPosRightOut = 0U;
	}
}
 8000a4c:	e01b      	b.n	8000a86 <JoystickToLeds+0xb6>
	} else if (ucAdcYIn >= 135U) /*RIGHT*/
 8000a4e:	7bbb      	ldrb	r3, [r7, #14]
 8000a50:	2b86      	cmp	r3, #134	; 0x86
 8000a52:	d90a      	bls.n	8000a6a <JoystickToLeds+0x9a>
		*ucPosLeftOut = 0U;
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
		*ucPosRightOut = (128U + (int8_t) ucAdcYIn) / 2U;
 8000a5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a5e:	3380      	adds	r3, #128	; 0x80
 8000a60:	085b      	lsrs	r3, r3, #1
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	701a      	strb	r2, [r3, #0]
}
 8000a68:	e00d      	b.n	8000a86 <JoystickToLeds+0xb6>
	} else if (ucAdcYIn <= 123U) /*LEFT*/
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
 8000a6c:	2b7b      	cmp	r3, #123	; 0x7b
 8000a6e:	d80a      	bhi.n	8000a86 <JoystickToLeds+0xb6>
		*ucPosLeftOut = (128U - (int8_t) ucAdcYIn) / 2U;
 8000a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a74:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000a78:	085b      	lsrs	r3, r3, #1
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	701a      	strb	r2, [r3, #0]
		*ucPosRightOut = 0U;
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
}
 8000a86:	bf00      	nop
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <JoystickToUsb>:

void JoystickToUsb(uint8_t ucAdcXIn, uint8_t ucAdcYIn,
		uint8_t *scUsbXOut, uint8_t *scUsbYOut){
 8000a92:	b480      	push	{r7}
 8000a94:	b085      	sub	sp, #20
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	73bb      	strb	r3, [r7, #14]
	/*X AXIS*/
	if (ucAdcXIn > 123U && ucAdcXIn < 135U) /*MIDDLE*/
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	2b7b      	cmp	r3, #123	; 0x7b
 8000aa8:	d906      	bls.n	8000ab8 <JoystickToUsb+0x26>
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	2b86      	cmp	r3, #134	; 0x86
 8000aae:	d803      	bhi.n	8000ab8 <JoystickToUsb+0x26>
	{
		*scUsbXOut = 0U;
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e013      	b.n	8000ae0 <JoystickToUsb+0x4e>
	} else if (ucAdcXIn >= 135U) /*UP*/
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	2b86      	cmp	r3, #134	; 0x86
 8000abc:	d906      	bls.n	8000acc <JoystickToUsb+0x3a>
	{
		*scUsbXOut = (ucAdcXIn - 127U) / 2U;
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	3b7f      	subs	r3, #127	; 0x7f
 8000ac2:	085b      	lsrs	r3, r3, #1
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	e009      	b.n	8000ae0 <JoystickToUsb+0x4e>
	} else if (ucAdcXIn >= 0 && ucAdcXIn <= 127U) /*DOWN*/
 8000acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db05      	blt.n	8000ae0 <JoystickToUsb+0x4e>
	{
		*scUsbXOut = (ucAdcXIn - 127U) / 2;
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	3b7f      	subs	r3, #127	; 0x7f
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	701a      	strb	r2, [r3, #0]
	}

	/*Y AXIS*/
	if (ucAdcYIn > 123U && ucAdcYIn < 135U) /*MIDDLE*/
 8000ae0:	7bbb      	ldrb	r3, [r7, #14]
 8000ae2:	2b7b      	cmp	r3, #123	; 0x7b
 8000ae4:	d906      	bls.n	8000af4 <JoystickToUsb+0x62>
 8000ae6:	7bbb      	ldrb	r3, [r7, #14]
 8000ae8:	2b86      	cmp	r3, #134	; 0x86
 8000aea:	d803      	bhi.n	8000af4 <JoystickToUsb+0x62>
	{
		*scUsbYOut = 0U;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
		*scUsbYOut = -(ucAdcYIn - 127U) / 2;
	} else if (ucAdcYIn >= 0 && ucAdcYIn <= 127U) /*LEFT*/
	{
		*scUsbYOut = -(ucAdcYIn - 127U) / 2U;
	}
}
 8000af2:	e015      	b.n	8000b20 <JoystickToUsb+0x8e>
	} else if (ucAdcYIn >= 135U) /*RIGHT*/
 8000af4:	7bbb      	ldrb	r3, [r7, #14]
 8000af6:	2b86      	cmp	r3, #134	; 0x86
 8000af8:	d907      	bls.n	8000b0a <JoystickToUsb+0x78>
		*scUsbYOut = -(ucAdcYIn - 127U) / 2;
 8000afa:	7bbb      	ldrb	r3, [r7, #14]
 8000afc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	701a      	strb	r2, [r3, #0]
}
 8000b08:	e00a      	b.n	8000b20 <JoystickToUsb+0x8e>
	} else if (ucAdcYIn >= 0 && ucAdcYIn <= 127U) /*LEFT*/
 8000b0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db06      	blt.n	8000b20 <JoystickToUsb+0x8e>
		*scUsbYOut = -(ucAdcYIn - 127U) / 2U;
 8000b12:	7bbb      	ldrb	r3, [r7, #14]
 8000b14:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	701a      	strb	r2, [r3, #0]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b76:	2007      	movs	r0, #7
 8000b78:	f000 feac 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a2e      	ldr	r2, [pc, #184]	; (8000c60 <HAL_ADC_MspInit+0xd8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d128      	bne.n	8000bfc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <HAL_ADC_MspInit+0xdc>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a2c      	ldr	r2, [pc, #176]	; (8000c64 <HAL_ADC_MspInit+0xdc>)
 8000bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <HAL_ADC_MspInit+0xdc>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bc2:	61bb      	str	r3, [r7, #24]
 8000bc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <HAL_ADC_MspInit+0xdc>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a25      	ldr	r2, [pc, #148]	; (8000c64 <HAL_ADC_MspInit+0xdc>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <HAL_ADC_MspInit+0xdc>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	481c      	ldr	r0, [pc, #112]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000bf6:	f000 feaf 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bfa:	e02c      	b.n	8000c56 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <HAL_ADC_MspInit+0xe4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d127      	bne.n	8000c56 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_ADC_MspInit+0xdc>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <HAL_ADC_MspInit+0xdc>)
 8000c10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <HAL_ADC_MspInit+0xdc>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_ADC_MspInit+0xdc>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_ADC_MspInit+0xdc>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_ADC_MspInit+0xdc>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c42:	2303      	movs	r3, #3
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000c52:	f000 fe81 	bl	8001958 <HAL_GPIO_Init>
}
 8000c56:	bf00      	nop
 8000c58:	3730      	adds	r7, #48	; 0x30
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40012000 	.word	0x40012000
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40012100 	.word	0x40012100

08000c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <HAL_TIM_Base_MspInit+0x3c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d10d      	bne.n	8000c9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_TIM_Base_MspInit+0x40>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <HAL_TIM_Base_MspInit+0x40>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <HAL_TIM_Base_MspInit+0x40>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40000800 	.word	0x40000800
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <HAL_TIM_MspPostInit+0x68>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d11e      	bne.n	8000d14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_TIM_MspPostInit+0x6c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_TIM_MspPostInit+0x6c>)
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_TIM_MspPostInit+0x6c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cf2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_TIM_MspPostInit+0x70>)
 8000d10:	f000 fe22 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d14:	bf00      	nop
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40000800 	.word	0x40000800
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020c00 	.word	0x40020c00

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 f89a 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <OTG_FS_IRQHandler+0x10>)
 8000d82:	f001 f8e1 	bl	8001f48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000070c 	.word	0x2000070c

08000d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000db8:	f7ff ffea 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dbe:	490d      	ldr	r1, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	; (8000e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de2:	f007 fb19 	bl	8008418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fb6d 	bl	80004c4 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8000df8:	080084f8 	.word	0x080084f8
  ldr r2, =_sbss
 8000dfc:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8000e00:	20000c0c 	.word	0x20000c0c

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 fd4f 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f808 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fe7c 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fd67 	bl	800193e <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e88:	f000 fd2f 	bl	80018ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000228 	.word	0x20000228

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000228 	.word	0x20000228

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e033      	b.n	8000fb2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d109      	bne.n	8000f66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fe18 	bl	8000b88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d118      	bne.n	8000fa4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f7a:	f023 0302 	bic.w	r3, r3, #2
 8000f7e:	f043 0202 	orr.w	r2, r3, #2
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 fad8 	bl	800153c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f023 0303 	bic.w	r3, r3, #3
 8000f9a:	f043 0201 	orr.w	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa2:	e001      	b.n	8000fa8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <HAL_ADC_Start+0x1a>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e0b2      	b.n	800113c <HAL_ADC_Start+0x180>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d018      	beq.n	800101e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ffc:	4b52      	ldr	r3, [pc, #328]	; (8001148 <HAL_ADC_Start+0x18c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a52      	ldr	r2, [pc, #328]	; (800114c <HAL_ADC_Start+0x190>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	0c9a      	lsrs	r2, r3, #18
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001010:	e002      	b.n	8001018 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	3b01      	subs	r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f9      	bne.n	8001012 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b01      	cmp	r3, #1
 800102a:	d17a      	bne.n	8001122 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104a:	2b00      	cmp	r3, #0
 800104c:	d007      	beq.n	800105e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001056:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800106a:	d106      	bne.n	800107a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	f023 0206 	bic.w	r2, r3, #6
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	645a      	str	r2, [r3, #68]	; 0x44
 8001078:	e002      	b.n	8001080 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001088:	4b31      	ldr	r3, [pc, #196]	; (8001150 <HAL_ADC_Start+0x194>)
 800108a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001094:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d12a      	bne.n	80010f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <HAL_ADC_Start+0x198>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d015      	beq.n	80010d8 <HAL_ADC_Start+0x11c>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a29      	ldr	r2, [pc, #164]	; (8001158 <HAL_ADC_Start+0x19c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d105      	bne.n	80010c2 <HAL_ADC_Start+0x106>
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <HAL_ADC_Start+0x194>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00a      	beq.n	80010d8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a25      	ldr	r2, [pc, #148]	; (800115c <HAL_ADC_Start+0x1a0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d136      	bne.n	800113a <HAL_ADC_Start+0x17e>
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <HAL_ADC_Start+0x194>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d130      	bne.n	800113a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d129      	bne.n	800113a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	e020      	b.n	800113a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a15      	ldr	r2, [pc, #84]	; (8001154 <HAL_ADC_Start+0x198>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d11b      	bne.n	800113a <HAL_ADC_Start+0x17e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d114      	bne.n	800113a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	e00b      	b.n	800113a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f043 0210 	orr.w	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f043 0201 	orr.w	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	20000000 	.word	0x20000000
 800114c:	431bde83 	.word	0x431bde83
 8001150:	40012300 	.word	0x40012300
 8001154:	40012000 	.word	0x40012000
 8001158:	40012100 	.word	0x40012100
 800115c:	40012200 	.word	0x40012200

08001160 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800116e:	2b01      	cmp	r3, #1
 8001170:	d101      	bne.n	8001176 <HAL_ADC_Stop+0x16>
 8001172:	2302      	movs	r3, #2
 8001174:	e021      	b.n	80011ba <HAL_ADC_Stop+0x5a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d109      	bne.n	80011b0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	f043 0201 	orr.w	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e2:	d113      	bne.n	800120c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011f2:	d10b      	bne.n	800120c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f043 0220 	orr.w	r2, r3, #32
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e063      	b.n	80012d4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800120c:	f7ff fe62 	bl	8000ed4 <HAL_GetTick>
 8001210:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001212:	e021      	b.n	8001258 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800121a:	d01d      	beq.n	8001258 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <HAL_ADC_PollForConversion+0x6c>
 8001222:	f7ff fe57 	bl	8000ed4 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d212      	bcs.n	8001258 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b02      	cmp	r3, #2
 800123e:	d00b      	beq.n	8001258 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f043 0204 	orr.w	r2, r3, #4
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e03d      	b.n	80012d4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b02      	cmp	r3, #2
 8001264:	d1d6      	bne.n	8001214 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f06f 0212 	mvn.w	r2, #18
 800126e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d123      	bne.n	80012d2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800128e:	2b00      	cmp	r3, #0
 8001290:	d11f      	bne.n	80012d2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d111      	bne.n	80012d2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d105      	bne.n	80012d2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f043 0201 	orr.w	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1c>
 8001310:	2302      	movs	r3, #2
 8001312:	e105      	b.n	8001520 <HAL_ADC_ConfigChannel+0x228>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b09      	cmp	r3, #9
 8001322:	d925      	bls.n	8001370 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68d9      	ldr	r1, [r3, #12]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	3b1e      	subs	r3, #30
 800133a:	2207      	movs	r2, #7
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43da      	mvns	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	400a      	ands	r2, r1
 8001348:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68d9      	ldr	r1, [r3, #12]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	4603      	mov	r3, r0
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4403      	add	r3, r0
 8001362:	3b1e      	subs	r3, #30
 8001364:	409a      	lsls	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	e022      	b.n	80013b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6919      	ldr	r1, [r3, #16]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	2207      	movs	r2, #7
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	400a      	ands	r2, r1
 8001392:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6919      	ldr	r1, [r3, #16]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	4603      	mov	r3, r0
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4403      	add	r3, r0
 80013ac:	409a      	lsls	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d824      	bhi.n	8001408 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	3b05      	subs	r3, #5
 80013d0:	221f      	movs	r2, #31
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	400a      	ands	r2, r1
 80013de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	3b05      	subs	r3, #5
 80013fa:	fa00 f203 	lsl.w	r2, r0, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
 8001406:	e04c      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b0c      	cmp	r3, #12
 800140e:	d824      	bhi.n	800145a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b23      	subs	r3, #35	; 0x23
 8001422:	221f      	movs	r2, #31
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43da      	mvns	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	400a      	ands	r2, r1
 8001430:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3b23      	subs	r3, #35	; 0x23
 800144c:	fa00 f203 	lsl.w	r2, r0, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	631a      	str	r2, [r3, #48]	; 0x30
 8001458:	e023      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b41      	subs	r3, #65	; 0x41
 800146c:	221f      	movs	r2, #31
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	400a      	ands	r2, r1
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3b41      	subs	r3, #65	; 0x41
 8001496:	fa00 f203 	lsl.w	r2, r0, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_ADC_ConfigChannel+0x234>)
 80014a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a21      	ldr	r2, [pc, #132]	; (8001530 <HAL_ADC_ConfigChannel+0x238>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d109      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1cc>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d105      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_ADC_ConfigChannel+0x238>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d123      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d003      	beq.n	80014de <HAL_ADC_ConfigChannel+0x1e6>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b11      	cmp	r3, #17
 80014dc:	d11b      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b10      	cmp	r3, #16
 80014f0:	d111      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_ADC_ConfigChannel+0x23c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <HAL_ADC_ConfigChannel+0x240>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	0c9a      	lsrs	r2, r3, #18
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001508:	e002      	b.n	8001510 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3b01      	subs	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f9      	bne.n	800150a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40012300 	.word	0x40012300
 8001530:	40012000 	.word	0x40012000
 8001534:	20000000 	.word	0x20000000
 8001538:	431bde83 	.word	0x431bde83

0800153c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001544:	4b79      	ldr	r3, [pc, #484]	; (800172c <ADC_Init+0x1f0>)
 8001546:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	431a      	orrs	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	021a      	lsls	r2, r3, #8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6899      	ldr	r1, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	4a58      	ldr	r2, [pc, #352]	; (8001730 <ADC_Init+0x1f4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d022      	beq.n	800161a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6899      	ldr	r1, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6899      	ldr	r1, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	e00f      	b.n	800163a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001638:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0202 	bic.w	r2, r2, #2
 8001648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6899      	ldr	r1, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e1b      	ldrb	r3, [r3, #24]
 8001654:	005a      	lsls	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01b      	beq.n	80016a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001676:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001686:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6859      	ldr	r1, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	3b01      	subs	r3, #1
 8001694:	035a      	lsls	r2, r3, #13
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	e007      	b.n	80016b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	051a      	lsls	r2, r3, #20
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6899      	ldr	r1, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016f2:	025a      	lsls	r2, r3, #9
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800170a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6899      	ldr	r1, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	029a      	lsls	r2, r3, #10
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	609a      	str	r2, [r3, #8]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40012300 	.word	0x40012300
 8001730:	0f000001 	.word	0x0f000001

08001734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800175c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <__NVIC_GetPriorityGrouping+0x18>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	f003 0307 	and.w	r3, r3, #7
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db0b      	blt.n	80017c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <__NVIC_EnableIRQ+0x38>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2001      	movs	r0, #1
 80017ba:	fa00 f202 	lsl.w	r2, r0, r2
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100

080017d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	; (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	; (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f1c3 0307 	rsb	r3, r3, #7
 8001842:	2b04      	cmp	r3, #4
 8001844:	bf28      	it	cs
 8001846:	2304      	movcs	r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3304      	adds	r3, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d902      	bls.n	8001858 <NVIC_EncodePriority+0x30>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b03      	subs	r3, #3
 8001856:	e000      	b.n	800185a <NVIC_EncodePriority+0x32>
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43d9      	mvns	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	4313      	orrs	r3, r2
         );
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a0:	d301      	bcc.n	80018a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00f      	b.n	80018c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <SysTick_Config+0x40>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ae:	210f      	movs	r1, #15
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018b4:	f7ff ff8e 	bl	80017d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <SysTick_Config+0x40>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <SysTick_Config+0x40>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff29 	bl	8001734 <__NVIC_SetPriorityGrouping>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff3e 	bl	800177c <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff8e 	bl	8001828 <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5d 	bl	80017d4 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff31 	bl	8001798 <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa2 	bl	8001890 <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e16b      	b.n	8001c4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001974:	2201      	movs	r2, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 815a 	bne.w	8001c46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d005      	beq.n	80019aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d130      	bne.n	8001a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e0:	2201      	movs	r2, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 0201 	and.w	r2, r3, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d017      	beq.n	8001a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d123      	bne.n	8001a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	08da      	lsrs	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	69b9      	ldr	r1, [r7, #24]
 8001a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0203 	and.w	r2, r3, #3
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80b4 	beq.w	8001c46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b60      	ldr	r3, [pc, #384]	; (8001c64 <HAL_GPIO_Init+0x30c>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a5f      	ldr	r2, [pc, #380]	; (8001c64 <HAL_GPIO_Init+0x30c>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b5d      	ldr	r3, [pc, #372]	; (8001c64 <HAL_GPIO_Init+0x30c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001afa:	4a5b      	ldr	r2, [pc, #364]	; (8001c68 <HAL_GPIO_Init+0x310>)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	220f      	movs	r2, #15
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a52      	ldr	r2, [pc, #328]	; (8001c6c <HAL_GPIO_Init+0x314>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d02b      	beq.n	8001b7e <HAL_GPIO_Init+0x226>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a51      	ldr	r2, [pc, #324]	; (8001c70 <HAL_GPIO_Init+0x318>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d025      	beq.n	8001b7a <HAL_GPIO_Init+0x222>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a50      	ldr	r2, [pc, #320]	; (8001c74 <HAL_GPIO_Init+0x31c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d01f      	beq.n	8001b76 <HAL_GPIO_Init+0x21e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4f      	ldr	r2, [pc, #316]	; (8001c78 <HAL_GPIO_Init+0x320>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d019      	beq.n	8001b72 <HAL_GPIO_Init+0x21a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4e      	ldr	r2, [pc, #312]	; (8001c7c <HAL_GPIO_Init+0x324>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0x216>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4d      	ldr	r2, [pc, #308]	; (8001c80 <HAL_GPIO_Init+0x328>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00d      	beq.n	8001b6a <HAL_GPIO_Init+0x212>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4c      	ldr	r2, [pc, #304]	; (8001c84 <HAL_GPIO_Init+0x32c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <HAL_GPIO_Init+0x20e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4b      	ldr	r2, [pc, #300]	; (8001c88 <HAL_GPIO_Init+0x330>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_GPIO_Init+0x20a>
 8001b5e:	2307      	movs	r3, #7
 8001b60:	e00e      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b62:	2308      	movs	r3, #8
 8001b64:	e00c      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b66:	2306      	movs	r3, #6
 8001b68:	e00a      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	e008      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b6e:	2304      	movs	r3, #4
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b72:	2303      	movs	r3, #3
 8001b74:	e004      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_GPIO_Init+0x228>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	f002 0203 	and.w	r2, r2, #3
 8001b86:	0092      	lsls	r2, r2, #2
 8001b88:	4093      	lsls	r3, r2
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b90:	4935      	ldr	r1, [pc, #212]	; (8001c68 <HAL_GPIO_Init+0x310>)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bc2:	4a32      	ldr	r2, [pc, #200]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc8:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bec:	4a27      	ldr	r2, [pc, #156]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c16:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c40:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <HAL_GPIO_Init+0x334>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b0f      	cmp	r3, #15
 8001c50:	f67f ae90 	bls.w	8001974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40013800 	.word	0x40013800
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	40020400 	.word	0x40020400
 8001c74:	40020800 	.word	0x40020800
 8001c78:	40020c00 	.word	0x40020c00
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40021400 	.word	0x40021400
 8001c84:	40021800 	.word	0x40021800
 8001c88:	40021c00 	.word	0x40021c00
 8001c8c:	40013c00 	.word	0x40013c00

08001c90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	887b      	ldrh	r3, [r7, #2]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e001      	b.n	8001cb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e101      	b.n	8001ed6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d106      	bne.n	8001cf2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f006 f889 	bl	8007e04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d00:	d102      	bne.n	8001d08 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f002 fe28 	bl	8004962 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7c1a      	ldrb	r2, [r3, #16]
 8001d1a:	f88d 2000 	strb.w	r2, [sp]
 8001d1e:	3304      	adds	r3, #4
 8001d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d22:	f002 fd07 	bl	8004734 <USB_CoreInit>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0ce      	b.n	8001ed6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 fe20 	bl	8004984 <USB_SetCurrentMode>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0bf      	b.n	8001ed6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	e04a      	b.n	8001df2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	3315      	adds	r3, #21
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3314      	adds	r3, #20
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	b298      	uxth	r0, r3
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	332e      	adds	r3, #46	; 0x2e
 8001d98:	4602      	mov	r2, r0
 8001d9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	3318      	adds	r3, #24
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	331c      	adds	r3, #28
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3320      	adds	r3, #32
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	3324      	adds	r3, #36	; 0x24
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	3301      	adds	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	791b      	ldrb	r3, [r3, #4]
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d3af      	bcc.n	8001d5c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e044      	b.n	8001e8c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	791b      	ldrb	r3, [r3, #4]
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d3b5      	bcc.n	8001e02 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	7c1a      	ldrb	r2, [r3, #16]
 8001e9e:	f88d 2000 	strb.w	r2, [sp]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ea6:	f002 fdb9 	bl	8004a1c <USB_DevInit>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e00c      	b.n	8001ed6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 fdfd 	bl	8005ace <USB_DevDisconnect>

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_PCD_Start+0x1c>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e022      	b.n	8001f40 <HAL_PCD_Start+0x62>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d105      	bne.n	8001f22 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 fd0a 	bl	8004940 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 fdab 	bl	8005a8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b08d      	sub	sp, #52	; 0x34
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fe69 	bl	8005c36 <USB_GetMode>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 848c 	bne.w	8002884 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 fdcd 	bl	8005b10 <USB_ReadInterrupts>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 8482 	beq.w	8002882 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fdba 	bl	8005b10 <USB_ReadInterrupts>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d107      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f002 0202 	and.w	r2, r2, #2
 8001fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 fda8 	bl	8005b10 <USB_ReadInterrupts>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b10      	cmp	r3, #16
 8001fc8:	d161      	bne.n	800208e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0210 	bic.w	r2, r2, #16
 8001fd8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	f003 020f 	and.w	r2, r3, #15
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	0c5b      	lsrs	r3, r3, #17
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	2b02      	cmp	r3, #2
 8002004:	d124      	bne.n	8002050 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d035      	beq.n	800207e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800201c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002020:	b29b      	uxth	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	6a38      	ldr	r0, [r7, #32]
 8002026:	f003 fbdf 	bl	80057e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002036:	441a      	add	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002048:	441a      	add	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	615a      	str	r2, [r3, #20]
 800204e:	e016      	b.n	800207e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	0c5b      	lsrs	r3, r3, #17
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	2b06      	cmp	r3, #6
 800205a:	d110      	bne.n	800207e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002062:	2208      	movs	r2, #8
 8002064:	4619      	mov	r1, r3
 8002066:	6a38      	ldr	r0, [r7, #32]
 8002068:	f003 fbbe 	bl	80057e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002078:	441a      	add	r2, r3
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699a      	ldr	r2, [r3, #24]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0210 	orr.w	r2, r2, #16
 800208c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f003 fd3c 	bl	8005b10 <USB_ReadInterrupts>
 8002098:	4603      	mov	r3, r0
 800209a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800209e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020a2:	f040 80a7 	bne.w	80021f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f003 fd41 	bl	8005b36 <USB_ReadDevAllOutEpInterrupt>
 80020b4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020b6:	e099      	b.n	80021ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 808e 	beq.w	80021e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 fd65 	bl	8005b9e <USB_ReadDevOutEPInterrupt>
 80020d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00c      	beq.n	80020fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ec:	461a      	mov	r2, r3
 80020ee:	2301      	movs	r3, #1
 80020f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fe89 	bl	8002e0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00c      	beq.n	800211e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	4413      	add	r3, r2
 800210c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002110:	461a      	mov	r2, r3
 8002112:	2308      	movs	r3, #8
 8002114:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 ff5f 	bl	8002fdc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	4413      	add	r3, r2
 8002130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002134:	461a      	mov	r2, r3
 8002136:	2310      	movs	r3, #16
 8002138:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d030      	beq.n	80021a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	d109      	bne.n	8002164 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800215e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002162:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	3304      	adds	r3, #4
 8002178:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	78db      	ldrb	r3, [r3, #3]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d108      	bne.n	8002194 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2200      	movs	r2, #0
 8002186:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f005 ff3e 	bl	8008010 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	4413      	add	r3, r2
 800219c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a0:	461a      	mov	r2, r3
 80021a2:	2302      	movs	r3, #2
 80021a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021bc:	461a      	mov	r2, r3
 80021be:	2320      	movs	r3, #32
 80021c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d009      	beq.n	80021e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d8:	461a      	mov	r2, r3
 80021da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	3301      	adds	r3, #1
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f47f af62 	bne.w	80020b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 fc89 	bl	8005b10 <USB_ReadInterrupts>
 80021fe:	4603      	mov	r3, r0
 8002200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002204:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002208:	f040 80db 	bne.w	80023c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f003 fcaa 	bl	8005b6a <USB_ReadDevAllInEpInterrupt>
 8002216:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800221c:	e0cd      	b.n	80023ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80c2 	beq.w	80023ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f003 fcd0 	bl	8005bda <USB_ReadDevInEPInterrupt>
 800223a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d057      	beq.n	80022f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	2201      	movs	r2, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800225a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	43db      	mvns	r3, r3
 8002260:	69f9      	ldr	r1, [r7, #28]
 8002262:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002266:	4013      	ands	r3, r2
 8002268:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002276:	461a      	mov	r2, r3
 8002278:	2301      	movs	r3, #1
 800227a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	799b      	ldrb	r3, [r3, #6]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d132      	bne.n	80022ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	3320      	adds	r3, #32
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4403      	add	r3, r0
 80022a4:	331c      	adds	r3, #28
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4419      	add	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4403      	add	r3, r0
 80022b8:	3320      	adds	r3, #32
 80022ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d113      	bne.n	80022ea <HAL_PCD_IRQHandler+0x3a2>
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	3324      	adds	r3, #36	; 0x24
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d108      	bne.n	80022ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80022e2:	461a      	mov	r2, r3
 80022e4:	2101      	movs	r1, #1
 80022e6:	f003 fcd7 	bl	8005c98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	4619      	mov	r1, r3
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f005 fe08 	bl	8007f06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	4413      	add	r3, r2
 8002308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800230c:	461a      	mov	r2, r3
 800230e:	2308      	movs	r3, #8
 8002310:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002328:	461a      	mov	r2, r3
 800232a:	2310      	movs	r3, #16
 800232c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	4413      	add	r3, r2
 8002340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002344:	461a      	mov	r2, r3
 8002346:	2340      	movs	r3, #64	; 0x40
 8002348:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d023      	beq.n	800239c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002356:	6a38      	ldr	r0, [r7, #32]
 8002358:	f002 fcc4 	bl	8004ce4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800235c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	3310      	adds	r3, #16
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	3304      	adds	r3, #4
 800236e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	78db      	ldrb	r3, [r3, #3]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d108      	bne.n	800238a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2200      	movs	r2, #0
 800237c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	b2db      	uxtb	r3, r3
 8002382:	4619      	mov	r1, r3
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f005 fe55 	bl	8008034 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002396:	461a      	mov	r2, r3
 8002398:	2302      	movs	r3, #2
 800239a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fca3 	bl	8002cf4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	3301      	adds	r3, #1
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f47f af2e 	bne.w	800221e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f003 fba2 	bl	8005b10 <USB_ReadInterrupts>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023d6:	d122      	bne.n	800241e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d108      	bne.n	8002408 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023fe:	2100      	movs	r1, #0
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 fe89 	bl	8003118 <HAL_PCDEx_LPM_Callback>
 8002406:	e002      	b.n	800240e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f005 fdf3 	bl	8007ff4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800241c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f003 fb74 	bl	8005b10 <USB_ReadInterrupts>
 8002428:	4603      	mov	r3, r0
 800242a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800242e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002432:	d112      	bne.n	800245a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d102      	bne.n	800244a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f005 fdaf 	bl	8007fa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002458:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f003 fb56 	bl	8005b10 <USB_ReadInterrupts>
 8002464:	4603      	mov	r3, r0
 8002466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246e:	f040 80b7 	bne.w	80025e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2110      	movs	r1, #16
 800248c:	4618      	mov	r0, r3
 800248e:	f002 fc29 	bl	8004ce4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002492:	2300      	movs	r3, #0
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002496:	e046      	b.n	8002526 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024a4:	461a      	mov	r2, r3
 80024a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024bc:	0151      	lsls	r1, r2, #5
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	440a      	add	r2, r1
 80024c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d8:	461a      	mov	r2, r3
 80024da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f0:	0151      	lsls	r1, r2, #5
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	440a      	add	r2, r1
 80024f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	4413      	add	r3, r2
 8002508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002510:	0151      	lsls	r1, r2, #5
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	440a      	add	r2, r1
 8002516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800251a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800251e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002522:	3301      	adds	r3, #1
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	791b      	ldrb	r3, [r3, #4]
 800252a:	461a      	mov	r2, r3
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	4293      	cmp	r3, r2
 8002530:	d3b2      	bcc.n	8002498 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002540:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002544:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7bdb      	ldrb	r3, [r3, #15]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d016      	beq.n	800257c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800255e:	f043 030b 	orr.w	r3, r3, #11
 8002562:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002574:	f043 030b 	orr.w	r3, r3, #11
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	e015      	b.n	80025a8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800258a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800258e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002592:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a2:	f043 030b 	orr.w	r3, r3, #11
 80025a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025ca:	461a      	mov	r2, r3
 80025cc:	f003 fb64 	bl	8005c98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 fa93 	bl	8005b10 <USB_ReadInterrupts>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f4:	d123      	bne.n	800263e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 fb29 	bl	8005c52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f002 fbe6 	bl	8004dd6 <USB_GetDevSpeed>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681c      	ldr	r4, [r3, #0]
 8002616:	f001 f9ef 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 800261a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002620:	461a      	mov	r2, r3
 8002622:	4620      	mov	r0, r4
 8002624:	f002 f8ea 	bl	80047fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f005 fc94 	bl	8007f56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800263c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fa64 	bl	8005b10 <USB_ReadInterrupts>
 8002648:	4603      	mov	r3, r0
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b08      	cmp	r3, #8
 8002650:	d10a      	bne.n	8002668 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f005 fc71 	bl	8007f3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f002 0208 	and.w	r2, r2, #8
 8002666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f003 fa4f 	bl	8005b10 <USB_ReadInterrupts>
 8002672:	4603      	mov	r3, r0
 8002674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002678:	2b80      	cmp	r3, #128	; 0x80
 800267a:	d123      	bne.n	80026c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002688:	2301      	movs	r3, #1
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
 800268c:	e014      	b.n	80026b8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	f203 2357 	addw	r3, r3, #599	; 0x257
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4619      	mov	r1, r3
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 faf0 	bl	8002c92 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	3301      	adds	r3, #1
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	791b      	ldrb	r3, [r3, #4]
 80026bc:	461a      	mov	r2, r3
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d3e4      	bcc.n	800268e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f003 fa21 	bl	8005b10 <USB_ReadInterrupts>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026d8:	d13c      	bne.n	8002754 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026da:	2301      	movs	r3, #1
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
 80026de:	e02b      	b.n	8002738 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	3318      	adds	r3, #24
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d115      	bne.n	8002732 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002706:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002708:	2b00      	cmp	r3, #0
 800270a:	da12      	bge.n	8002732 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	3317      	adds	r3, #23
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002728:	b2db      	uxtb	r3, r3
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fab0 	bl	8002c92 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	3301      	adds	r3, #1
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	791b      	ldrb	r3, [r3, #4]
 800273c:	461a      	mov	r2, r3
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	4293      	cmp	r3, r2
 8002742:	d3cd      	bcc.n	80026e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f003 f9d9 	bl	8005b10 <USB_ReadInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002768:	d156      	bne.n	8002818 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800276a:	2301      	movs	r3, #1
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
 800276e:	e045      	b.n	80027fc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	4413      	add	r3, r2
 8002778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d12e      	bne.n	80027f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002798:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800279a:	2b00      	cmp	r3, #0
 800279c:	da2b      	bge.n	80027f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80027aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d121      	bne.n	80027f6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	f203 2357 	addw	r3, r3, #599	; 0x257
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f2:	6053      	str	r3, [r2, #4]
            break;
 80027f4:	e008      	b.n	8002808 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	3301      	adds	r3, #1
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	791b      	ldrb	r3, [r3, #4]
 8002800:	461a      	mov	r2, r3
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	4293      	cmp	r3, r2
 8002806:	d3b3      	bcc.n	8002770 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f003 f977 	bl	8005b10 <USB_ReadInterrupts>
 8002822:	4603      	mov	r3, r0
 8002824:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282c:	d10a      	bne.n	8002844 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f005 fc12 	bl	8008058 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f003 f961 	bl	8005b10 <USB_ReadInterrupts>
 800284e:	4603      	mov	r3, r0
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b04      	cmp	r3, #4
 8002856:	d115      	bne.n	8002884 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f005 fc02 	bl	8008074 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	e000      	b.n	8002884 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002882:	bf00      	nop
    }
  }
}
 8002884:	3734      	adds	r7, #52	; 0x34
 8002886:	46bd      	mov	sp, r7
 8002888:	bd90      	pop	{r4, r7, pc}

0800288a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_PCD_SetAddress+0x1a>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e012      	b.n	80028ca <HAL_PCD_SetAddress+0x40>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 f8c0 	bl	8005a40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	4608      	mov	r0, r1
 80028dc:	4611      	mov	r1, r2
 80028de:	461a      	mov	r2, r3
 80028e0:	4603      	mov	r3, r0
 80028e2:	70fb      	strb	r3, [r7, #3]
 80028e4:	460b      	mov	r3, r1
 80028e6:	803b      	strh	r3, [r7, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	da0f      	bge.n	8002918 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	f003 020f 	and.w	r2, r3, #15
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	3310      	adds	r3, #16
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	4413      	add	r3, r2
 800290c:	3304      	adds	r3, #4
 800290e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	705a      	strb	r2, [r3, #1]
 8002916:	e00f      	b.n	8002938 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	f003 020f 	and.w	r2, r3, #15
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	3304      	adds	r3, #4
 8002930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	b2da      	uxtb	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002944:	883a      	ldrh	r2, [r7, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	78ba      	ldrb	r2, [r7, #2]
 800294e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	785b      	ldrb	r3, [r3, #1]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d004      	beq.n	8002962 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002962:	78bb      	ldrb	r3, [r7, #2]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d102      	bne.n	800296e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_PCD_EP_Open+0xaa>
 8002978:	2302      	movs	r3, #2
 800297a:	e00e      	b.n	800299a <HAL_PCD_EP_Open+0xc8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68f9      	ldr	r1, [r7, #12]
 800298a:	4618      	mov	r0, r3
 800298c:	f002 fa48 	bl	8004e20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002998:	7afb      	ldrb	r3, [r7, #11]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	460b      	mov	r3, r1
 80029ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da0f      	bge.n	80029d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	f003 020f 	and.w	r2, r3, #15
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	3310      	adds	r3, #16
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	705a      	strb	r2, [r3, #1]
 80029d4:	e00f      	b.n	80029f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	f003 020f 	and.w	r2, r3, #15
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	4413      	add	r3, r2
 80029ec:	3304      	adds	r3, #4
 80029ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_PCD_EP_Close+0x6e>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e00e      	b.n	8002a2e <HAL_PCD_EP_Close+0x8c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68f9      	ldr	r1, [r7, #12]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f002 fa86 	bl	8004f30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	460b      	mov	r3, r1
 8002a44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a46:	7afb      	ldrb	r3, [r7, #11]
 8002a48:	f003 020f 	and.w	r2, r3, #15
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a78:	7afb      	ldrb	r3, [r7, #11]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	799b      	ldrb	r3, [r3, #6]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d102      	bne.n	8002a92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	799b      	ldrb	r3, [r3, #6]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	6979      	ldr	r1, [r7, #20]
 8002a9e:	f002 fb23 	bl	80050e8 <USB_EPStartXfer>

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002abc:	7afb      	ldrb	r3, [r7, #11]
 8002abe:	f003 020f 	and.w	r2, r3, #15
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	3310      	adds	r3, #16
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aec:	7afb      	ldrb	r3, [r7, #11]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	799b      	ldrb	r3, [r3, #6]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d102      	bne.n	8002b06 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	799b      	ldrb	r3, [r3, #6]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	6979      	ldr	r1, [r7, #20]
 8002b12:	f002 fae9 	bl	80050e8 <USB_EPStartXfer>

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	7912      	ldrb	r2, [r2, #4]
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e04f      	b.n	8002bde <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	da0f      	bge.n	8002b66 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	f003 020f 	and.w	r2, r3, #15
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	3310      	adds	r3, #16
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2201      	movs	r2, #1
 8002b62:	705a      	strb	r2, [r3, #1]
 8002b64:	e00d      	b.n	8002b82 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_PCD_EP_SetStall+0x82>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e01d      	b.n	8002bde <HAL_PCD_EP_SetStall+0xbe>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68f9      	ldr	r1, [r7, #12]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f002 fe71 	bl	8005898 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7999      	ldrb	r1, [r3, #6]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f003 f862 	bl	8005c98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	7912      	ldrb	r2, [r2, #4]
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d901      	bls.n	8002c04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e042      	b.n	8002c8a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	da0f      	bge.n	8002c2c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 020f 	and.w	r2, r3, #15
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	3310      	adds	r3, #16
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	3304      	adds	r3, #4
 8002c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	705a      	strb	r2, [r3, #1]
 8002c2a:	e00f      	b.n	8002c4c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	f003 020f 	and.w	r2, r3, #15
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	3304      	adds	r3, #4
 8002c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_PCD_EP_ClrStall+0x86>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e00e      	b.n	8002c8a <HAL_PCD_EP_ClrStall+0xa4>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68f9      	ldr	r1, [r7, #12]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f002 fe7a 	bl	8005974 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	da0c      	bge.n	8002cc0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	f003 020f 	and.w	r2, r3, #15
 8002cac:	4613      	mov	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	3310      	adds	r3, #16
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	3304      	adds	r3, #4
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e00c      	b.n	8002cda <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	f003 020f 	and.w	r2, r3, #15
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68f9      	ldr	r1, [r7, #12]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f002 fc99 	bl	8005618 <USB_EPStopXfer>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002cea:	7afb      	ldrb	r3, [r7, #11]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	3310      	adds	r3, #16
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4413      	add	r3, r2
 8002d18:	3304      	adds	r3, #4
 8002d1a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	695a      	ldr	r2, [r3, #20]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d901      	bls.n	8002d2c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e06b      	b.n	8002e04 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d902      	bls.n	8002d48 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	3303      	adds	r3, #3
 8002d4c:	089b      	lsrs	r3, r3, #2
 8002d4e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d50:	e02a      	b.n	8002da8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d902      	bls.n	8002d6e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3303      	adds	r3, #3
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	68d9      	ldr	r1, [r3, #12]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	4603      	mov	r3, r0
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f002 fcee 	bl	800576c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	441a      	add	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	441a      	add	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d809      	bhi.n	8002dd2 <PCD_WriteEmptyTxFifo+0xde>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d203      	bcs.n	8002dd2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1bf      	bne.n	8002d52 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d811      	bhi.n	8002e02 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	2201      	movs	r2, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	6939      	ldr	r1, [r7, #16]
 8002dfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dfe:	4013      	ands	r3, r2
 8002e00:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3720      	adds	r7, #32
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	333c      	adds	r3, #60	; 0x3c
 8002e24:	3304      	adds	r3, #4
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	799b      	ldrb	r3, [r3, #6]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d17b      	bne.n	8002f3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d015      	beq.n	8002e78 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	4a61      	ldr	r2, [pc, #388]	; (8002fd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	f240 80b9 	bls.w	8002fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80b3 	beq.w	8002fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e74:	6093      	str	r3, [r2, #8]
 8002e76:	e0a7      	b.n	8002fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d009      	beq.n	8002e96 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2320      	movs	r3, #32
 8002e92:	6093      	str	r3, [r2, #8]
 8002e94:	e098      	b.n	8002fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f040 8093 	bne.w	8002fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	4a4b      	ldr	r2, [pc, #300]	; (8002fd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d90f      	bls.n	8002eca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec6:	6093      	str	r3, [r2, #8]
 8002ec8:	e07e      	b.n	8002fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	3304      	adds	r3, #4
 8002ede:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a1a      	ldr	r2, [r3, #32]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	0159      	lsls	r1, r3, #5
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	440b      	add	r3, r1
 8002eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef6:	1ad2      	subs	r2, r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d114      	bne.n	8002f2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002f14:	461a      	mov	r2, r3
 8002f16:	2101      	movs	r1, #1
 8002f18:	f002 febe 	bl	8005c98 <USB_EP0_OutStart>
 8002f1c:	e006      	b.n	8002f2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	441a      	add	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	4619      	mov	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f004 ffcc 	bl	8007ed0 <HAL_PCD_DataOutStageCallback>
 8002f38:	e046      	b.n	8002fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d124      	bne.n	8002f8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f5e:	6093      	str	r3, [r2, #8]
 8002f60:	e032      	b.n	8002fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	4619      	mov	r1, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f004 ffa3 	bl	8007ed0 <HAL_PCD_DataOutStageCallback>
 8002f8a:	e01d      	b.n	8002fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d114      	bne.n	8002fbc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d108      	bne.n	8002fbc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	f002 fe6e 	bl	8005c98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f004 ff84 	bl	8007ed0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3720      	adds	r7, #32
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	4f54300a 	.word	0x4f54300a
 8002fd8:	4f54310a 	.word	0x4f54310a

08002fdc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	333c      	adds	r3, #60	; 0x3c
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4a15      	ldr	r2, [pc, #84]	; (8003064 <PCD_EP_OutSetupPacket_int+0x88>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d90e      	bls.n	8003030 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003028:	461a      	mov	r2, r3
 800302a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800302e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f004 ff3b 	bl	8007eac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <PCD_EP_OutSetupPacket_int+0x88>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d90c      	bls.n	8003058 <PCD_EP_OutSetupPacket_int+0x7c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	799b      	ldrb	r3, [r3, #6]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d108      	bne.n	8003058 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003050:	461a      	mov	r2, r3
 8003052:	2101      	movs	r1, #1
 8003054:	f002 fe20 	bl	8005c98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	4f54300a 	.word	0x4f54300a

08003068 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	70fb      	strb	r3, [r7, #3]
 8003074:	4613      	mov	r3, r2
 8003076:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d107      	bne.n	8003096 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003086:	883b      	ldrh	r3, [r7, #0]
 8003088:	0419      	lsls	r1, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	430a      	orrs	r2, r1
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
 8003094:	e028      	b.n	80030e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	4413      	add	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]
 80030a8:	e00d      	b.n	80030c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	3340      	adds	r3, #64	; 0x40
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	0c1b      	lsrs	r3, r3, #16
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	4413      	add	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	3301      	adds	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d3ec      	bcc.n	80030aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80030d0:	883b      	ldrh	r3, [r7, #0]
 80030d2:	0418      	lsls	r0, r3, #16
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6819      	ldr	r1, [r3, #0]
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	3b01      	subs	r3, #1
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	4302      	orrs	r2, r0
 80030e0:	3340      	adds	r3, #64	; 0x40
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e267      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d075      	beq.n	800323a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800314e:	4b88      	ldr	r3, [pc, #544]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b04      	cmp	r3, #4
 8003158:	d00c      	beq.n	8003174 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315a:	4b85      	ldr	r3, [pc, #532]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003162:	2b08      	cmp	r3, #8
 8003164:	d112      	bne.n	800318c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003166:	4b82      	ldr	r3, [pc, #520]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003172:	d10b      	bne.n	800318c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	4b7e      	ldr	r3, [pc, #504]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d05b      	beq.n	8003238 <HAL_RCC_OscConfig+0x108>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d157      	bne.n	8003238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e242      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003194:	d106      	bne.n	80031a4 <HAL_RCC_OscConfig+0x74>
 8003196:	4b76      	ldr	r3, [pc, #472]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a75      	ldr	r2, [pc, #468]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 800319c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e01d      	b.n	80031e0 <HAL_RCC_OscConfig+0xb0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x98>
 80031ae:	4b70      	ldr	r3, [pc, #448]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a6f      	ldr	r2, [pc, #444]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 80031b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4b6d      	ldr	r3, [pc, #436]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6c      	ldr	r2, [pc, #432]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0xb0>
 80031c8:	4b69      	ldr	r3, [pc, #420]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a68      	ldr	r2, [pc, #416]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4b66      	ldr	r3, [pc, #408]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a65      	ldr	r2, [pc, #404]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 80031da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d013      	beq.n	8003210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fd fe74 	bl	8000ed4 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fd fe70 	bl	8000ed4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e207      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4b5b      	ldr	r3, [pc, #364]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0xc0>
 800320e:	e014      	b.n	800323a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fd fe60 	bl	8000ed4 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003218:	f7fd fe5c 	bl	8000ed4 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1f3      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	4b51      	ldr	r3, [pc, #324]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0xe8>
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d063      	beq.n	800330e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003246:	4b4a      	ldr	r3, [pc, #296]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003252:	4b47      	ldr	r3, [pc, #284]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325a:	2b08      	cmp	r3, #8
 800325c:	d11c      	bne.n	8003298 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325e:	4b44      	ldr	r3, [pc, #272]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d116      	bne.n	8003298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	4b41      	ldr	r3, [pc, #260]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_RCC_OscConfig+0x152>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d001      	beq.n	8003282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e1c7      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003282:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4937      	ldr	r1, [pc, #220]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	e03a      	b.n	800330e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a0:	4b34      	ldr	r3, [pc, #208]	; (8003374 <HAL_RCC_OscConfig+0x244>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fd fe15 	bl	8000ed4 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ae:	f7fd fe11 	bl	8000ed4 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e1a8      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032cc:	4b28      	ldr	r3, [pc, #160]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4925      	ldr	r1, [pc, #148]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
 80032e0:	e015      	b.n	800330e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e2:	4b24      	ldr	r3, [pc, #144]	; (8003374 <HAL_RCC_OscConfig+0x244>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fd fdf4 	bl	8000ed4 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f0:	f7fd fdf0 	bl	8000ed4 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e187      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d036      	beq.n	8003388 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d016      	beq.n	8003350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003322:	4b15      	ldr	r3, [pc, #84]	; (8003378 <HAL_RCC_OscConfig+0x248>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7fd fdd4 	bl	8000ed4 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003330:	f7fd fdd0 	bl	8000ed4 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e167      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_OscConfig+0x240>)
 8003344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x200>
 800334e:	e01b      	b.n	8003388 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <HAL_RCC_OscConfig+0x248>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003356:	f7fd fdbd 	bl	8000ed4 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335c:	e00e      	b.n	800337c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800335e:	f7fd fdb9 	bl	8000ed4 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d907      	bls.n	800337c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e150      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
 8003370:	40023800 	.word	0x40023800
 8003374:	42470000 	.word	0x42470000
 8003378:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800337c:	4b88      	ldr	r3, [pc, #544]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 800337e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1ea      	bne.n	800335e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8097 	beq.w	80034c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003396:	2300      	movs	r3, #0
 8003398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339a:	4b81      	ldr	r3, [pc, #516]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10f      	bne.n	80033c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	4b7d      	ldr	r3, [pc, #500]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	4a7c      	ldr	r2, [pc, #496]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 80033b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b4:	6413      	str	r3, [r2, #64]	; 0x40
 80033b6:	4b7a      	ldr	r3, [pc, #488]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c2:	2301      	movs	r3, #1
 80033c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c6:	4b77      	ldr	r3, [pc, #476]	; (80035a4 <HAL_RCC_OscConfig+0x474>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d118      	bne.n	8003404 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d2:	4b74      	ldr	r3, [pc, #464]	; (80035a4 <HAL_RCC_OscConfig+0x474>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a73      	ldr	r2, [pc, #460]	; (80035a4 <HAL_RCC_OscConfig+0x474>)
 80033d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033de:	f7fd fd79 	bl	8000ed4 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e6:	f7fd fd75 	bl	8000ed4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e10c      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <HAL_RCC_OscConfig+0x474>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d106      	bne.n	800341a <HAL_RCC_OscConfig+0x2ea>
 800340c:	4b64      	ldr	r3, [pc, #400]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	4a63      	ldr	r2, [pc, #396]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6713      	str	r3, [r2, #112]	; 0x70
 8003418:	e01c      	b.n	8003454 <HAL_RCC_OscConfig+0x324>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b05      	cmp	r3, #5
 8003420:	d10c      	bne.n	800343c <HAL_RCC_OscConfig+0x30c>
 8003422:	4b5f      	ldr	r3, [pc, #380]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	4a5e      	ldr	r2, [pc, #376]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003428:	f043 0304 	orr.w	r3, r3, #4
 800342c:	6713      	str	r3, [r2, #112]	; 0x70
 800342e:	4b5c      	ldr	r3, [pc, #368]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003432:	4a5b      	ldr	r2, [pc, #364]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6713      	str	r3, [r2, #112]	; 0x70
 800343a:	e00b      	b.n	8003454 <HAL_RCC_OscConfig+0x324>
 800343c:	4b58      	ldr	r3, [pc, #352]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	4a57      	ldr	r2, [pc, #348]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	6713      	str	r3, [r2, #112]	; 0x70
 8003448:	4b55      	ldr	r3, [pc, #340]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	4a54      	ldr	r2, [pc, #336]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 800344e:	f023 0304 	bic.w	r3, r3, #4
 8003452:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d015      	beq.n	8003488 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345c:	f7fd fd3a 	bl	8000ed4 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003462:	e00a      	b.n	800347a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003464:	f7fd fd36 	bl	8000ed4 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e0cb      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347a:	4b49      	ldr	r3, [pc, #292]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0ee      	beq.n	8003464 <HAL_RCC_OscConfig+0x334>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003488:	f7fd fd24 	bl	8000ed4 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003490:	f7fd fd20 	bl	8000ed4 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	; 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e0b5      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a6:	4b3e      	ldr	r3, [pc, #248]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1ee      	bne.n	8003490 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d105      	bne.n	80034c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b8:	4b39      	ldr	r3, [pc, #228]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	4a38      	ldr	r2, [pc, #224]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 80034be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80a1 	beq.w	8003610 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ce:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d05c      	beq.n	8003594 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d141      	bne.n	8003566 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e2:	4b31      	ldr	r3, [pc, #196]	; (80035a8 <HAL_RCC_OscConfig+0x478>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fd fcf4 	bl	8000ed4 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fd fcf0 	bl	8000ed4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e087      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	4b27      	ldr	r3, [pc, #156]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	019b      	lsls	r3, r3, #6
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	3b01      	subs	r3, #1
 8003528:	041b      	lsls	r3, r3, #16
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	061b      	lsls	r3, r3, #24
 8003532:	491b      	ldr	r1, [pc, #108]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_RCC_OscConfig+0x478>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fd fcc9 	bl	8000ed4 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003546:	f7fd fcc5 	bl	8000ed4 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e05c      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x416>
 8003564:	e054      	b.n	8003610 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_RCC_OscConfig+0x478>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fd fcb2 	bl	8000ed4 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003574:	f7fd fcae 	bl	8000ed4 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e045      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x444>
 8003592:	e03d      	b.n	8003610 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d107      	bne.n	80035ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e038      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40007000 	.word	0x40007000
 80035a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_RCC_OscConfig+0x4ec>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d028      	beq.n	800360c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d121      	bne.n	800360c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d11a      	bne.n	800360c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035dc:	4013      	ands	r3, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d111      	bne.n	800360c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f2:	085b      	lsrs	r3, r3, #1
 80035f4:	3b01      	subs	r3, #1
 80035f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d107      	bne.n	800360c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800

08003620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0cc      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003634:	4b68      	ldr	r3, [pc, #416]	; (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d90c      	bls.n	800365c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b65      	ldr	r3, [pc, #404]	; (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364a:	4b63      	ldr	r3, [pc, #396]	; (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0b8      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003674:	4b59      	ldr	r3, [pc, #356]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a58      	ldr	r2, [pc, #352]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800367e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800368c:	4b53      	ldr	r3, [pc, #332]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a52      	ldr	r2, [pc, #328]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003698:	4b50      	ldr	r3, [pc, #320]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	494d      	ldr	r1, [pc, #308]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d044      	beq.n	8003740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d107      	bne.n	80036ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	4b47      	ldr	r3, [pc, #284]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d119      	bne.n	80036fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e07f      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d003      	beq.n	80036de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036de:	4b3f      	ldr	r3, [pc, #252]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e06f      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ee:	4b3b      	ldr	r3, [pc, #236]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e067      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036fe:	4b37      	ldr	r3, [pc, #220]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f023 0203 	bic.w	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4934      	ldr	r1, [pc, #208]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	4313      	orrs	r3, r2
 800370e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003710:	f7fd fbe0 	bl	8000ed4 <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	e00a      	b.n	800372e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003718:	f7fd fbdc 	bl	8000ed4 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e04f      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	4b2b      	ldr	r3, [pc, #172]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 020c 	and.w	r2, r3, #12
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	429a      	cmp	r2, r3
 800373e:	d1eb      	bne.n	8003718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003740:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d20c      	bcs.n	8003768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b22      	ldr	r3, [pc, #136]	; (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e032      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003774:	4b19      	ldr	r3, [pc, #100]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4916      	ldr	r1, [pc, #88]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003792:	4b12      	ldr	r3, [pc, #72]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	490e      	ldr	r1, [pc, #56]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037a6:	f000 f821 	bl	80037ec <HAL_RCC_GetSysClockFreq>
 80037aa:	4602      	mov	r2, r0
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	490a      	ldr	r1, [pc, #40]	; (80037e0 <HAL_RCC_ClockConfig+0x1c0>)
 80037b8:	5ccb      	ldrb	r3, [r1, r3]
 80037ba:	fa22 f303 	lsr.w	r3, r2, r3
 80037be:	4a09      	ldr	r2, [pc, #36]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd fb40 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40023c00 	.word	0x40023c00
 80037dc:	40023800 	.word	0x40023800
 80037e0:	080084d8 	.word	0x080084d8
 80037e4:	20000000 	.word	0x20000000
 80037e8:	20000004 	.word	0x20000004

080037ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f0:	b094      	sub	sp, #80	; 0x50
 80037f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	647b      	str	r3, [r7, #68]	; 0x44
 80037f8:	2300      	movs	r3, #0
 80037fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037fc:	2300      	movs	r3, #0
 80037fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003804:	4b79      	ldr	r3, [pc, #484]	; (80039ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b08      	cmp	r3, #8
 800380e:	d00d      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x40>
 8003810:	2b08      	cmp	r3, #8
 8003812:	f200 80e1 	bhi.w	80039d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_RCC_GetSysClockFreq+0x34>
 800381a:	2b04      	cmp	r3, #4
 800381c:	d003      	beq.n	8003826 <HAL_RCC_GetSysClockFreq+0x3a>
 800381e:	e0db      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003820:	4b73      	ldr	r3, [pc, #460]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003822:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003824:	e0db      	b.n	80039de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003826:	4b73      	ldr	r3, [pc, #460]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003828:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800382a:	e0d8      	b.n	80039de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800382c:	4b6f      	ldr	r3, [pc, #444]	; (80039ec <HAL_RCC_GetSysClockFreq+0x200>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003834:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003836:	4b6d      	ldr	r3, [pc, #436]	; (80039ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d063      	beq.n	800390a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003842:	4b6a      	ldr	r3, [pc, #424]	; (80039ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	2200      	movs	r2, #0
 800384a:	63bb      	str	r3, [r7, #56]	; 0x38
 800384c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800384e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003854:	633b      	str	r3, [r7, #48]	; 0x30
 8003856:	2300      	movs	r3, #0
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
 800385a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800385e:	4622      	mov	r2, r4
 8003860:	462b      	mov	r3, r5
 8003862:	f04f 0000 	mov.w	r0, #0
 8003866:	f04f 0100 	mov.w	r1, #0
 800386a:	0159      	lsls	r1, r3, #5
 800386c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003870:	0150      	lsls	r0, r2, #5
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4621      	mov	r1, r4
 8003878:	1a51      	subs	r1, r2, r1
 800387a:	6139      	str	r1, [r7, #16]
 800387c:	4629      	mov	r1, r5
 800387e:	eb63 0301 	sbc.w	r3, r3, r1
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003890:	4659      	mov	r1, fp
 8003892:	018b      	lsls	r3, r1, #6
 8003894:	4651      	mov	r1, sl
 8003896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800389a:	4651      	mov	r1, sl
 800389c:	018a      	lsls	r2, r1, #6
 800389e:	4651      	mov	r1, sl
 80038a0:	ebb2 0801 	subs.w	r8, r2, r1
 80038a4:	4659      	mov	r1, fp
 80038a6:	eb63 0901 	sbc.w	r9, r3, r1
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038be:	4690      	mov	r8, r2
 80038c0:	4699      	mov	r9, r3
 80038c2:	4623      	mov	r3, r4
 80038c4:	eb18 0303 	adds.w	r3, r8, r3
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	462b      	mov	r3, r5
 80038cc:	eb49 0303 	adc.w	r3, r9, r3
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038de:	4629      	mov	r1, r5
 80038e0:	024b      	lsls	r3, r1, #9
 80038e2:	4621      	mov	r1, r4
 80038e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038e8:	4621      	mov	r1, r4
 80038ea:	024a      	lsls	r2, r1, #9
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f2:	2200      	movs	r2, #0
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038fc:	f7fc fc64 	bl	80001c8 <__aeabi_uldivmod>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4613      	mov	r3, r2
 8003906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003908:	e058      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390a:	4b38      	ldr	r3, [pc, #224]	; (80039ec <HAL_RCC_GetSysClockFreq+0x200>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	099b      	lsrs	r3, r3, #6
 8003910:	2200      	movs	r2, #0
 8003912:	4618      	mov	r0, r3
 8003914:	4611      	mov	r1, r2
 8003916:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	2300      	movs	r3, #0
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
 8003920:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003924:	4642      	mov	r2, r8
 8003926:	464b      	mov	r3, r9
 8003928:	f04f 0000 	mov.w	r0, #0
 800392c:	f04f 0100 	mov.w	r1, #0
 8003930:	0159      	lsls	r1, r3, #5
 8003932:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003936:	0150      	lsls	r0, r2, #5
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4641      	mov	r1, r8
 800393e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003942:	4649      	mov	r1, r9
 8003944:	eb63 0b01 	sbc.w	fp, r3, r1
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003954:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003958:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800395c:	ebb2 040a 	subs.w	r4, r2, sl
 8003960:	eb63 050b 	sbc.w	r5, r3, fp
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	00eb      	lsls	r3, r5, #3
 800396e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003972:	00e2      	lsls	r2, r4, #3
 8003974:	4614      	mov	r4, r2
 8003976:	461d      	mov	r5, r3
 8003978:	4643      	mov	r3, r8
 800397a:	18e3      	adds	r3, r4, r3
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	464b      	mov	r3, r9
 8003980:	eb45 0303 	adc.w	r3, r5, r3
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003992:	4629      	mov	r1, r5
 8003994:	028b      	lsls	r3, r1, #10
 8003996:	4621      	mov	r1, r4
 8003998:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800399c:	4621      	mov	r1, r4
 800399e:	028a      	lsls	r2, r1, #10
 80039a0:	4610      	mov	r0, r2
 80039a2:	4619      	mov	r1, r3
 80039a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a6:	2200      	movs	r2, #0
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	61fa      	str	r2, [r7, #28]
 80039ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b0:	f7fc fc0a 	bl	80001c8 <__aeabi_uldivmod>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4613      	mov	r3, r2
 80039ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_GetSysClockFreq+0x200>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	0c1b      	lsrs	r3, r3, #16
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	3301      	adds	r3, #1
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039d6:	e002      	b.n	80039de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80039da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3750      	adds	r7, #80	; 0x50
 80039e4:	46bd      	mov	sp, r7
 80039e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	00f42400 	.word	0x00f42400
 80039f4:	007a1200 	.word	0x007a1200

080039f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000000 	.word	0x20000000

08003a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e041      	b.n	8003aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd f91a 	bl	8000c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f000 fad8 	bl	8004004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e041      	b.n	8003b44 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f839 	bl	8003b4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f000 fa89 	bl	8004004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <HAL_TIM_PWM_Start+0x24>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e022      	b.n	8003bca <HAL_TIM_PWM_Start+0x6a>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d109      	bne.n	8003b9e <HAL_TIM_PWM_Start+0x3e>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	bf14      	ite	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	2300      	moveq	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	e015      	b.n	8003bca <HAL_TIM_PWM_Start+0x6a>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d109      	bne.n	8003bb8 <HAL_TIM_PWM_Start+0x58>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e008      	b.n	8003bca <HAL_TIM_PWM_Start+0x6a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	bf14      	ite	ne
 8003bc4:	2301      	movne	r3, #1
 8003bc6:	2300      	moveq	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e07c      	b.n	8003ccc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_PWM_Start+0x82>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be0:	e013      	b.n	8003c0a <HAL_TIM_PWM_Start+0xaa>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_PWM_Start+0x92>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf0:	e00b      	b.n	8003c0a <HAL_TIM_PWM_Start+0xaa>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d104      	bne.n	8003c02 <HAL_TIM_PWM_Start+0xa2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c00:	e003      	b.n	8003c0a <HAL_TIM_PWM_Start+0xaa>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	6839      	ldr	r1, [r7, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fcec 	bl	80045f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a2d      	ldr	r2, [pc, #180]	; (8003cd4 <HAL_TIM_PWM_Start+0x174>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_TIM_PWM_Start+0xcc>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2c      	ldr	r2, [pc, #176]	; (8003cd8 <HAL_TIM_PWM_Start+0x178>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d101      	bne.n	8003c30 <HAL_TIM_PWM_Start+0xd0>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <HAL_TIM_PWM_Start+0xd2>
 8003c30:	2300      	movs	r3, #0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <HAL_TIM_PWM_Start+0x174>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d022      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x136>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c58:	d01d      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x136>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <HAL_TIM_PWM_Start+0x17c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d018      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x136>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1d      	ldr	r2, [pc, #116]	; (8003ce0 <HAL_TIM_PWM_Start+0x180>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x136>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1c      	ldr	r2, [pc, #112]	; (8003ce4 <HAL_TIM_PWM_Start+0x184>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00e      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x136>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <HAL_TIM_PWM_Start+0x178>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d009      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x136>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <HAL_TIM_PWM_Start+0x188>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x136>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a16      	ldr	r2, [pc, #88]	; (8003cec <HAL_TIM_PWM_Start+0x18c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d111      	bne.n	8003cba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b06      	cmp	r3, #6
 8003ca6:	d010      	beq.n	8003cca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb8:	e007      	b.n	8003cca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	40010400 	.word	0x40010400
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800
 8003ce4:	40000c00 	.word	0x40000c00
 8003ce8:	40014000 	.word	0x40014000
 8003cec:	40001800 	.word	0x40001800

08003cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e0ae      	b.n	8003e6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b0c      	cmp	r3, #12
 8003d1a:	f200 809f 	bhi.w	8003e5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d1e:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d59 	.word	0x08003d59
 8003d28:	08003e5d 	.word	0x08003e5d
 8003d2c:	08003e5d 	.word	0x08003e5d
 8003d30:	08003e5d 	.word	0x08003e5d
 8003d34:	08003d99 	.word	0x08003d99
 8003d38:	08003e5d 	.word	0x08003e5d
 8003d3c:	08003e5d 	.word	0x08003e5d
 8003d40:	08003e5d 	.word	0x08003e5d
 8003d44:	08003ddb 	.word	0x08003ddb
 8003d48:	08003e5d 	.word	0x08003e5d
 8003d4c:	08003e5d 	.word	0x08003e5d
 8003d50:	08003e5d 	.word	0x08003e5d
 8003d54:	08003e1b 	.word	0x08003e1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f9fc 	bl	800415c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0208 	orr.w	r2, r2, #8
 8003d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0204 	bic.w	r2, r2, #4
 8003d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6999      	ldr	r1, [r3, #24]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	619a      	str	r2, [r3, #24]
      break;
 8003d96:	e064      	b.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fa4c 	bl	800423c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6999      	ldr	r1, [r3, #24]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	021a      	lsls	r2, r3, #8
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	619a      	str	r2, [r3, #24]
      break;
 8003dd8:	e043      	b.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 faa1 	bl	8004328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0208 	orr.w	r2, r2, #8
 8003df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0204 	bic.w	r2, r2, #4
 8003e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69d9      	ldr	r1, [r3, #28]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	61da      	str	r2, [r3, #28]
      break;
 8003e18:	e023      	b.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 faf5 	bl	8004410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69da      	ldr	r2, [r3, #28]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69d9      	ldr	r1, [r3, #28]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	021a      	lsls	r2, r3, #8
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	61da      	str	r2, [r3, #28]
      break;
 8003e5a:	e002      	b.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIM_ConfigClockSource+0x1c>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e0b4      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x186>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ec8:	d03e      	beq.n	8003f48 <HAL_TIM_ConfigClockSource+0xd4>
 8003eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ece:	f200 8087 	bhi.w	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed6:	f000 8086 	beq.w	8003fe6 <HAL_TIM_ConfigClockSource+0x172>
 8003eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ede:	d87f      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee0:	2b70      	cmp	r3, #112	; 0x70
 8003ee2:	d01a      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0xa6>
 8003ee4:	2b70      	cmp	r3, #112	; 0x70
 8003ee6:	d87b      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee8:	2b60      	cmp	r3, #96	; 0x60
 8003eea:	d050      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x11a>
 8003eec:	2b60      	cmp	r3, #96	; 0x60
 8003eee:	d877      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef0:	2b50      	cmp	r3, #80	; 0x50
 8003ef2:	d03c      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0xfa>
 8003ef4:	2b50      	cmp	r3, #80	; 0x50
 8003ef6:	d873      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	d058      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x13a>
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d86f      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f00:	2b30      	cmp	r3, #48	; 0x30
 8003f02:	d064      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x15a>
 8003f04:	2b30      	cmp	r3, #48	; 0x30
 8003f06:	d86b      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d060      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x15a>
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d867      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d05c      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x15a>
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d05a      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x15a>
 8003f18:	e062      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f2a:	f000 fb41 	bl	80045b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	609a      	str	r2, [r3, #8]
      break;
 8003f46:	e04f      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f58:	f000 fb2a 	bl	80045b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f6a:	609a      	str	r2, [r3, #8]
      break;
 8003f6c:	e03c      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f000 fa9e 	bl	80044bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2150      	movs	r1, #80	; 0x50
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 faf7 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8003f8c:	e02c      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f000 fabd 	bl	800451a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2160      	movs	r1, #96	; 0x60
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fae7 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8003fac:	e01c      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f000 fa7e 	bl	80044bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2140      	movs	r1, #64	; 0x40
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fad7 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8003fcc:	e00c      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f000 face 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8003fde:	e003      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe4:	e000      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a46      	ldr	r2, [pc, #280]	; (8004130 <TIM_Base_SetConfig+0x12c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d013      	beq.n	8004044 <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004022:	d00f      	beq.n	8004044 <TIM_Base_SetConfig+0x40>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a43      	ldr	r2, [pc, #268]	; (8004134 <TIM_Base_SetConfig+0x130>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00b      	beq.n	8004044 <TIM_Base_SetConfig+0x40>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a42      	ldr	r2, [pc, #264]	; (8004138 <TIM_Base_SetConfig+0x134>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d007      	beq.n	8004044 <TIM_Base_SetConfig+0x40>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a41      	ldr	r2, [pc, #260]	; (800413c <TIM_Base_SetConfig+0x138>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d003      	beq.n	8004044 <TIM_Base_SetConfig+0x40>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a40      	ldr	r2, [pc, #256]	; (8004140 <TIM_Base_SetConfig+0x13c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d108      	bne.n	8004056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a35      	ldr	r2, [pc, #212]	; (8004130 <TIM_Base_SetConfig+0x12c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d02b      	beq.n	80040b6 <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004064:	d027      	beq.n	80040b6 <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a32      	ldr	r2, [pc, #200]	; (8004134 <TIM_Base_SetConfig+0x130>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d023      	beq.n	80040b6 <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a31      	ldr	r2, [pc, #196]	; (8004138 <TIM_Base_SetConfig+0x134>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01f      	beq.n	80040b6 <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a30      	ldr	r2, [pc, #192]	; (800413c <TIM_Base_SetConfig+0x138>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01b      	beq.n	80040b6 <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2f      	ldr	r2, [pc, #188]	; (8004140 <TIM_Base_SetConfig+0x13c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d017      	beq.n	80040b6 <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a2e      	ldr	r2, [pc, #184]	; (8004144 <TIM_Base_SetConfig+0x140>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d013      	beq.n	80040b6 <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a2d      	ldr	r2, [pc, #180]	; (8004148 <TIM_Base_SetConfig+0x144>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00f      	beq.n	80040b6 <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a2c      	ldr	r2, [pc, #176]	; (800414c <TIM_Base_SetConfig+0x148>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00b      	beq.n	80040b6 <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a2b      	ldr	r2, [pc, #172]	; (8004150 <TIM_Base_SetConfig+0x14c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d007      	beq.n	80040b6 <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a2a      	ldr	r2, [pc, #168]	; (8004154 <TIM_Base_SetConfig+0x150>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d003      	beq.n	80040b6 <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a29      	ldr	r2, [pc, #164]	; (8004158 <TIM_Base_SetConfig+0x154>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d108      	bne.n	80040c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a10      	ldr	r2, [pc, #64]	; (8004130 <TIM_Base_SetConfig+0x12c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_Base_SetConfig+0xf8>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a12      	ldr	r2, [pc, #72]	; (8004140 <TIM_Base_SetConfig+0x13c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d103      	bne.n	8004104 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d105      	bne.n	8004122 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f023 0201 	bic.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	611a      	str	r2, [r3, #16]
  }
}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40010000 	.word	0x40010000
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40000c00 	.word	0x40000c00
 8004140:	40010400 	.word	0x40010400
 8004144:	40014000 	.word	0x40014000
 8004148:	40014400 	.word	0x40014400
 800414c:	40014800 	.word	0x40014800
 8004150:	40001800 	.word	0x40001800
 8004154:	40001c00 	.word	0x40001c00
 8004158:	40002000 	.word	0x40002000

0800415c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f023 0201 	bic.w	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 0302 	bic.w	r3, r3, #2
 80041a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a20      	ldr	r2, [pc, #128]	; (8004234 <TIM_OC1_SetConfig+0xd8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d003      	beq.n	80041c0 <TIM_OC1_SetConfig+0x64>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <TIM_OC1_SetConfig+0xdc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10c      	bne.n	80041da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f023 0308 	bic.w	r3, r3, #8
 80041c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f023 0304 	bic.w	r3, r3, #4
 80041d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a15      	ldr	r2, [pc, #84]	; (8004234 <TIM_OC1_SetConfig+0xd8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_OC1_SetConfig+0x8e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a14      	ldr	r2, [pc, #80]	; (8004238 <TIM_OC1_SetConfig+0xdc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d111      	bne.n	800420e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	621a      	str	r2, [r3, #32]
}
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40010000 	.word	0x40010000
 8004238:	40010400 	.word	0x40010400

0800423c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f023 0210 	bic.w	r2, r3, #16
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0320 	bic.w	r3, r3, #32
 8004286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a22      	ldr	r2, [pc, #136]	; (8004320 <TIM_OC2_SetConfig+0xe4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_OC2_SetConfig+0x68>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a21      	ldr	r2, [pc, #132]	; (8004324 <TIM_OC2_SetConfig+0xe8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d10d      	bne.n	80042c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a17      	ldr	r2, [pc, #92]	; (8004320 <TIM_OC2_SetConfig+0xe4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d003      	beq.n	80042d0 <TIM_OC2_SetConfig+0x94>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a16      	ldr	r2, [pc, #88]	; (8004324 <TIM_OC2_SetConfig+0xe8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d113      	bne.n	80042f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40010000 	.word	0x40010000
 8004324:	40010400 	.word	0x40010400

08004328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a21      	ldr	r2, [pc, #132]	; (8004408 <TIM_OC3_SetConfig+0xe0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d003      	beq.n	800438e <TIM_OC3_SetConfig+0x66>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a20      	ldr	r2, [pc, #128]	; (800440c <TIM_OC3_SetConfig+0xe4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d10d      	bne.n	80043aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a16      	ldr	r2, [pc, #88]	; (8004408 <TIM_OC3_SetConfig+0xe0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_OC3_SetConfig+0x92>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <TIM_OC3_SetConfig+0xe4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d113      	bne.n	80043e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	621a      	str	r2, [r3, #32]
}
 80043fc:	bf00      	nop
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40010000 	.word	0x40010000
 800440c:	40010400 	.word	0x40010400

08004410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800445a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	031b      	lsls	r3, r3, #12
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a12      	ldr	r2, [pc, #72]	; (80044b4 <TIM_OC4_SetConfig+0xa4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_OC4_SetConfig+0x68>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a11      	ldr	r2, [pc, #68]	; (80044b8 <TIM_OC4_SetConfig+0xa8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d109      	bne.n	800448c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800447e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	019b      	lsls	r3, r3, #6
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40010000 	.word	0x40010000
 80044b8:	40010400 	.word	0x40010400

080044bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	f023 0201 	bic.w	r2, r3, #1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f023 030a 	bic.w	r3, r3, #10
 80044f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	621a      	str	r2, [r3, #32]
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800451a:	b480      	push	{r7}
 800451c:	b087      	sub	sp, #28
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	f023 0210 	bic.w	r2, r3, #16
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004544:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	031b      	lsls	r3, r3, #12
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004556:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	f043 0307 	orr.w	r3, r3, #7
 800459c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	609a      	str	r2, [r3, #8]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	021a      	lsls	r2, r3, #8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	609a      	str	r2, [r3, #8]
}
 80045e4:	bf00      	nop
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	2201      	movs	r2, #1
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a1a      	ldr	r2, [r3, #32]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	43db      	mvns	r3, r3
 8004612:	401a      	ands	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a1a      	ldr	r2, [r3, #32]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f003 031f 	and.w	r3, r3, #31
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	fa01 f303 	lsl.w	r3, r1, r3
 8004628:	431a      	orrs	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004650:	2302      	movs	r3, #2
 8004652:	e05a      	b.n	800470a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a21      	ldr	r2, [pc, #132]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d022      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a0:	d01d      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1d      	ldr	r2, [pc, #116]	; (800471c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d018      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1a      	ldr	r2, [pc, #104]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00e      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a18      	ldr	r2, [pc, #96]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d009      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a17      	ldr	r2, [pc, #92]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a15      	ldr	r2, [pc, #84]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d10c      	bne.n	80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000
 800471c:	40000400 	.word	0x40000400
 8004720:	40000800 	.word	0x40000800
 8004724:	40000c00 	.word	0x40000c00
 8004728:	40010400 	.word	0x40010400
 800472c:	40014000 	.word	0x40014000
 8004730:	40001800 	.word	0x40001800

08004734 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004734:	b084      	sub	sp, #16
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	f107 001c 	add.w	r0, r7, #28
 8004742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004746:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800474a:	2b01      	cmp	r3, #1
 800474c:	d123      	bne.n	8004796 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004776:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800477a:	2b01      	cmp	r3, #1
 800477c:	d105      	bne.n	800478a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f001 fae2 	bl	8005d54 <USB_CoreReset>
 8004790:	4603      	mov	r3, r0
 8004792:	73fb      	strb	r3, [r7, #15]
 8004794:	e01b      	b.n	80047ce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f001 fad6 	bl	8005d54 <USB_CoreReset>
 80047a8:	4603      	mov	r3, r0
 80047aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
 80047c0:	e005      	b.n	80047ce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047ce:	7fbb      	ldrb	r3, [r7, #30]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d10b      	bne.n	80047ec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f043 0206 	orr.w	r2, r3, #6
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f043 0220 	orr.w	r2, r3, #32
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047f8:	b004      	add	sp, #16
 80047fa:	4770      	bx	lr

080047fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	4613      	mov	r3, r2
 8004808:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	2b02      	cmp	r3, #2
 800480e:	d165      	bne.n	80048dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4a41      	ldr	r2, [pc, #260]	; (8004918 <USB_SetTurnaroundTime+0x11c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d906      	bls.n	8004826 <USB_SetTurnaroundTime+0x2a>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4a40      	ldr	r2, [pc, #256]	; (800491c <USB_SetTurnaroundTime+0x120>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d202      	bcs.n	8004826 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004820:	230f      	movs	r3, #15
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	e062      	b.n	80048ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4a3c      	ldr	r2, [pc, #240]	; (800491c <USB_SetTurnaroundTime+0x120>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d306      	bcc.n	800483c <USB_SetTurnaroundTime+0x40>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4a3b      	ldr	r2, [pc, #236]	; (8004920 <USB_SetTurnaroundTime+0x124>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d202      	bcs.n	800483c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004836:	230e      	movs	r3, #14
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	e057      	b.n	80048ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4a38      	ldr	r2, [pc, #224]	; (8004920 <USB_SetTurnaroundTime+0x124>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d306      	bcc.n	8004852 <USB_SetTurnaroundTime+0x56>
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4a37      	ldr	r2, [pc, #220]	; (8004924 <USB_SetTurnaroundTime+0x128>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d202      	bcs.n	8004852 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800484c:	230d      	movs	r3, #13
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	e04c      	b.n	80048ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	4a33      	ldr	r2, [pc, #204]	; (8004924 <USB_SetTurnaroundTime+0x128>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d306      	bcc.n	8004868 <USB_SetTurnaroundTime+0x6c>
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	4a32      	ldr	r2, [pc, #200]	; (8004928 <USB_SetTurnaroundTime+0x12c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d802      	bhi.n	8004868 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004862:	230c      	movs	r3, #12
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	e041      	b.n	80048ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4a2f      	ldr	r2, [pc, #188]	; (8004928 <USB_SetTurnaroundTime+0x12c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d906      	bls.n	800487e <USB_SetTurnaroundTime+0x82>
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4a2e      	ldr	r2, [pc, #184]	; (800492c <USB_SetTurnaroundTime+0x130>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d802      	bhi.n	800487e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004878:	230b      	movs	r3, #11
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	e036      	b.n	80048ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4a2a      	ldr	r2, [pc, #168]	; (800492c <USB_SetTurnaroundTime+0x130>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d906      	bls.n	8004894 <USB_SetTurnaroundTime+0x98>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	4a29      	ldr	r2, [pc, #164]	; (8004930 <USB_SetTurnaroundTime+0x134>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d802      	bhi.n	8004894 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800488e:	230a      	movs	r3, #10
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	e02b      	b.n	80048ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4a26      	ldr	r2, [pc, #152]	; (8004930 <USB_SetTurnaroundTime+0x134>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d906      	bls.n	80048aa <USB_SetTurnaroundTime+0xae>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4a25      	ldr	r2, [pc, #148]	; (8004934 <USB_SetTurnaroundTime+0x138>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d202      	bcs.n	80048aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80048a4:	2309      	movs	r3, #9
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	e020      	b.n	80048ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4a21      	ldr	r2, [pc, #132]	; (8004934 <USB_SetTurnaroundTime+0x138>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d306      	bcc.n	80048c0 <USB_SetTurnaroundTime+0xc4>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4a20      	ldr	r2, [pc, #128]	; (8004938 <USB_SetTurnaroundTime+0x13c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d802      	bhi.n	80048c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80048ba:	2308      	movs	r3, #8
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	e015      	b.n	80048ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <USB_SetTurnaroundTime+0x13c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d906      	bls.n	80048d6 <USB_SetTurnaroundTime+0xda>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4a1c      	ldr	r2, [pc, #112]	; (800493c <USB_SetTurnaroundTime+0x140>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d202      	bcs.n	80048d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80048d0:	2307      	movs	r3, #7
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	e00a      	b.n	80048ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80048d6:	2306      	movs	r3, #6
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	e007      	b.n	80048ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80048e2:	2309      	movs	r3, #9
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	e001      	b.n	80048ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80048e8:	2309      	movs	r3, #9
 80048ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	029b      	lsls	r3, r3, #10
 8004900:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004904:	431a      	orrs	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	00d8acbf 	.word	0x00d8acbf
 800491c:	00e4e1c0 	.word	0x00e4e1c0
 8004920:	00f42400 	.word	0x00f42400
 8004924:	01067380 	.word	0x01067380
 8004928:	011a499f 	.word	0x011a499f
 800492c:	01312cff 	.word	0x01312cff
 8004930:	014ca43f 	.word	0x014ca43f
 8004934:	016e3600 	.word	0x016e3600
 8004938:	01a6ab1f 	.word	0x01a6ab1f
 800493c:	01e84800 	.word	0x01e84800

08004940 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f043 0201 	orr.w	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f023 0201 	bic.w	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d115      	bne.n	80049d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049b2:	200a      	movs	r0, #10
 80049b4:	f7fc fa9a 	bl	8000eec <HAL_Delay>
      ms += 10U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	330a      	adds	r3, #10
 80049bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f001 f939 	bl	8005c36 <USB_GetMode>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d01e      	beq.n	8004a08 <USB_SetCurrentMode+0x84>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2bc7      	cmp	r3, #199	; 0xc7
 80049ce:	d9f0      	bls.n	80049b2 <USB_SetCurrentMode+0x2e>
 80049d0:	e01a      	b.n	8004a08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d115      	bne.n	8004a04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049e4:	200a      	movs	r0, #10
 80049e6:	f7fc fa81 	bl	8000eec <HAL_Delay>
      ms += 10U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	330a      	adds	r3, #10
 80049ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f001 f920 	bl	8005c36 <USB_GetMode>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <USB_SetCurrentMode+0x84>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2bc7      	cmp	r3, #199	; 0xc7
 8004a00:	d9f0      	bls.n	80049e4 <USB_SetCurrentMode+0x60>
 8004a02:	e001      	b.n	8004a08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e005      	b.n	8004a14 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2bc8      	cmp	r3, #200	; 0xc8
 8004a0c:	d101      	bne.n	8004a12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b086      	sub	sp, #24
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a36:	2300      	movs	r3, #0
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	e009      	b.n	8004a50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	3340      	adds	r3, #64	; 0x40
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	2200      	movs	r2, #0
 8004a48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2b0e      	cmp	r3, #14
 8004a54:	d9f2      	bls.n	8004a3c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a56:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11c      	bne.n	8004a98 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a6c:	f043 0302 	orr.w	r3, r3, #2
 8004a70:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
 8004a96:	e00b      	b.n	8004ab0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2300      	movs	r3, #0
 8004aba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004abc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d10d      	bne.n	8004ae0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d104      	bne.n	8004ad6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004acc:	2100      	movs	r1, #0
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f968 	bl	8004da4 <USB_SetDevSpeed>
 8004ad4:	e008      	b.n	8004ae8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f963 	bl	8004da4 <USB_SetDevSpeed>
 8004ade:	e003      	b.n	8004ae8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ae0:	2103      	movs	r1, #3
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f95e 	bl	8004da4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ae8:	2110      	movs	r1, #16
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f8fa 	bl	8004ce4 <USB_FlushTxFifo>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f924 	bl	8004d48 <USB_FlushRxFifo>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b10:	461a      	mov	r2, r3
 8004b12:	2300      	movs	r3, #0
 8004b14:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	2300      	movs	r3, #0
 8004b20:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b2e:	2300      	movs	r3, #0
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	e043      	b.n	8004bbc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b4a:	d118      	bne.n	8004b7e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	e013      	b.n	8004b90 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	461a      	mov	r2, r3
 8004b76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	e008      	b.n	8004b90 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d3b5      	bcc.n	8004b34 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	e043      	b.n	8004c56 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004be4:	d118      	bne.n	8004c18 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	e013      	b.n	8004c2a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	e008      	b.n	8004c2a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	461a      	mov	r2, r3
 8004c26:	2300      	movs	r3, #0
 8004c28:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c36:	461a      	mov	r2, r3
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	3301      	adds	r3, #1
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d3b5      	bcc.n	8004bce <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c74:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c82:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	f043 0210 	orr.w	r2, r3, #16
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699a      	ldr	r2, [r3, #24]
 8004c9c:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <USB_DevInit+0x2c4>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ca4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f043 0208 	orr.w	r2, r3, #8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cb8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d107      	bne.n	8004cd0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cc8:	f043 0304 	orr.w	r3, r3, #4
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cdc:	b004      	add	sp, #16
 8004cde:	4770      	bx	lr
 8004ce0:	803c3800 	.word	0x803c3800

08004ce4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004cfe:	d901      	bls.n	8004d04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e01b      	b.n	8004d3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	daf2      	bge.n	8004cf2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	019b      	lsls	r3, r3, #6
 8004d14:	f043 0220 	orr.w	r2, r3, #32
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d28:	d901      	bls.n	8004d2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e006      	b.n	8004d3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d0f0      	beq.n	8004d1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3301      	adds	r3, #1
 8004d58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d60:	d901      	bls.n	8004d66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e018      	b.n	8004d98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	daf2      	bge.n	8004d54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2210      	movs	r2, #16
 8004d76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d84:	d901      	bls.n	8004d8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e006      	b.n	8004d98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d0f0      	beq.n	8004d78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	68f9      	ldr	r1, [r7, #12]
 8004dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b087      	sub	sp, #28
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0306 	and.w	r3, r3, #6
 8004dee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d102      	bne.n	8004dfc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004df6:	2300      	movs	r3, #0
 8004df8:	75fb      	strb	r3, [r7, #23]
 8004dfa:	e00a      	b.n	8004e12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d002      	beq.n	8004e08 <USB_GetDevSpeed+0x32>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b06      	cmp	r3, #6
 8004e06:	d102      	bne.n	8004e0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	75fb      	strb	r3, [r7, #23]
 8004e0c:	e001      	b.n	8004e12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e0e:	230f      	movs	r3, #15
 8004e10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	785b      	ldrb	r3, [r3, #1]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d13a      	bne.n	8004eb2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	68f9      	ldr	r1, [r7, #12]
 8004e56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d155      	bne.n	8004f20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	791b      	ldrb	r3, [r3, #4]
 8004e8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	059b      	lsls	r3, r3, #22
 8004e96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	0151      	lsls	r1, r2, #5
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	440a      	add	r2, r1
 8004ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	e036      	b.n	8004f20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb8:	69da      	ldr	r2, [r3, #28]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec8:	041b      	lsls	r3, r3, #16
 8004eca:	68f9      	ldr	r1, [r7, #12]
 8004ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d11a      	bne.n	8004f20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	791b      	ldrb	r3, [r3, #4]
 8004f04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f06:	430b      	orrs	r3, r1
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
	...

08004f30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d161      	bne.n	8005010 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f62:	d11f      	bne.n	8004fa4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	0151      	lsls	r1, r2, #5
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	440a      	add	r2, r1
 8004f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fa2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	68f9      	ldr	r1, [r7, #12]
 8004fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	2101      	movs	r1, #1
 8004fda:	fa01 f303 	lsl.w	r3, r1, r3
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	68f9      	ldr	r1, [r7, #12]
 8004fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fe8:	4013      	ands	r3, r2
 8004fea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	0159      	lsls	r1, r3, #5
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	440b      	add	r3, r1
 8005002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005006:	4619      	mov	r1, r3
 8005008:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <USB_DeactivateEndpoint+0x1b0>)
 800500a:	4013      	ands	r3, r2
 800500c:	600b      	str	r3, [r1, #0]
 800500e:	e060      	b.n	80050d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005026:	d11f      	bne.n	8005068 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	440a      	add	r2, r1
 800503e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005042:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005046:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005062:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005066:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	2101      	movs	r1, #1
 800507a:	fa01 f303 	lsl.w	r3, r1, r3
 800507e:	041b      	lsls	r3, r3, #16
 8005080:	43db      	mvns	r3, r3
 8005082:	68f9      	ldr	r1, [r7, #12]
 8005084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005088:	4013      	ands	r3, r2
 800508a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005092:	69da      	ldr	r2, [r3, #28]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	2101      	movs	r1, #1
 800509e:	fa01 f303 	lsl.w	r3, r1, r3
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	43db      	mvns	r3, r3
 80050a6:	68f9      	ldr	r1, [r7, #12]
 80050a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050ac:	4013      	ands	r3, r2
 80050ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	0159      	lsls	r1, r3, #5
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	440b      	add	r3, r1
 80050c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ca:	4619      	mov	r1, r3
 80050cc:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <USB_DeactivateEndpoint+0x1b4>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	ec337800 	.word	0xec337800
 80050e4:	eff37800 	.word	0xeff37800

080050e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	; 0x28
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	4613      	mov	r3, r2
 80050f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	785b      	ldrb	r3, [r3, #1]
 8005104:	2b01      	cmp	r3, #1
 8005106:	f040 817a 	bne.w	80053fe <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d132      	bne.n	8005178 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	440a      	add	r2, r1
 8005128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005130:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005134:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	0151      	lsls	r1, r2, #5
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	440a      	add	r2, r1
 800514c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005150:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005154:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	440a      	add	r2, r1
 800516c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005170:	0cdb      	lsrs	r3, r3, #19
 8005172:	04db      	lsls	r3, r3, #19
 8005174:	6113      	str	r3, [r2, #16]
 8005176:	e092      	b.n	800529e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	0151      	lsls	r1, r2, #5
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	440a      	add	r2, r1
 800518e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005192:	0cdb      	lsrs	r3, r3, #19
 8005194:	04db      	lsls	r3, r3, #19
 8005196:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051ba:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d11a      	bne.n	80051f8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d903      	bls.n	80051d6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051f4:	6113      	str	r3, [r2, #16]
 80051f6:	e01b      	b.n	8005230 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005204:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	6919      	ldr	r1, [r3, #16]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	440b      	add	r3, r1
 8005210:	1e59      	subs	r1, r3, #1
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	fbb1 f3f3 	udiv	r3, r1, r3
 800521a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800521c:	4ba2      	ldr	r3, [pc, #648]	; (80054a8 <USB_EPStartXfer+0x3c0>)
 800521e:	400b      	ands	r3, r1
 8005220:	69b9      	ldr	r1, [r7, #24]
 8005222:	0148      	lsls	r0, r1, #5
 8005224:	69f9      	ldr	r1, [r7, #28]
 8005226:	4401      	add	r1, r0
 8005228:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800522c:	4313      	orrs	r3, r2
 800522e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005246:	69b9      	ldr	r1, [r7, #24]
 8005248:	0148      	lsls	r0, r1, #5
 800524a:	69f9      	ldr	r1, [r7, #28]
 800524c:	4401      	add	r1, r0
 800524e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005252:	4313      	orrs	r3, r2
 8005254:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	791b      	ldrb	r3, [r3, #4]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d11f      	bne.n	800529e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005278:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800527c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	0151      	lsls	r1, r2, #5
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	440a      	add	r2, r1
 8005294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005298:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800529c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d14b      	bne.n	800533c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d009      	beq.n	80052c0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	461a      	mov	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	791b      	ldrb	r3, [r3, #4]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d128      	bne.n	800531a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d110      	bne.n	80052fa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	0151      	lsls	r1, r2, #5
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	440a      	add	r2, r1
 80052ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	e00f      	b.n	800531a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005318:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	440a      	add	r2, r1
 8005330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005334:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e165      	b.n	8005608 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	0151      	lsls	r1, r2, #5
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	440a      	add	r2, r1
 8005352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005356:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800535a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	791b      	ldrb	r3, [r3, #4]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d015      	beq.n	8005390 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 814d 	beq.w	8005608 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	2101      	movs	r1, #1
 8005380:	fa01 f303 	lsl.w	r3, r1, r3
 8005384:	69f9      	ldr	r1, [r7, #28]
 8005386:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800538a:	4313      	orrs	r3, r2
 800538c:	634b      	str	r3, [r1, #52]	; 0x34
 800538e:	e13b      	b.n	8005608 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539c:	2b00      	cmp	r3, #0
 800539e:	d110      	bne.n	80053c2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	0151      	lsls	r1, r2, #5
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	440a      	add	r2, r1
 80053b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	e00f      	b.n	80053e2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	0151      	lsls	r1, r2, #5
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	440a      	add	r2, r1
 80053d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	68d9      	ldr	r1, [r3, #12]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	781a      	ldrb	r2, [r3, #0]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	b298      	uxth	r0, r3
 80053f0:	79fb      	ldrb	r3, [r7, #7]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	4603      	mov	r3, r0
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f9b8 	bl	800576c <USB_WritePacket>
 80053fc:	e104      	b.n	8005608 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	0151      	lsls	r1, r2, #5
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	440a      	add	r2, r1
 8005414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005418:	0cdb      	lsrs	r3, r3, #19
 800541a:	04db      	lsls	r3, r3, #19
 800541c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	0151      	lsls	r1, r2, #5
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	440a      	add	r2, r1
 8005434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005438:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800543c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005440:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d131      	bne.n	80054ac <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005476:	69b9      	ldr	r1, [r7, #24]
 8005478:	0148      	lsls	r0, r1, #5
 800547a:	69f9      	ldr	r1, [r7, #28]
 800547c:	4401      	add	r1, r0
 800547e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005482:	4313      	orrs	r3, r2
 8005484:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	0151      	lsls	r1, r2, #5
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	440a      	add	r2, r1
 800549c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054a4:	6113      	str	r3, [r2, #16]
 80054a6:	e061      	b.n	800556c <USB_EPStartXfer+0x484>
 80054a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d123      	bne.n	80054fc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ca:	69b9      	ldr	r1, [r7, #24]
 80054cc:	0148      	lsls	r0, r1, #5
 80054ce:	69f9      	ldr	r1, [r7, #28]
 80054d0:	4401      	add	r1, r0
 80054d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054d6:	4313      	orrs	r3, r2
 80054d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	69fa      	ldr	r2, [r7, #28]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054f8:	6113      	str	r3, [r2, #16]
 80054fa:	e037      	b.n	800556c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	4413      	add	r3, r2
 8005506:	1e5a      	subs	r2, r3, #1
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005510:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	8afa      	ldrh	r2, [r7, #22]
 8005518:	fb03 f202 	mul.w	r2, r3, r2
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	8afb      	ldrh	r3, [r7, #22]
 8005530:	04d9      	lsls	r1, r3, #19
 8005532:	4b38      	ldr	r3, [pc, #224]	; (8005614 <USB_EPStartXfer+0x52c>)
 8005534:	400b      	ands	r3, r1
 8005536:	69b9      	ldr	r1, [r7, #24]
 8005538:	0148      	lsls	r0, r1, #5
 800553a:	69f9      	ldr	r1, [r7, #28]
 800553c:	4401      	add	r1, r0
 800553e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005542:	4313      	orrs	r3, r2
 8005544:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800555c:	69b9      	ldr	r1, [r7, #24]
 800555e:	0148      	lsls	r0, r1, #5
 8005560:	69f9      	ldr	r1, [r7, #28]
 8005562:	4401      	add	r1, r0
 8005564:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005568:	4313      	orrs	r3, r2
 800556a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d10d      	bne.n	800558e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	68d9      	ldr	r1, [r3, #12]
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	460a      	mov	r2, r1
 800558c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	791b      	ldrb	r3, [r3, #4]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d128      	bne.n	80055e8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d110      	bne.n	80055c8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	e00f      	b.n	80055e8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	0151      	lsls	r1, r2, #5
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	440a      	add	r2, r1
 80055de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005602:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005606:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	1ff80000 	.word	0x1ff80000

08005618 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	785b      	ldrb	r3, [r3, #1]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d14a      	bne.n	80056cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800564a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800564e:	f040 8086 	bne.w	800575e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	7812      	ldrb	r2, [r2, #0]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005670:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005674:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	7812      	ldrb	r2, [r2, #0]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005694:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005698:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3301      	adds	r3, #1
 800569e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d902      	bls.n	80056b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	75fb      	strb	r3, [r7, #23]
          break;
 80056ae:	e056      	b.n	800575e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056c8:	d0e7      	beq.n	800569a <USB_EPStopXfer+0x82>
 80056ca:	e048      	b.n	800575e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056e4:	d13b      	bne.n	800575e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	7812      	ldrb	r2, [r2, #0]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005704:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005708:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	7812      	ldrb	r2, [r2, #0]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	440a      	add	r2, r1
 8005724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005728:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800572c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3301      	adds	r3, #1
 8005732:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f242 7210 	movw	r2, #10000	; 0x2710
 800573a:	4293      	cmp	r3, r2
 800573c:	d902      	bls.n	8005744 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	75fb      	strb	r3, [r7, #23]
          break;
 8005742:	e00c      	b.n	800575e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800575c:	d0e7      	beq.n	800572e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800575e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005760:	4618      	mov	r0, r3
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800576c:	b480      	push	{r7}
 800576e:	b089      	sub	sp, #36	; 0x24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	4611      	mov	r1, r2
 8005778:	461a      	mov	r2, r3
 800577a:	460b      	mov	r3, r1
 800577c:	71fb      	strb	r3, [r7, #7]
 800577e:	4613      	mov	r3, r2
 8005780:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800578a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800578e:	2b00      	cmp	r3, #0
 8005790:	d123      	bne.n	80057da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005792:	88bb      	ldrh	r3, [r7, #4]
 8005794:	3303      	adds	r3, #3
 8005796:	089b      	lsrs	r3, r3, #2
 8005798:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800579a:	2300      	movs	r3, #0
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	e018      	b.n	80057d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057a0:	79fb      	ldrb	r3, [r7, #7]
 80057a2:	031a      	lsls	r2, r3, #12
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ac:	461a      	mov	r2, r3
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	3301      	adds	r3, #1
 80057b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3301      	adds	r3, #1
 80057be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	3301      	adds	r3, #1
 80057c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	3301      	adds	r3, #1
 80057ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	3301      	adds	r3, #1
 80057d0:	61bb      	str	r3, [r7, #24]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d3e2      	bcc.n	80057a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3724      	adds	r7, #36	; 0x24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b08b      	sub	sp, #44	; 0x2c
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	089b      	lsrs	r3, r3, #2
 8005802:	b29b      	uxth	r3, r3
 8005804:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	f003 0303 	and.w	r3, r3, #3
 800580c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800580e:	2300      	movs	r3, #0
 8005810:	623b      	str	r3, [r7, #32]
 8005812:	e014      	b.n	800583e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	3301      	adds	r3, #1
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	3301      	adds	r3, #1
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	3301      	adds	r3, #1
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	3301      	adds	r3, #1
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	3301      	adds	r3, #1
 800583c:	623b      	str	r3, [r7, #32]
 800583e:	6a3a      	ldr	r2, [r7, #32]
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	429a      	cmp	r2, r3
 8005844:	d3e6      	bcc.n	8005814 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005846:	8bfb      	ldrh	r3, [r7, #30]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01e      	beq.n	800588a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005856:	461a      	mov	r2, r3
 8005858:	f107 0310 	add.w	r3, r7, #16
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	fa22 f303 	lsr.w	r3, r2, r3
 800586c:	b2da      	uxtb	r2, r3
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	701a      	strb	r2, [r3, #0]
      i++;
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	3301      	adds	r3, #1
 8005876:	623b      	str	r3, [r7, #32]
      pDest++;
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	3301      	adds	r3, #1
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800587e:	8bfb      	ldrh	r3, [r7, #30]
 8005880:	3b01      	subs	r3, #1
 8005882:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005884:	8bfb      	ldrh	r3, [r7, #30]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1ea      	bne.n	8005860 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800588c:	4618      	mov	r0, r3
 800588e:	372c      	adds	r7, #44	; 0x2c
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d12c      	bne.n	800590e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	db12      	blt.n	80058ec <USB_EPSetStall+0x54>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00f      	beq.n	80058ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	0151      	lsls	r1, r2, #5
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	440a      	add	r2, r1
 80058e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	0151      	lsls	r1, r2, #5
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	440a      	add	r2, r1
 8005902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005906:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	e02b      	b.n	8005966 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	db12      	blt.n	8005946 <USB_EPSetStall+0xae>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00f      	beq.n	8005946 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	0151      	lsls	r1, r2, #5
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	440a      	add	r2, r1
 800593c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005940:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005944:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	0151      	lsls	r1, r2, #5
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	440a      	add	r2, r1
 800595c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005960:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005964:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d128      	bne.n	80059e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	0151      	lsls	r1, r2, #5
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	440a      	add	r2, r1
 80059a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	791b      	ldrb	r3, [r3, #4]
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d003      	beq.n	80059c0 <USB_EPClearStall+0x4c>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	791b      	ldrb	r3, [r3, #4]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d138      	bne.n	8005a32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	e027      	b.n	8005a32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	791b      	ldrb	r3, [r3, #4]
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d003      	beq.n	8005a12 <USB_EPClearStall+0x9e>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	791b      	ldrb	r3, [r3, #4]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d10f      	bne.n	8005a32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a74:	68f9      	ldr	r1, [r7, #12]
 8005a76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aba:	f023 0302 	bic.w	r3, r3, #2
 8005abe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ae8:	f023 0303 	bic.w	r3, r3, #3
 8005aec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005afc:	f043 0302 	orr.w	r3, r3, #2
 8005b00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4013      	ands	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b28:	68fb      	ldr	r3, [r7, #12]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	4013      	ands	r3, r2
 8005b58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	0c1b      	lsrs	r3, r3, #16
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b085      	sub	sp, #20
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	b29b      	uxth	r3, r3
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b087      	sub	sp, #28
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0a:	01db      	lsls	r3, r3, #7
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4013      	ands	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c28:	68bb      	ldr	r3, [r7, #8]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f003 0301 	and.w	r3, r3, #1
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b085      	sub	sp, #20
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c70:	f023 0307 	bic.w	r3, r3, #7
 8005c74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	333c      	adds	r3, #60	; 0x3c
 8005cae:	3304      	adds	r3, #4
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4a26      	ldr	r2, [pc, #152]	; (8005d50 <USB_EP0_OutStart+0xb8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d90a      	bls.n	8005cd2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ccc:	d101      	bne.n	8005cd2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e037      	b.n	8005d42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2300      	movs	r3, #0
 8005cdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d00:	f043 0318 	orr.w	r3, r3, #24
 8005d04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005d18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d1a:	7afb      	ldrb	r3, [r7, #11]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d10f      	bne.n	8005d40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d26:	461a      	mov	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	4f54300a 	.word	0x4f54300a

08005d54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d6c:	d901      	bls.n	8005d72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e01b      	b.n	8005daa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	daf2      	bge.n	8005d60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f043 0201 	orr.w	r2, r3, #1
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d96:	d901      	bls.n	8005d9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e006      	b.n	8005daa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d0f0      	beq.n	8005d8a <USB_CoreReset+0x36>

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005dc4:	2018      	movs	r0, #24
 8005dc6:	f002 fadb 	bl	8008380 <USBD_static_malloc>
 8005dca:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d109      	bne.n	8005de6 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	32b0      	adds	r2, #176	; 0xb0
 8005ddc:	2100      	movs	r1, #0
 8005dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005de2:	2302      	movs	r3, #2
 8005de4:	e08a      	b.n	8005efc <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	32b0      	adds	r2, #176	; 0xb0
 8005df0:	68f9      	ldr	r1, [r7, #12]
 8005df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	32b0      	adds	r2, #176	; 0xb0
 8005e00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	7c1b      	ldrb	r3, [r3, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d11b      	bne.n	8005e4a <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e12:	4b3c      	ldr	r3, [pc, #240]	; (8005f04 <USBD_CUSTOM_HID_Init+0x14c>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	f003 020f 	and.w	r2, r3, #15
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	3326      	adds	r3, #38	; 0x26
 8005e28:	2205      	movs	r2, #5
 8005e2a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e2c:	4b36      	ldr	r3, [pc, #216]	; (8005f08 <USBD_CUSTOM_HID_Init+0x150>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	f003 020f 	and.w	r2, r3, #15
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	4613      	mov	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	440b      	add	r3, r1
 8005e40:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005e44:	2205      	movs	r2, #5
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	e01a      	b.n	8005e80 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005e4a:	4b2e      	ldr	r3, [pc, #184]	; (8005f04 <USBD_CUSTOM_HID_Init+0x14c>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	f003 020f 	and.w	r2, r3, #15
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	440b      	add	r3, r1
 8005e5e:	3326      	adds	r3, #38	; 0x26
 8005e60:	2205      	movs	r2, #5
 8005e62:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005e64:	4b28      	ldr	r3, [pc, #160]	; (8005f08 <USBD_CUSTOM_HID_Init+0x150>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	f003 020f 	and.w	r2, r3, #15
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005e7c:	2205      	movs	r2, #5
 8005e7e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8005e80:	4b20      	ldr	r3, [pc, #128]	; (8005f04 <USBD_CUSTOM_HID_Init+0x14c>)
 8005e82:	7819      	ldrb	r1, [r3, #0]
 8005e84:	2302      	movs	r3, #2
 8005e86:	2203      	movs	r2, #3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f002 f968 	bl	800815e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8005e8e:	4b1d      	ldr	r3, [pc, #116]	; (8005f04 <USBD_CUSTOM_HID_Init+0x14c>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	f003 020f 	and.w	r2, r3, #15
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3324      	adds	r3, #36	; 0x24
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8005ea8:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <USBD_CUSTOM_HID_Init+0x150>)
 8005eaa:	7819      	ldrb	r1, [r3, #0]
 8005eac:	2302      	movs	r3, #2
 8005eae:	2203      	movs	r2, #3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f002 f954 	bl	800815e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8005eb6:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <USBD_CUSTOM_HID_Init+0x150>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f003 020f 	and.w	r2, r3, #15
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ece:	2201      	movs	r2, #1
 8005ed0:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	33b0      	adds	r3, #176	; 0xb0
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <USBD_CUSTOM_HID_Init+0x150>)
 8005eee:	7819      	ldrb	r1, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f002 fa21 	bl	800833c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20000086 	.word	0x20000086
 8005f08:	20000087 	.word	0x20000087

08005f0c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8005f18:	4b37      	ldr	r3, [pc, #220]	; (8005ff8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f002 f943 	bl	80081aa <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8005f24:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f003 020f 	and.w	r2, r3, #15
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	3324      	adds	r3, #36	; 0x24
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8005f3e:	4b2e      	ldr	r3, [pc, #184]	; (8005ff8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f003 020f 	and.w	r2, r3, #15
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	3326      	adds	r3, #38	; 0x26
 8005f54:	2200      	movs	r2, #0
 8005f56:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8005f58:	4b28      	ldr	r3, [pc, #160]	; (8005ffc <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f002 f923 	bl	80081aa <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8005f64:	4b25      	ldr	r3, [pc, #148]	; (8005ffc <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	f003 020f 	and.w	r2, r3, #15
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8005f80:	4b1e      	ldr	r3, [pc, #120]	; (8005ffc <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	f003 020f 	and.w	r2, r3, #15
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005f98:	2200      	movs	r2, #0
 8005f9a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	32b0      	adds	r2, #176	; 0xb0
 8005fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01f      	beq.n	8005fee <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	33b0      	adds	r3, #176	; 0xb0
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	32b0      	adds	r2, #176	; 0xb0
 8005fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f002 f9e3 	bl	800839c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	32b0      	adds	r2, #176	; 0xb0
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	20000086 	.word	0x20000086
 8005ffc:	20000087 	.word	0x20000087

08006000 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	32b0      	adds	r2, #176	; 0xb0
 8006014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006018:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006030:	2303      	movs	r3, #3
 8006032:	e0f8      	b.n	8006226 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800603c:	2b00      	cmp	r3, #0
 800603e:	d056      	beq.n	80060ee <USBD_CUSTOM_HID_Setup+0xee>
 8006040:	2b20      	cmp	r3, #32
 8006042:	f040 80e8 	bne.w	8006216 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	3b02      	subs	r3, #2
 800604c:	2b09      	cmp	r3, #9
 800604e:	d846      	bhi.n	80060de <USBD_CUSTOM_HID_Setup+0xde>
 8006050:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <USBD_CUSTOM_HID_Setup+0x58>)
 8006052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006056:	bf00      	nop
 8006058:	080060b1 	.word	0x080060b1
 800605c:	0800608f 	.word	0x0800608f
 8006060:	080060df 	.word	0x080060df
 8006064:	080060df 	.word	0x080060df
 8006068:	080060df 	.word	0x080060df
 800606c:	080060df 	.word	0x080060df
 8006070:	080060df 	.word	0x080060df
 8006074:	080060c1 	.word	0x080060c1
 8006078:	0800609f 	.word	0x0800609f
 800607c:	08006081 	.word	0x08006081
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	885b      	ldrh	r3, [r3, #2]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	461a      	mov	r2, r3
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	605a      	str	r2, [r3, #4]
          break;
 800608c:	e02e      	b.n	80060ec <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	3304      	adds	r3, #4
 8006092:	2201      	movs	r2, #1
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f001 fccc 	bl	8007a34 <USBD_CtlSendData>
          break;
 800609c:	e026      	b.n	80060ec <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	885b      	ldrh	r3, [r3, #2]
 80060a2:	0a1b      	lsrs	r3, r3, #8
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	609a      	str	r2, [r3, #8]
          break;
 80060ae:	e01d      	b.n	80060ec <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	3308      	adds	r3, #8
 80060b4:	2201      	movs	r2, #1
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f001 fcbb 	bl	8007a34 <USBD_CtlSendData>
          break;
 80060be:	e015      	b.n	80060ec <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	2201      	movs	r2, #1
 80060c4:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80060c6:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	88db      	ldrh	r3, [r3, #6]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	bf28      	it	cs
 80060d0:	2302      	movcs	r3, #2
 80060d2:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80060d4:	461a      	mov	r2, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 fcd8 	bl	8007a8c <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 80060dc:	e006      	b.n	80060ec <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 fc36 	bl	8007952 <USBD_CtlError>
          ret = USBD_FAIL;
 80060e6:	2303      	movs	r3, #3
 80060e8:	75fb      	strb	r3, [r7, #23]
          break;
 80060ea:	bf00      	nop
      }
      break;
 80060ec:	e09a      	b.n	8006224 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	785b      	ldrb	r3, [r3, #1]
 80060f2:	2b0b      	cmp	r3, #11
 80060f4:	f200 8086 	bhi.w	8006204 <USBD_CUSTOM_HID_Setup+0x204>
 80060f8:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <USBD_CUSTOM_HID_Setup+0x100>)
 80060fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fe:	bf00      	nop
 8006100:	08006131 	.word	0x08006131
 8006104:	08006213 	.word	0x08006213
 8006108:	08006205 	.word	0x08006205
 800610c:	08006205 	.word	0x08006205
 8006110:	08006205 	.word	0x08006205
 8006114:	08006205 	.word	0x08006205
 8006118:	0800615b 	.word	0x0800615b
 800611c:	08006205 	.word	0x08006205
 8006120:	08006205 	.word	0x08006205
 8006124:	08006205 	.word	0x08006205
 8006128:	080061b3 	.word	0x080061b3
 800612c:	080061dd 	.word	0x080061dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b03      	cmp	r3, #3
 800613a:	d107      	bne.n	800614c <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800613c:	f107 030e 	add.w	r3, r7, #14
 8006140:	2202      	movs	r2, #2
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 fc75 	bl	8007a34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800614a:	e063      	b.n	8006214 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f001 fbff 	bl	8007952 <USBD_CtlError>
            ret = USBD_FAIL;
 8006154:	2303      	movs	r3, #3
 8006156:	75fb      	strb	r3, [r7, #23]
          break;
 8006158:	e05c      	b.n	8006214 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	885b      	ldrh	r3, [r3, #2]
 800615e:	0a1b      	lsrs	r3, r3, #8
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b22      	cmp	r3, #34	; 0x22
 8006164:	d110      	bne.n	8006188 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	88db      	ldrh	r3, [r3, #6]
 800616a:	2b4a      	cmp	r3, #74	; 0x4a
 800616c:	bf28      	it	cs
 800616e:	234a      	movcs	r3, #74	; 0x4a
 8006170:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	33b0      	adds	r3, #176	; 0xb0
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	e00d      	b.n	80061a4 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	885b      	ldrh	r3, [r3, #2]
 800618c:	0a1b      	lsrs	r3, r3, #8
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b21      	cmp	r3, #33	; 0x21
 8006192:	d107      	bne.n	80061a4 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006194:	4b26      	ldr	r3, [pc, #152]	; (8006230 <USBD_CUSTOM_HID_Setup+0x230>)
 8006196:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	88db      	ldrh	r3, [r3, #6]
 800619c:	2b09      	cmp	r3, #9
 800619e:	bf28      	it	cs
 80061a0:	2309      	movcs	r3, #9
 80061a2:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80061a4:	8bfb      	ldrh	r3, [r7, #30]
 80061a6:	461a      	mov	r2, r3
 80061a8:	69b9      	ldr	r1, [r7, #24]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 fc42 	bl	8007a34 <USBD_CtlSendData>
          break;
 80061b0:	e030      	b.n	8006214 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d107      	bne.n	80061ce <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	330c      	adds	r3, #12
 80061c2:	2201      	movs	r2, #1
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 fc34 	bl	8007a34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061cc:	e022      	b.n	8006214 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f001 fbbe 	bl	8007952 <USBD_CtlError>
            ret = USBD_FAIL;
 80061d6:	2303      	movs	r3, #3
 80061d8:	75fb      	strb	r3, [r7, #23]
          break;
 80061da:	e01b      	b.n	8006214 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d106      	bne.n	80061f6 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	885b      	ldrh	r3, [r3, #2]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061f4:	e00e      	b.n	8006214 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 fbaa 	bl	8007952 <USBD_CtlError>
            ret = USBD_FAIL;
 80061fe:	2303      	movs	r3, #3
 8006200:	75fb      	strb	r3, [r7, #23]
          break;
 8006202:	e007      	b.n	8006214 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 fba3 	bl	8007952 <USBD_CtlError>
          ret = USBD_FAIL;
 800620c:	2303      	movs	r3, #3
 800620e:	75fb      	strb	r3, [r7, #23]
          break;
 8006210:	e000      	b.n	8006214 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006212:	bf00      	nop
      }
      break;
 8006214:	e006      	b.n	8006224 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 fb9a 	bl	8007952 <USBD_CtlError>
      ret = USBD_FAIL;
 800621e:	2303      	movs	r3, #3
 8006220:	75fb      	strb	r3, [r7, #23]
      break;
 8006222:	bf00      	nop
  }
  return (uint8_t)ret;
 8006224:	7dfb      	ldrb	r3, [r7, #23]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3720      	adds	r7, #32
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000070 	.word	0x20000070

08006234 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	4613      	mov	r3, r2
 8006240:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	32b0      	adds	r2, #176	; 0xb0
 800624c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006250:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006258:	2303      	movs	r3, #3
 800625a:	e017      	b.n	800628c <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b03      	cmp	r3, #3
 8006266:	d110      	bne.n	800628a <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	7d1b      	ldrb	r3, [r3, #20]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2201      	movs	r2, #1
 8006274:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006276:	4b07      	ldr	r3, [pc, #28]	; (8006294 <USBD_CUSTOM_HID_SendReport+0x60>)
 8006278:	7819      	ldrb	r1, [r3, #0]
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f002 f83b 	bl	80082fa <USBD_LL_Transmit>
 8006284:	e001      	b.n	800628a <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20000086 	.word	0x20000086

08006298 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80062a0:	2181      	movs	r1, #129	; 0x81
 80062a2:	4815      	ldr	r0, [pc, #84]	; (80062f8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80062a4:	f000 fd1d 	bl	8006ce2 <USBD_GetEpDesc>
 80062a8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80062aa:	2101      	movs	r1, #1
 80062ac:	4812      	ldr	r0, [pc, #72]	; (80062f8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80062ae:	f000 fd18 	bl	8006ce2 <USBD_GetEpDesc>
 80062b2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d009      	beq.n	80062ce <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f042 0202 	orr.w	r2, r2, #2
 80062c2:	711a      	strb	r2, [r3, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2205      	movs	r2, #5
 80062cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d009      	beq.n	80062e8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f042 0202 	orr.w	r2, r2, #2
 80062dc:	711a      	strb	r2, [r3, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2205      	movs	r2, #5
 80062e6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2229      	movs	r2, #41	; 0x29
 80062ec:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80062ee:	4b02      	ldr	r3, [pc, #8]	; (80062f8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000044 	.word	0x20000044

080062fc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006304:	2181      	movs	r1, #129	; 0x81
 8006306:	4815      	ldr	r0, [pc, #84]	; (800635c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006308:	f000 fceb 	bl	8006ce2 <USBD_GetEpDesc>
 800630c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800630e:	2101      	movs	r1, #1
 8006310:	4812      	ldr	r0, [pc, #72]	; (800635c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006312:	f000 fce6 	bl	8006ce2 <USBD_GetEpDesc>
 8006316:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f042 0202 	orr.w	r2, r2, #2
 8006326:	711a      	strb	r2, [r3, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2205      	movs	r2, #5
 8006330:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d009      	beq.n	800634c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2200      	movs	r2, #0
 800633c:	f042 0202 	orr.w	r2, r2, #2
 8006340:	711a      	strb	r2, [r3, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2205      	movs	r2, #5
 800634a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2229      	movs	r2, #41	; 0x29
 8006350:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006352:	4b02      	ldr	r3, [pc, #8]	; (800635c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000044 	.word	0x20000044

08006360 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006368:	2181      	movs	r1, #129	; 0x81
 800636a:	4815      	ldr	r0, [pc, #84]	; (80063c0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800636c:	f000 fcb9 	bl	8006ce2 <USBD_GetEpDesc>
 8006370:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006372:	2101      	movs	r1, #1
 8006374:	4812      	ldr	r0, [pc, #72]	; (80063c0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006376:	f000 fcb4 	bl	8006ce2 <USBD_GetEpDesc>
 800637a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d009      	beq.n	8006396 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f042 0202 	orr.w	r2, r2, #2
 800638a:	711a      	strb	r2, [r3, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2205      	movs	r2, #5
 8006394:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2200      	movs	r2, #0
 80063a0:	f042 0202 	orr.w	r2, r2, #2
 80063a4:	711a      	strb	r2, [r3, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2205      	movs	r2, #5
 80063ae:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2229      	movs	r2, #41	; 0x29
 80063b4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80063b6:	4b02      	ldr	r3, [pc, #8]	; (80063c0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20000044 	.word	0x20000044

080063c4 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	32b0      	adds	r2, #176	; 0xb0
 80063da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063de:	2200      	movs	r2, #0
 80063e0:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	32b0      	adds	r2, #176	; 0xb0
 8006406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800640e:	2303      	movs	r3, #3
 8006410:	e017      	b.n	8006442 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	32b0      	adds	r2, #176	; 0xb0
 800641c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006420:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	33b0      	adds	r3, #176	; 0xb0
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	7810      	ldrb	r0, [r2, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	7852      	ldrb	r2, [r2, #1]
 800643c:	4611      	mov	r1, r2
 800643e:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	32b0      	adds	r2, #176	; 0xb0
 800645e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006466:	2303      	movs	r3, #3
 8006468:	e00f      	b.n	800648a <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	32b0      	adds	r2, #176	; 0xb0
 8006474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006478:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800647a:	4b06      	ldr	r3, [pc, #24]	; (8006494 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 800647c:	7819      	ldrb	r1, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	2302      	movs	r3, #2
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 ff5a 	bl	800833c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20000087 	.word	0x20000087

08006498 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	32b0      	adds	r2, #176	; 0xb0
 80064aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ae:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e016      	b.n	80064e8 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d111      	bne.n	80064e6 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	33b0      	adds	r3, #176	; 0xb0
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	7810      	ldrb	r0, [r2, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	7852      	ldrb	r2, [r2, #1]
 80064dc:	4611      	mov	r1, r2
 80064de:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	220a      	movs	r2, #10
 80064fc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80064fe:	4b03      	ldr	r3, [pc, #12]	; (800650c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006500:	4618      	mov	r0, r3
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	2000007c 	.word	0x2000007c

08006510 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006520:	2303      	movs	r3, #3
 8006522:	e009      	b.n	8006538 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	33b0      	adds	r3, #176	; 0xb0
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	4613      	mov	r3, r2
 8006550:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006558:	2303      	movs	r3, #3
 800655a:	e01f      	b.n	800659c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	79fa      	ldrb	r2, [r7, #7]
 800658e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f001 fd7d 	bl	8008090 <USBD_LL_Init>
 8006596:	4603      	mov	r3, r0
 8006598:	75fb      	strb	r3, [r7, #23]

  return ret;
 800659a:	7dfb      	ldrb	r3, [r7, #23]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e025      	b.n	8006608 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	32ae      	adds	r2, #174	; 0xae
 80065ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00f      	beq.n	80065f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	32ae      	adds	r2, #174	; 0xae
 80065e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	f107 020e 	add.w	r2, r7, #14
 80065ec:	4610      	mov	r0, r2
 80065ee:	4798      	blx	r3
 80065f0:	4602      	mov	r2, r0
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 fd85 	bl	8008128 <USBD_LL_Start>
 800661e:	4603      	mov	r3, r0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006630:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b084      	sub	sp, #16
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	460b      	mov	r3, r1
 8006648:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006654:	2b00      	cmp	r3, #0
 8006656:	d009      	beq.n	800666c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	78fa      	ldrb	r2, [r7, #3]
 8006662:	4611      	mov	r1, r2
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	4798      	blx	r3
 8006668:	4603      	mov	r3, r0
 800666a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800666c:	7bfb      	ldrb	r3, [r7, #15]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	460b      	mov	r3, r1
 8006680:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	4611      	mov	r1, r2
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	4798      	blx	r3
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800669c:	2303      	movs	r3, #3
 800669e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f001 f90e 	bl	80078de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80066d0:	461a      	mov	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d01a      	beq.n	800671c <USBD_LL_SetupStage+0x72>
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d822      	bhi.n	8006730 <USBD_LL_SetupStage+0x86>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <USBD_LL_SetupStage+0x4a>
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d00a      	beq.n	8006708 <USBD_LL_SetupStage+0x5e>
 80066f2:	e01d      	b.n	8006730 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fb65 	bl	8006dcc <USBD_StdDevReq>
 8006702:	4603      	mov	r3, r0
 8006704:	73fb      	strb	r3, [r7, #15]
      break;
 8006706:	e020      	b.n	800674a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fbcd 	bl	8006eb0 <USBD_StdItfReq>
 8006716:	4603      	mov	r3, r0
 8006718:	73fb      	strb	r3, [r7, #15]
      break;
 800671a:	e016      	b.n	800674a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fc2f 	bl	8006f88 <USBD_StdEPReq>
 800672a:	4603      	mov	r3, r0
 800672c:	73fb      	strb	r3, [r7, #15]
      break;
 800672e:	e00c      	b.n	800674a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006736:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800673a:	b2db      	uxtb	r3, r3
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 fd52 	bl	80081e8 <USBD_LL_StallEP>
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
      break;
 8006748:	bf00      	nop
  }

  return ret;
 800674a:	7bfb      	ldrb	r3, [r7, #15]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	460b      	mov	r3, r1
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006766:	7afb      	ldrb	r3, [r7, #11]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d16e      	bne.n	800684a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006772:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800677a:	2b03      	cmp	r3, #3
 800677c:	f040 8098 	bne.w	80068b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	429a      	cmp	r2, r3
 800678a:	d913      	bls.n	80067b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	1ad2      	subs	r2, r2, r3
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	4293      	cmp	r3, r2
 80067a4:	bf28      	it	cs
 80067a6:	4613      	movcs	r3, r2
 80067a8:	461a      	mov	r2, r3
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f001 f98a 	bl	8007ac6 <USBD_CtlContinueRx>
 80067b2:	e07d      	b.n	80068b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067ba:	f003 031f 	and.w	r3, r3, #31
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d014      	beq.n	80067ec <USBD_LL_DataOutStage+0x98>
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d81d      	bhi.n	8006802 <USBD_LL_DataOutStage+0xae>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <USBD_LL_DataOutStage+0x7c>
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d003      	beq.n	80067d6 <USBD_LL_DataOutStage+0x82>
 80067ce:	e018      	b.n	8006802 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	75bb      	strb	r3, [r7, #22]
            break;
 80067d4:	e018      	b.n	8006808 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	4619      	mov	r1, r3
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fa64 	bl	8006cae <USBD_CoreFindIF>
 80067e6:	4603      	mov	r3, r0
 80067e8:	75bb      	strb	r3, [r7, #22]
            break;
 80067ea:	e00d      	b.n	8006808 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	4619      	mov	r1, r3
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fa66 	bl	8006cc8 <USBD_CoreFindEP>
 80067fc:	4603      	mov	r3, r0
 80067fe:	75bb      	strb	r3, [r7, #22]
            break;
 8006800:	e002      	b.n	8006808 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	75bb      	strb	r3, [r7, #22]
            break;
 8006806:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006808:	7dbb      	ldrb	r3, [r7, #22]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d119      	bne.n	8006842 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b03      	cmp	r3, #3
 8006818:	d113      	bne.n	8006842 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800681a:	7dba      	ldrb	r2, [r7, #22]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	32ae      	adds	r2, #174	; 0xae
 8006820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00b      	beq.n	8006842 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800682a:	7dba      	ldrb	r2, [r7, #22]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006832:	7dba      	ldrb	r2, [r7, #22]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	32ae      	adds	r2, #174	; 0xae
 8006838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f001 f950 	bl	8007ae8 <USBD_CtlSendStatus>
 8006848:	e032      	b.n	80068b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800684a:	7afb      	ldrb	r3, [r7, #11]
 800684c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006850:	b2db      	uxtb	r3, r3
 8006852:	4619      	mov	r1, r3
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 fa37 	bl	8006cc8 <USBD_CoreFindEP>
 800685a:	4603      	mov	r3, r0
 800685c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800685e:	7dbb      	ldrb	r3, [r7, #22]
 8006860:	2bff      	cmp	r3, #255	; 0xff
 8006862:	d025      	beq.n	80068b0 <USBD_LL_DataOutStage+0x15c>
 8006864:	7dbb      	ldrb	r3, [r7, #22]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d122      	bne.n	80068b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b03      	cmp	r3, #3
 8006874:	d117      	bne.n	80068a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006876:	7dba      	ldrb	r2, [r7, #22]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	32ae      	adds	r2, #174	; 0xae
 800687c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00f      	beq.n	80068a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006886:	7dba      	ldrb	r2, [r7, #22]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800688e:	7dba      	ldrb	r2, [r7, #22]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	32ae      	adds	r2, #174	; 0xae
 8006894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	7afa      	ldrb	r2, [r7, #11]
 800689c:	4611      	mov	r1, r2
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	4798      	blx	r3
 80068a2:	4603      	mov	r3, r0
 80068a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
 80068ae:	e000      	b.n	80068b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b086      	sub	sp, #24
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	460b      	mov	r3, r1
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80068c8:	7afb      	ldrb	r3, [r7, #11]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d16f      	bne.n	80069ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3314      	adds	r3, #20
 80068d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d15a      	bne.n	8006994 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d914      	bls.n	8006914 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	1ad2      	subs	r2, r2, r3
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	461a      	mov	r2, r3
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f001 f8b2 	bl	8007a6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006906:	2300      	movs	r3, #0
 8006908:	2200      	movs	r2, #0
 800690a:	2100      	movs	r1, #0
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f001 fd15 	bl	800833c <USBD_LL_PrepareReceive>
 8006912:	e03f      	b.n	8006994 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	429a      	cmp	r2, r3
 800691e:	d11c      	bne.n	800695a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006928:	429a      	cmp	r2, r3
 800692a:	d316      	bcc.n	800695a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006936:	429a      	cmp	r2, r3
 8006938:	d20f      	bcs.n	800695a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800693a:	2200      	movs	r2, #0
 800693c:	2100      	movs	r1, #0
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f001 f893 	bl	8007a6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800694c:	2300      	movs	r3, #0
 800694e:	2200      	movs	r2, #0
 8006950:	2100      	movs	r1, #0
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f001 fcf2 	bl	800833c <USBD_LL_PrepareReceive>
 8006958:	e01c      	b.n	8006994 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b03      	cmp	r3, #3
 8006964:	d10f      	bne.n	8006986 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006986:	2180      	movs	r1, #128	; 0x80
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f001 fc2d 	bl	80081e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f001 f8bd 	bl	8007b0e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d03a      	beq.n	8006a14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff fe42 	bl	8006628 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80069ac:	e032      	b.n	8006a14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80069ae:	7afb      	ldrb	r3, [r7, #11]
 80069b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	4619      	mov	r1, r3
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f985 	bl	8006cc8 <USBD_CoreFindEP>
 80069be:	4603      	mov	r3, r0
 80069c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
 80069c4:	2bff      	cmp	r3, #255	; 0xff
 80069c6:	d025      	beq.n	8006a14 <USBD_LL_DataInStage+0x15a>
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d122      	bne.n	8006a14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d11c      	bne.n	8006a14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80069da:	7dfa      	ldrb	r2, [r7, #23]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	32ae      	adds	r2, #174	; 0xae
 80069e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d014      	beq.n	8006a14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80069ea:	7dfa      	ldrb	r2, [r7, #23]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80069f2:	7dfa      	ldrb	r2, [r7, #23]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	32ae      	adds	r2, #174	; 0xae
 80069f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	7afa      	ldrb	r2, [r7, #11]
 8006a00:	4611      	mov	r1, r2
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	4798      	blx	r3
 8006a06:	4603      	mov	r3, r0
 8006a08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006a0a:	7dbb      	ldrb	r3, [r7, #22]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006a10:	7dbb      	ldrb	r3, [r7, #22]
 8006a12:	e000      	b.n	8006a16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d014      	beq.n	8006a84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00e      	beq.n	8006a84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6852      	ldr	r2, [r2, #4]
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	4611      	mov	r1, r2
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	4798      	blx	r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006a80:	2303      	movs	r3, #3
 8006a82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a84:	2340      	movs	r3, #64	; 0x40
 8006a86:	2200      	movs	r2, #0
 8006a88:	2100      	movs	r1, #0
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fb67 	bl	800815e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2240      	movs	r2, #64	; 0x40
 8006a9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006aa0:	2340      	movs	r3, #64	; 0x40
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2180      	movs	r1, #128	; 0x80
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f001 fb59 	bl	800815e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2240      	movs	r2, #64	; 0x40
 8006ab6:	621a      	str	r2, [r3, #32]

  return ret;
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	78fa      	ldrb	r2, [r7, #3]
 8006ad2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d006      	beq.n	8006b04 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2204      	movs	r2, #4
 8006b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d106      	bne.n	8006b3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d110      	bne.n	8006b80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	32ae      	adds	r2, #174	; 0xae
 8006ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e01c      	b.n	8006be6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d115      	bne.n	8006be4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	32ae      	adds	r2, #174	; 0xae
 8006bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00b      	beq.n	8006be4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	32ae      	adds	r2, #174	; 0xae
 8006bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	78fa      	ldrb	r2, [r7, #3]
 8006bde:	4611      	mov	r1, r2
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b082      	sub	sp, #8
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	32ae      	adds	r2, #174	; 0xae
 8006c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e01c      	b.n	8006c4a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d115      	bne.n	8006c48 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	32ae      	adds	r2, #174	; 0xae
 8006c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00b      	beq.n	8006c48 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	32ae      	adds	r2, #174	; 0xae
 8006c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	78fa      	ldrb	r2, [r7, #3]
 8006c42:	4611      	mov	r1, r2
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00e      	beq.n	8006ca4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6852      	ldr	r2, [r2, #4]
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	4611      	mov	r1, r2
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	4798      	blx	r3
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cd4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b086      	sub	sp, #24
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	460b      	mov	r3, r1
 8006cec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	885b      	ldrh	r3, [r3, #2]
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d920      	bls.n	8006d4c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006d12:	e013      	b.n	8006d3c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006d14:	f107 030a 	add.w	r3, r7, #10
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6978      	ldr	r0, [r7, #20]
 8006d1c:	f000 f81b 	bl	8006d56 <USBD_GetNextDesc>
 8006d20:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	2b05      	cmp	r3, #5
 8006d28:	d108      	bne.n	8006d3c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	789b      	ldrb	r3, [r3, #2]
 8006d32:	78fa      	ldrb	r2, [r7, #3]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d008      	beq.n	8006d4a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	885b      	ldrh	r3, [r3, #2]
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	897b      	ldrh	r3, [r7, #10]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d8e5      	bhi.n	8006d14 <USBD_GetEpDesc+0x32>
 8006d48:	e000      	b.n	8006d4c <USBD_GetEpDesc+0x6a>
          break;
 8006d4a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006d4c:	693b      	ldr	r3, [r7, #16]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	881a      	ldrh	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	4413      	add	r3, r2
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4413      	add	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006d82:	68fb      	ldr	r3, [r7, #12]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	3301      	adds	r3, #1
 8006da6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006dae:	8a3b      	ldrh	r3, [r7, #16]
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	b21a      	sxth	r2, r3
 8006db4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	b21b      	sxth	r3, r3
 8006dbc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006dbe:	89fb      	ldrh	r3, [r7, #14]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d005      	beq.n	8006df2 <USBD_StdDevReq+0x26>
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d857      	bhi.n	8006e9a <USBD_StdDevReq+0xce>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00f      	beq.n	8006e0e <USBD_StdDevReq+0x42>
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	d153      	bne.n	8006e9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	32ae      	adds	r2, #174	; 0xae
 8006dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	4798      	blx	r3
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e0c:	e04a      	b.n	8006ea4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	2b09      	cmp	r3, #9
 8006e14:	d83b      	bhi.n	8006e8e <USBD_StdDevReq+0xc2>
 8006e16:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <USBD_StdDevReq+0x50>)
 8006e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1c:	08006e71 	.word	0x08006e71
 8006e20:	08006e85 	.word	0x08006e85
 8006e24:	08006e8f 	.word	0x08006e8f
 8006e28:	08006e7b 	.word	0x08006e7b
 8006e2c:	08006e8f 	.word	0x08006e8f
 8006e30:	08006e4f 	.word	0x08006e4f
 8006e34:	08006e45 	.word	0x08006e45
 8006e38:	08006e8f 	.word	0x08006e8f
 8006e3c:	08006e67 	.word	0x08006e67
 8006e40:	08006e59 	.word	0x08006e59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa3c 	bl	80072c4 <USBD_GetDescriptor>
          break;
 8006e4c:	e024      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fba1 	bl	8007598 <USBD_SetAddress>
          break;
 8006e56:	e01f      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fbe0 	bl	8007620 <USBD_SetConfig>
 8006e60:	4603      	mov	r3, r0
 8006e62:	73fb      	strb	r3, [r7, #15]
          break;
 8006e64:	e018      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fc83 	bl	8007774 <USBD_GetConfig>
          break;
 8006e6e:	e013      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fcb4 	bl	80077e0 <USBD_GetStatus>
          break;
 8006e78:	e00e      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fce3 	bl	8007848 <USBD_SetFeature>
          break;
 8006e82:	e009      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fd07 	bl	800789a <USBD_ClrFeature>
          break;
 8006e8c:	e004      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fd5e 	bl	8007952 <USBD_CtlError>
          break;
 8006e96:	bf00      	nop
      }
      break;
 8006e98:	e004      	b.n	8006ea4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fd58 	bl	8007952 <USBD_CtlError>
      break;
 8006ea2:	bf00      	nop
  }

  return ret;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop

08006eb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ec6:	2b40      	cmp	r3, #64	; 0x40
 8006ec8:	d005      	beq.n	8006ed6 <USBD_StdItfReq+0x26>
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d852      	bhi.n	8006f74 <USBD_StdItfReq+0xc4>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <USBD_StdItfReq+0x26>
 8006ed2:	2b20      	cmp	r3, #32
 8006ed4:	d14e      	bne.n	8006f74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d840      	bhi.n	8006f66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	889b      	ldrh	r3, [r3, #4]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d836      	bhi.n	8006f5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	889b      	ldrh	r3, [r3, #4]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff fed9 	bl	8006cae <USBD_CoreFindIF>
 8006efc:	4603      	mov	r3, r0
 8006efe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	2bff      	cmp	r3, #255	; 0xff
 8006f04:	d01d      	beq.n	8006f42 <USBD_StdItfReq+0x92>
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d11a      	bne.n	8006f42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006f0c:	7bba      	ldrb	r2, [r7, #14]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	32ae      	adds	r2, #174	; 0xae
 8006f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00f      	beq.n	8006f3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006f1c:	7bba      	ldrb	r2, [r7, #14]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f24:	7bba      	ldrb	r2, [r7, #14]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	32ae      	adds	r2, #174	; 0xae
 8006f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	4798      	blx	r3
 8006f36:	4603      	mov	r3, r0
 8006f38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f3a:	e004      	b.n	8006f46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f40:	e001      	b.n	8006f46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006f42:	2303      	movs	r3, #3
 8006f44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	88db      	ldrh	r3, [r3, #6]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d110      	bne.n	8006f70 <USBD_StdItfReq+0xc0>
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10d      	bne.n	8006f70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fdc7 	bl	8007ae8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f5a:	e009      	b.n	8006f70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fcf7 	bl	8007952 <USBD_CtlError>
          break;
 8006f64:	e004      	b.n	8006f70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fcf2 	bl	8007952 <USBD_CtlError>
          break;
 8006f6e:	e000      	b.n	8006f72 <USBD_StdItfReq+0xc2>
          break;
 8006f70:	bf00      	nop
      }
      break;
 8006f72:	e004      	b.n	8006f7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fceb 	bl	8007952 <USBD_CtlError>
      break;
 8006f7c:	bf00      	nop
  }

  return ret;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	889b      	ldrh	r3, [r3, #4]
 8006f9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fa4:	2b40      	cmp	r3, #64	; 0x40
 8006fa6:	d007      	beq.n	8006fb8 <USBD_StdEPReq+0x30>
 8006fa8:	2b40      	cmp	r3, #64	; 0x40
 8006faa:	f200 817f 	bhi.w	80072ac <USBD_StdEPReq+0x324>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d02a      	beq.n	8007008 <USBD_StdEPReq+0x80>
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	f040 817a 	bne.w	80072ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7ff fe83 	bl	8006cc8 <USBD_CoreFindEP>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fc6:	7b7b      	ldrb	r3, [r7, #13]
 8006fc8:	2bff      	cmp	r3, #255	; 0xff
 8006fca:	f000 8174 	beq.w	80072b6 <USBD_StdEPReq+0x32e>
 8006fce:	7b7b      	ldrb	r3, [r7, #13]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f040 8170 	bne.w	80072b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006fd6:	7b7a      	ldrb	r2, [r7, #13]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006fde:	7b7a      	ldrb	r2, [r7, #13]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	32ae      	adds	r2, #174	; 0xae
 8006fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 8163 	beq.w	80072b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006ff0:	7b7a      	ldrb	r2, [r7, #13]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	32ae      	adds	r2, #174	; 0xae
 8006ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
 8007002:	4603      	mov	r3, r0
 8007004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007006:	e156      	b.n	80072b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	2b03      	cmp	r3, #3
 800700e:	d008      	beq.n	8007022 <USBD_StdEPReq+0x9a>
 8007010:	2b03      	cmp	r3, #3
 8007012:	f300 8145 	bgt.w	80072a0 <USBD_StdEPReq+0x318>
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 809b 	beq.w	8007152 <USBD_StdEPReq+0x1ca>
 800701c:	2b01      	cmp	r3, #1
 800701e:	d03c      	beq.n	800709a <USBD_StdEPReq+0x112>
 8007020:	e13e      	b.n	80072a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d002      	beq.n	8007034 <USBD_StdEPReq+0xac>
 800702e:	2b03      	cmp	r3, #3
 8007030:	d016      	beq.n	8007060 <USBD_StdEPReq+0xd8>
 8007032:	e02c      	b.n	800708e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007034:	7bbb      	ldrb	r3, [r7, #14]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00d      	beq.n	8007056 <USBD_StdEPReq+0xce>
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	2b80      	cmp	r3, #128	; 0x80
 800703e:	d00a      	beq.n	8007056 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 f8cf 	bl	80081e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800704a:	2180      	movs	r1, #128	; 0x80
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f001 f8cb 	bl	80081e8 <USBD_LL_StallEP>
 8007052:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007054:	e020      	b.n	8007098 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fc7a 	bl	8007952 <USBD_CtlError>
              break;
 800705e:	e01b      	b.n	8007098 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	885b      	ldrh	r3, [r3, #2]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10e      	bne.n	8007086 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <USBD_StdEPReq+0xfe>
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b80      	cmp	r3, #128	; 0x80
 8007072:	d008      	beq.n	8007086 <USBD_StdEPReq+0xfe>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	88db      	ldrh	r3, [r3, #6]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d104      	bne.n	8007086 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 f8b1 	bl	80081e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fd2e 	bl	8007ae8 <USBD_CtlSendStatus>

              break;
 800708c:	e004      	b.n	8007098 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fc5e 	bl	8007952 <USBD_CtlError>
              break;
 8007096:	bf00      	nop
          }
          break;
 8007098:	e107      	b.n	80072aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d002      	beq.n	80070ac <USBD_StdEPReq+0x124>
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d016      	beq.n	80070d8 <USBD_StdEPReq+0x150>
 80070aa:	e04b      	b.n	8007144 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00d      	beq.n	80070ce <USBD_StdEPReq+0x146>
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	2b80      	cmp	r3, #128	; 0x80
 80070b6:	d00a      	beq.n	80070ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 f893 	bl	80081e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070c2:	2180      	movs	r1, #128	; 0x80
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 f88f 	bl	80081e8 <USBD_LL_StallEP>
 80070ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070cc:	e040      	b.n	8007150 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fc3e 	bl	8007952 <USBD_CtlError>
              break;
 80070d6:	e03b      	b.n	8007150 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	885b      	ldrh	r3, [r3, #2]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d136      	bne.n	800714e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f001 f899 	bl	8008226 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fcf7 	bl	8007ae8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff fde2 	bl	8006cc8 <USBD_CoreFindEP>
 8007104:	4603      	mov	r3, r0
 8007106:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007108:	7b7b      	ldrb	r3, [r7, #13]
 800710a:	2bff      	cmp	r3, #255	; 0xff
 800710c:	d01f      	beq.n	800714e <USBD_StdEPReq+0x1c6>
 800710e:	7b7b      	ldrb	r3, [r7, #13]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d11c      	bne.n	800714e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007114:	7b7a      	ldrb	r2, [r7, #13]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800711c:	7b7a      	ldrb	r2, [r7, #13]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	32ae      	adds	r2, #174	; 0xae
 8007122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d010      	beq.n	800714e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800712c:	7b7a      	ldrb	r2, [r7, #13]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	32ae      	adds	r2, #174	; 0xae
 8007132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007142:	e004      	b.n	800714e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fc03 	bl	8007952 <USBD_CtlError>
              break;
 800714c:	e000      	b.n	8007150 <USBD_StdEPReq+0x1c8>
              break;
 800714e:	bf00      	nop
          }
          break;
 8007150:	e0ab      	b.n	80072aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d002      	beq.n	8007164 <USBD_StdEPReq+0x1dc>
 800715e:	2b03      	cmp	r3, #3
 8007160:	d032      	beq.n	80071c8 <USBD_StdEPReq+0x240>
 8007162:	e097      	b.n	8007294 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <USBD_StdEPReq+0x1f2>
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	2b80      	cmp	r3, #128	; 0x80
 800716e:	d004      	beq.n	800717a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fbed 	bl	8007952 <USBD_CtlError>
                break;
 8007178:	e091      	b.n	800729e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800717a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800717e:	2b00      	cmp	r3, #0
 8007180:	da0b      	bge.n	800719a <USBD_StdEPReq+0x212>
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	3310      	adds	r3, #16
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	4413      	add	r3, r2
 8007196:	3304      	adds	r3, #4
 8007198:	e00b      	b.n	80071b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	4413      	add	r3, r2
 80071b0:	3304      	adds	r3, #4
 80071b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2202      	movs	r2, #2
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fc37 	bl	8007a34 <USBD_CtlSendData>
              break;
 80071c6:	e06a      	b.n	800729e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	da11      	bge.n	80071f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	f003 020f 	and.w	r2, r3, #15
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	4613      	mov	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	3324      	adds	r3, #36	; 0x24
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d117      	bne.n	800721a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fbb0 	bl	8007952 <USBD_CtlError>
                  break;
 80071f2:	e054      	b.n	800729e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	f003 020f 	and.w	r2, r3, #15
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d104      	bne.n	800721a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fb9d 	bl	8007952 <USBD_CtlError>
                  break;
 8007218:	e041      	b.n	800729e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800721a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800721e:	2b00      	cmp	r3, #0
 8007220:	da0b      	bge.n	800723a <USBD_StdEPReq+0x2b2>
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	3310      	adds	r3, #16
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	4413      	add	r3, r2
 8007236:	3304      	adds	r3, #4
 8007238:	e00b      	b.n	8007252 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	4413      	add	r3, r2
 8007250:	3304      	adds	r3, #4
 8007252:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007254:	7bbb      	ldrb	r3, [r7, #14]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <USBD_StdEPReq+0x2d8>
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	2b80      	cmp	r3, #128	; 0x80
 800725e:	d103      	bne.n	8007268 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	e00e      	b.n	8007286 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fff9 	bl	8008264 <USBD_LL_IsStallEP>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2201      	movs	r2, #1
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e002      	b.n	8007286 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2202      	movs	r2, #2
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fbd1 	bl	8007a34 <USBD_CtlSendData>
              break;
 8007292:	e004      	b.n	800729e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fb5b 	bl	8007952 <USBD_CtlError>
              break;
 800729c:	bf00      	nop
          }
          break;
 800729e:	e004      	b.n	80072aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fb55 	bl	8007952 <USBD_CtlError>
          break;
 80072a8:	bf00      	nop
      }
      break;
 80072aa:	e005      	b.n	80072b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fb4f 	bl	8007952 <USBD_CtlError>
      break;
 80072b4:	e000      	b.n	80072b8 <USBD_StdEPReq+0x330>
      break;
 80072b6:	bf00      	nop
  }

  return ret;
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	885b      	ldrh	r3, [r3, #2]
 80072de:	0a1b      	lsrs	r3, r3, #8
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	2b06      	cmp	r3, #6
 80072e6:	f200 8128 	bhi.w	800753a <USBD_GetDescriptor+0x276>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <USBD_GetDescriptor+0x2c>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	0800730d 	.word	0x0800730d
 80072f4:	08007325 	.word	0x08007325
 80072f8:	08007365 	.word	0x08007365
 80072fc:	0800753b 	.word	0x0800753b
 8007300:	0800753b 	.word	0x0800753b
 8007304:	080074db 	.word	0x080074db
 8007308:	08007507 	.word	0x08007507
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	7c12      	ldrb	r2, [r2, #16]
 8007318:	f107 0108 	add.w	r1, r7, #8
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
 8007320:	60f8      	str	r0, [r7, #12]
      break;
 8007322:	e112      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	7c1b      	ldrb	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10d      	bne.n	8007348 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007334:	f107 0208 	add.w	r2, r7, #8
 8007338:	4610      	mov	r0, r2
 800733a:	4798      	blx	r3
 800733c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3301      	adds	r3, #1
 8007342:	2202      	movs	r2, #2
 8007344:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007346:	e100      	b.n	800754a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	f107 0208 	add.w	r2, r7, #8
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
 8007358:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3301      	adds	r3, #1
 800735e:	2202      	movs	r2, #2
 8007360:	701a      	strb	r2, [r3, #0]
      break;
 8007362:	e0f2      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	885b      	ldrh	r3, [r3, #2]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b05      	cmp	r3, #5
 800736c:	f200 80ac 	bhi.w	80074c8 <USBD_GetDescriptor+0x204>
 8007370:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <USBD_GetDescriptor+0xb4>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	08007391 	.word	0x08007391
 800737c:	080073c5 	.word	0x080073c5
 8007380:	080073f9 	.word	0x080073f9
 8007384:	0800742d 	.word	0x0800742d
 8007388:	08007461 	.word	0x08007461
 800738c:	08007495 	.word	0x08007495
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	7c12      	ldrb	r2, [r2, #16]
 80073a8:	f107 0108 	add.w	r1, r7, #8
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
 80073b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073b2:	e091      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 facb 	bl	8007952 <USBD_CtlError>
            err++;
 80073bc:	7afb      	ldrb	r3, [r7, #11]
 80073be:	3301      	adds	r3, #1
 80073c0:	72fb      	strb	r3, [r7, #11]
          break;
 80073c2:	e089      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	7c12      	ldrb	r2, [r2, #16]
 80073dc:	f107 0108 	add.w	r1, r7, #8
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
 80073e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073e6:	e077      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fab1 	bl	8007952 <USBD_CtlError>
            err++;
 80073f0:	7afb      	ldrb	r3, [r7, #11]
 80073f2:	3301      	adds	r3, #1
 80073f4:	72fb      	strb	r3, [r7, #11]
          break;
 80073f6:	e06f      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7c12      	ldrb	r2, [r2, #16]
 8007410:	f107 0108 	add.w	r1, r7, #8
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
 8007418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800741a:	e05d      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa97 	bl	8007952 <USBD_CtlError>
            err++;
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	3301      	adds	r3, #1
 8007428:	72fb      	strb	r3, [r7, #11]
          break;
 800742a:	e055      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00b      	beq.n	8007450 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	7c12      	ldrb	r2, [r2, #16]
 8007444:	f107 0108 	add.w	r1, r7, #8
 8007448:	4610      	mov	r0, r2
 800744a:	4798      	blx	r3
 800744c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800744e:	e043      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa7d 	bl	8007952 <USBD_CtlError>
            err++;
 8007458:	7afb      	ldrb	r3, [r7, #11]
 800745a:	3301      	adds	r3, #1
 800745c:	72fb      	strb	r3, [r7, #11]
          break;
 800745e:	e03b      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	7c12      	ldrb	r2, [r2, #16]
 8007478:	f107 0108 	add.w	r1, r7, #8
 800747c:	4610      	mov	r0, r2
 800747e:	4798      	blx	r3
 8007480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007482:	e029      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa63 	bl	8007952 <USBD_CtlError>
            err++;
 800748c:	7afb      	ldrb	r3, [r7, #11]
 800748e:	3301      	adds	r3, #1
 8007490:	72fb      	strb	r3, [r7, #11]
          break;
 8007492:	e021      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00b      	beq.n	80074b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	7c12      	ldrb	r2, [r2, #16]
 80074ac:	f107 0108 	add.w	r1, r7, #8
 80074b0:	4610      	mov	r0, r2
 80074b2:	4798      	blx	r3
 80074b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074b6:	e00f      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa49 	bl	8007952 <USBD_CtlError>
            err++;
 80074c0:	7afb      	ldrb	r3, [r7, #11]
 80074c2:	3301      	adds	r3, #1
 80074c4:	72fb      	strb	r3, [r7, #11]
          break;
 80074c6:	e007      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa41 	bl	8007952 <USBD_CtlError>
          err++;
 80074d0:	7afb      	ldrb	r3, [r7, #11]
 80074d2:	3301      	adds	r3, #1
 80074d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80074d6:	bf00      	nop
      }
      break;
 80074d8:	e037      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7c1b      	ldrb	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ea:	f107 0208 	add.w	r2, r7, #8
 80074ee:	4610      	mov	r0, r2
 80074f0:	4798      	blx	r3
 80074f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074f4:	e029      	b.n	800754a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fa2a 	bl	8007952 <USBD_CtlError>
        err++;
 80074fe:	7afb      	ldrb	r3, [r7, #11]
 8007500:	3301      	adds	r3, #1
 8007502:	72fb      	strb	r3, [r7, #11]
      break;
 8007504:	e021      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	7c1b      	ldrb	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10d      	bne.n	800752a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	f107 0208 	add.w	r2, r7, #8
 800751a:	4610      	mov	r0, r2
 800751c:	4798      	blx	r3
 800751e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3301      	adds	r3, #1
 8007524:	2207      	movs	r2, #7
 8007526:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007528:	e00f      	b.n	800754a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fa10 	bl	8007952 <USBD_CtlError>
        err++;
 8007532:	7afb      	ldrb	r3, [r7, #11]
 8007534:	3301      	adds	r3, #1
 8007536:	72fb      	strb	r3, [r7, #11]
      break;
 8007538:	e007      	b.n	800754a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fa08 	bl	8007952 <USBD_CtlError>
      err++;
 8007542:	7afb      	ldrb	r3, [r7, #11]
 8007544:	3301      	adds	r3, #1
 8007546:	72fb      	strb	r3, [r7, #11]
      break;
 8007548:	bf00      	nop
  }

  if (err != 0U)
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d11e      	bne.n	800758e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	88db      	ldrh	r3, [r3, #6]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d016      	beq.n	8007586 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007558:	893b      	ldrh	r3, [r7, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00e      	beq.n	800757c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	88da      	ldrh	r2, [r3, #6]
 8007562:	893b      	ldrh	r3, [r7, #8]
 8007564:	4293      	cmp	r3, r2
 8007566:	bf28      	it	cs
 8007568:	4613      	movcs	r3, r2
 800756a:	b29b      	uxth	r3, r3
 800756c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800756e:	893b      	ldrh	r3, [r7, #8]
 8007570:	461a      	mov	r2, r3
 8007572:	68f9      	ldr	r1, [r7, #12]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fa5d 	bl	8007a34 <USBD_CtlSendData>
 800757a:	e009      	b.n	8007590 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f9e7 	bl	8007952 <USBD_CtlError>
 8007584:	e004      	b.n	8007590 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 faae 	bl	8007ae8 <USBD_CtlSendStatus>
 800758c:	e000      	b.n	8007590 <USBD_GetDescriptor+0x2cc>
    return;
 800758e:	bf00      	nop
  }
}
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop

08007598 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	889b      	ldrh	r3, [r3, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d131      	bne.n	800760e <USBD_SetAddress+0x76>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	88db      	ldrh	r3, [r3, #6]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d12d      	bne.n	800760e <USBD_SetAddress+0x76>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	885b      	ldrh	r3, [r3, #2]
 80075b6:	2b7f      	cmp	r3, #127	; 0x7f
 80075b8:	d829      	bhi.n	800760e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	885b      	ldrh	r3, [r3, #2]
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d104      	bne.n	80075dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f9bc 	bl	8007952 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075da:	e01d      	b.n	8007618 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	7bfa      	ldrb	r2, [r7, #15]
 80075e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fe67 	bl	80082bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fa7a 	bl	8007ae8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d004      	beq.n	8007604 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2202      	movs	r2, #2
 80075fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007602:	e009      	b.n	8007618 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800760c:	e004      	b.n	8007618 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f99e 	bl	8007952 <USBD_CtlError>
  }
}
 8007616:	bf00      	nop
 8007618:	bf00      	nop
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	885b      	ldrh	r3, [r3, #2]
 8007632:	b2da      	uxtb	r2, r3
 8007634:	4b4e      	ldr	r3, [pc, #312]	; (8007770 <USBD_SetConfig+0x150>)
 8007636:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007638:	4b4d      	ldr	r3, [pc, #308]	; (8007770 <USBD_SetConfig+0x150>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d905      	bls.n	800764c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f985 	bl	8007952 <USBD_CtlError>
    return USBD_FAIL;
 8007648:	2303      	movs	r3, #3
 800764a:	e08c      	b.n	8007766 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d002      	beq.n	800765e <USBD_SetConfig+0x3e>
 8007658:	2b03      	cmp	r3, #3
 800765a:	d029      	beq.n	80076b0 <USBD_SetConfig+0x90>
 800765c:	e075      	b.n	800774a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800765e:	4b44      	ldr	r3, [pc, #272]	; (8007770 <USBD_SetConfig+0x150>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d020      	beq.n	80076a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007666:	4b42      	ldr	r3, [pc, #264]	; (8007770 <USBD_SetConfig+0x150>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007670:	4b3f      	ldr	r3, [pc, #252]	; (8007770 <USBD_SetConfig+0x150>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7fe ffe1 	bl	800663e <USBD_SetClassConfig>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d008      	beq.n	8007698 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f962 	bl	8007952 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2202      	movs	r2, #2
 8007692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007696:	e065      	b.n	8007764 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fa25 	bl	8007ae8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2203      	movs	r2, #3
 80076a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80076a6:	e05d      	b.n	8007764 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fa1d 	bl	8007ae8 <USBD_CtlSendStatus>
      break;
 80076ae:	e059      	b.n	8007764 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80076b0:	4b2f      	ldr	r3, [pc, #188]	; (8007770 <USBD_SetConfig+0x150>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d112      	bne.n	80076de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80076c0:	4b2b      	ldr	r3, [pc, #172]	; (8007770 <USBD_SetConfig+0x150>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076ca:	4b29      	ldr	r3, [pc, #164]	; (8007770 <USBD_SetConfig+0x150>)
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7fe ffd0 	bl	8006676 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa06 	bl	8007ae8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076dc:	e042      	b.n	8007764 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80076de:	4b24      	ldr	r3, [pc, #144]	; (8007770 <USBD_SetConfig+0x150>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d02a      	beq.n	8007742 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7fe ffbe 	bl	8006676 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80076fa:	4b1d      	ldr	r3, [pc, #116]	; (8007770 <USBD_SetConfig+0x150>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007704:	4b1a      	ldr	r3, [pc, #104]	; (8007770 <USBD_SetConfig+0x150>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fe ff97 	bl	800663e <USBD_SetClassConfig>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00f      	beq.n	800773a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f918 	bl	8007952 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7fe ffa3 	bl	8006676 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007738:	e014      	b.n	8007764 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f9d4 	bl	8007ae8 <USBD_CtlSendStatus>
      break;
 8007740:	e010      	b.n	8007764 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f9d0 	bl	8007ae8 <USBD_CtlSendStatus>
      break;
 8007748:	e00c      	b.n	8007764 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f900 	bl	8007952 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007752:	4b07      	ldr	r3, [pc, #28]	; (8007770 <USBD_SetConfig+0x150>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7fe ff8c 	bl	8006676 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800775e:	2303      	movs	r3, #3
 8007760:	73fb      	strb	r3, [r7, #15]
      break;
 8007762:	bf00      	nop
  }

  return ret;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	2000022c 	.word	0x2000022c

08007774 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	88db      	ldrh	r3, [r3, #6]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d004      	beq.n	8007790 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f8e2 	bl	8007952 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800778e:	e023      	b.n	80077d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	dc02      	bgt.n	80077a2 <USBD_GetConfig+0x2e>
 800779c:	2b00      	cmp	r3, #0
 800779e:	dc03      	bgt.n	80077a8 <USBD_GetConfig+0x34>
 80077a0:	e015      	b.n	80077ce <USBD_GetConfig+0x5a>
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d00b      	beq.n	80077be <USBD_GetConfig+0x4a>
 80077a6:	e012      	b.n	80077ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3308      	adds	r3, #8
 80077b2:	2201      	movs	r2, #1
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f93c 	bl	8007a34 <USBD_CtlSendData>
        break;
 80077bc:	e00c      	b.n	80077d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3304      	adds	r3, #4
 80077c2:	2201      	movs	r2, #1
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f934 	bl	8007a34 <USBD_CtlSendData>
        break;
 80077cc:	e004      	b.n	80077d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f8be 	bl	8007952 <USBD_CtlError>
        break;
 80077d6:	bf00      	nop
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d81e      	bhi.n	8007836 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	88db      	ldrh	r3, [r3, #6]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d004      	beq.n	800780a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f8a5 	bl	8007952 <USBD_CtlError>
        break;
 8007808:	e01a      	b.n	8007840 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f043 0202 	orr.w	r2, r3, #2
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	330c      	adds	r3, #12
 800782a:	2202      	movs	r2, #2
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f900 	bl	8007a34 <USBD_CtlSendData>
      break;
 8007834:	e004      	b.n	8007840 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f88a 	bl	8007952 <USBD_CtlError>
      break;
 800783e:	bf00      	nop
  }
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	885b      	ldrh	r3, [r3, #2]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d107      	bne.n	800786a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f940 	bl	8007ae8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007868:	e013      	b.n	8007892 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	885b      	ldrh	r3, [r3, #2]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d10b      	bne.n	800788a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	889b      	ldrh	r3, [r3, #4]
 8007876:	0a1b      	lsrs	r3, r3, #8
 8007878:	b29b      	uxth	r3, r3
 800787a:	b2da      	uxtb	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f930 	bl	8007ae8 <USBD_CtlSendStatus>
}
 8007888:	e003      	b.n	8007892 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f860 	bl	8007952 <USBD_CtlError>
}
 8007892:	bf00      	nop
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	3b01      	subs	r3, #1
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d80b      	bhi.n	80078ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	885b      	ldrh	r3, [r3, #2]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d10c      	bne.n	80078d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f910 	bl	8007ae8 <USBD_CtlSendStatus>
      }
      break;
 80078c8:	e004      	b.n	80078d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f840 	bl	8007952 <USBD_CtlError>
      break;
 80078d2:	e000      	b.n	80078d6 <USBD_ClrFeature+0x3c>
      break;
 80078d4:	bf00      	nop
  }
}
 80078d6:	bf00      	nop
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b084      	sub	sp, #16
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	781a      	ldrb	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	3301      	adds	r3, #1
 80078f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	781a      	ldrb	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3301      	adds	r3, #1
 8007906:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f7ff fa41 	bl	8006d90 <SWAPBYTE>
 800790e:	4603      	mov	r3, r0
 8007910:	461a      	mov	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3301      	adds	r3, #1
 800791a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3301      	adds	r3, #1
 8007920:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff fa34 	bl	8006d90 <SWAPBYTE>
 8007928:	4603      	mov	r3, r0
 800792a:	461a      	mov	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3301      	adds	r3, #1
 8007934:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3301      	adds	r3, #1
 800793a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff fa27 	bl	8006d90 <SWAPBYTE>
 8007942:	4603      	mov	r3, r0
 8007944:	461a      	mov	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	80da      	strh	r2, [r3, #6]
}
 800794a:	bf00      	nop
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800795c:	2180      	movs	r1, #128	; 0x80
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fc42 	bl	80081e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007964:	2100      	movs	r1, #0
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fc3e 	bl	80081e8 <USBD_LL_StallEP>
}
 800796c:	bf00      	nop
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d036      	beq.n	80079f8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800798e:	6938      	ldr	r0, [r7, #16]
 8007990:	f000 f836 	bl	8007a00 <USBD_GetLen>
 8007994:	4603      	mov	r3, r0
 8007996:	3301      	adds	r3, #1
 8007998:	b29b      	uxth	r3, r3
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	b29a      	uxth	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	4413      	add	r3, r2
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	7812      	ldrb	r2, [r2, #0]
 80079ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	3301      	adds	r3, #1
 80079b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	4413      	add	r3, r2
 80079ba:	2203      	movs	r2, #3
 80079bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80079be:	7dfb      	ldrb	r3, [r7, #23]
 80079c0:	3301      	adds	r3, #1
 80079c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80079c4:	e013      	b.n	80079ee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	4413      	add	r3, r2
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	7812      	ldrb	r2, [r2, #0]
 80079d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	3301      	adds	r3, #1
 80079d6:	613b      	str	r3, [r7, #16]
    idx++;
 80079d8:	7dfb      	ldrb	r3, [r7, #23]
 80079da:	3301      	adds	r3, #1
 80079dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80079de:	7dfb      	ldrb	r3, [r7, #23]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	4413      	add	r3, r2
 80079e4:	2200      	movs	r2, #0
 80079e6:	701a      	strb	r2, [r3, #0]
    idx++;
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	3301      	adds	r3, #1
 80079ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e7      	bne.n	80079c6 <USBD_GetString+0x52>
 80079f6:	e000      	b.n	80079fa <USBD_GetString+0x86>
    return;
 80079f8:	bf00      	nop
  }
}
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a10:	e005      	b.n	8007a1e <USBD_GetLen+0x1e>
  {
    len++;
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	3301      	adds	r3, #1
 8007a16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1f5      	bne.n	8007a12 <USBD_GetLen+0x12>
  }

  return len;
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	2100      	movs	r1, #0
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 fc4d 	bl	80082fa <USBD_LL_Transmit>

  return USBD_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 fc3c 	bl	80082fa <USBD_LL_Transmit>

  return USBD_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2203      	movs	r2, #3
 8007a9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fc40 	bl	800833c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 fc2f 	bl	800833c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2204      	movs	r2, #4
 8007af4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007af8:	2300      	movs	r3, #0
 8007afa:	2200      	movs	r2, #0
 8007afc:	2100      	movs	r1, #0
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fbfb 	bl	80082fa <USBD_LL_Transmit>

  return USBD_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2205      	movs	r2, #5
 8007b1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b1e:	2300      	movs	r3, #0
 8007b20:	2200      	movs	r2, #0
 8007b22:	2100      	movs	r1, #0
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fc09 	bl	800833c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	4912      	ldr	r1, [pc, #72]	; (8007b84 <MX_USB_DEVICE_Init+0x50>)
 8007b3c:	4812      	ldr	r0, [pc, #72]	; (8007b88 <MX_USB_DEVICE_Init+0x54>)
 8007b3e:	f7fe fd01 	bl	8006544 <USBD_Init>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b48:	f7f8 fff0 	bl	8000b2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007b4c:	490f      	ldr	r1, [pc, #60]	; (8007b8c <MX_USB_DEVICE_Init+0x58>)
 8007b4e:	480e      	ldr	r0, [pc, #56]	; (8007b88 <MX_USB_DEVICE_Init+0x54>)
 8007b50:	f7fe fd28 	bl	80065a4 <USBD_RegisterClass>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b5a:	f7f8 ffe7 	bl	8000b2c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007b5e:	490c      	ldr	r1, [pc, #48]	; (8007b90 <MX_USB_DEVICE_Init+0x5c>)
 8007b60:	4809      	ldr	r0, [pc, #36]	; (8007b88 <MX_USB_DEVICE_Init+0x54>)
 8007b62:	f7fe fcd5 	bl	8006510 <USBD_CUSTOM_HID_RegisterInterface>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b6c:	f7f8 ffde 	bl	8000b2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b70:	4805      	ldr	r0, [pc, #20]	; (8007b88 <MX_USB_DEVICE_Init+0x54>)
 8007b72:	f7fe fd4d 	bl	8006610 <USBD_Start>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b7c:	f7f8 ffd6 	bl	8000b2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b80:	bf00      	nop
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	200000e4 	.word	0x200000e4
 8007b88:	20000230 	.word	0x20000230
 8007b8c:	2000000c 	.word	0x2000000c
 8007b90:	200000d4 	.word	0x200000d4

08007b94 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007ba8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	460a      	mov	r2, r1
 8007bbe:	71fb      	strb	r3, [r7, #7]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8007bc4:	4806      	ldr	r0, [pc, #24]	; (8007be0 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8007bc6:	f7fe fc41 	bl	800644c <USBD_CUSTOM_HID_ReceivePacket>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8007bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bd4:	e000      	b.n	8007bd8 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8007bd6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	20000230 	.word	0x20000230

08007be4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	6039      	str	r1, [r7, #0]
 8007bee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2212      	movs	r2, #18
 8007bf4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007bf6:	4b03      	ldr	r3, [pc, #12]	; (8007c04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	20000100 	.word	0x20000100

08007c08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	6039      	str	r1, [r7, #0]
 8007c12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2204      	movs	r2, #4
 8007c18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c1a:	4b03      	ldr	r3, [pc, #12]	; (8007c28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	20000114 	.word	0x20000114

08007c2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	4603      	mov	r3, r0
 8007c34:	6039      	str	r1, [r7, #0]
 8007c36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d105      	bne.n	8007c4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	4907      	ldr	r1, [pc, #28]	; (8007c60 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c42:	4808      	ldr	r0, [pc, #32]	; (8007c64 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c44:	f7ff fe96 	bl	8007974 <USBD_GetString>
 8007c48:	e004      	b.n	8007c54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	4904      	ldr	r1, [pc, #16]	; (8007c60 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c4e:	4805      	ldr	r0, [pc, #20]	; (8007c64 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c50:	f7ff fe90 	bl	8007974 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c54:	4b02      	ldr	r3, [pc, #8]	; (8007c60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	2000050c 	.word	0x2000050c
 8007c64:	08008478 	.word	0x08008478

08007c68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	6039      	str	r1, [r7, #0]
 8007c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	4904      	ldr	r1, [pc, #16]	; (8007c88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c78:	4804      	ldr	r0, [pc, #16]	; (8007c8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c7a:	f7ff fe7b 	bl	8007974 <USBD_GetString>
  return USBD_StrDesc;
 8007c7e:	4b02      	ldr	r3, [pc, #8]	; (8007c88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	2000050c 	.word	0x2000050c
 8007c8c:	08008498 	.word	0x08008498

08007c90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	4603      	mov	r3, r0
 8007c98:	6039      	str	r1, [r7, #0]
 8007c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	221a      	movs	r2, #26
 8007ca0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ca2:	f000 f843 	bl	8007d2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ca6:	4b02      	ldr	r3, [pc, #8]	; (8007cb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20000118 	.word	0x20000118

08007cb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	6039      	str	r1, [r7, #0]
 8007cbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d105      	bne.n	8007cd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	4907      	ldr	r1, [pc, #28]	; (8007ce8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cca:	4808      	ldr	r0, [pc, #32]	; (8007cec <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ccc:	f7ff fe52 	bl	8007974 <USBD_GetString>
 8007cd0:	e004      	b.n	8007cdc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	4904      	ldr	r1, [pc, #16]	; (8007ce8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cd6:	4805      	ldr	r0, [pc, #20]	; (8007cec <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cd8:	f7ff fe4c 	bl	8007974 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cdc:	4b02      	ldr	r3, [pc, #8]	; (8007ce8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	2000050c 	.word	0x2000050c
 8007cec:	080084ac 	.word	0x080084ac

08007cf0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	6039      	str	r1, [r7, #0]
 8007cfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d105      	bne.n	8007d0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	4907      	ldr	r1, [pc, #28]	; (8007d24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d06:	4808      	ldr	r0, [pc, #32]	; (8007d28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d08:	f7ff fe34 	bl	8007974 <USBD_GetString>
 8007d0c:	e004      	b.n	8007d18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	4904      	ldr	r1, [pc, #16]	; (8007d24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d12:	4805      	ldr	r0, [pc, #20]	; (8007d28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d14:	f7ff fe2e 	bl	8007974 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d18:	4b02      	ldr	r3, [pc, #8]	; (8007d24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	2000050c 	.word	0x2000050c
 8007d28:	080084c0 	.word	0x080084c0

08007d2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d32:	4b0f      	ldr	r3, [pc, #60]	; (8007d70 <Get_SerialNum+0x44>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d38:	4b0e      	ldr	r3, [pc, #56]	; (8007d74 <Get_SerialNum+0x48>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d3e:	4b0e      	ldr	r3, [pc, #56]	; (8007d78 <Get_SerialNum+0x4c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4413      	add	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d009      	beq.n	8007d66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d52:	2208      	movs	r2, #8
 8007d54:	4909      	ldr	r1, [pc, #36]	; (8007d7c <Get_SerialNum+0x50>)
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 f814 	bl	8007d84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	4908      	ldr	r1, [pc, #32]	; (8007d80 <Get_SerialNum+0x54>)
 8007d60:	68b8      	ldr	r0, [r7, #8]
 8007d62:	f000 f80f 	bl	8007d84 <IntToUnicode>
  }
}
 8007d66:	bf00      	nop
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	1fff7a10 	.word	0x1fff7a10
 8007d74:	1fff7a14 	.word	0x1fff7a14
 8007d78:	1fff7a18 	.word	0x1fff7a18
 8007d7c:	2000011a 	.word	0x2000011a
 8007d80:	2000012a 	.word	0x2000012a

08007d84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d96:	2300      	movs	r3, #0
 8007d98:	75fb      	strb	r3, [r7, #23]
 8007d9a:	e027      	b.n	8007dec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	0f1b      	lsrs	r3, r3, #28
 8007da0:	2b09      	cmp	r3, #9
 8007da2:	d80b      	bhi.n	8007dbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	0f1b      	lsrs	r3, r3, #28
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	4619      	mov	r1, r3
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	440b      	add	r3, r1
 8007db4:	3230      	adds	r2, #48	; 0x30
 8007db6:	b2d2      	uxtb	r2, r2
 8007db8:	701a      	strb	r2, [r3, #0]
 8007dba:	e00a      	b.n	8007dd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	0f1b      	lsrs	r3, r3, #28
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	440b      	add	r3, r1
 8007dcc:	3237      	adds	r2, #55	; 0x37
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	011b      	lsls	r3, r3, #4
 8007dd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	3301      	adds	r3, #1
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	4413      	add	r3, r2
 8007de2:	2200      	movs	r2, #0
 8007de4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
 8007de8:	3301      	adds	r3, #1
 8007dea:	75fb      	strb	r3, [r7, #23]
 8007dec:	7dfa      	ldrb	r2, [r7, #23]
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d3d3      	bcc.n	8007d9c <IntToUnicode+0x18>
  }
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
	...

08007e04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	; 0x28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e0c:	f107 0314 	add.w	r3, r7, #20
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	605a      	str	r2, [r3, #4]
 8007e16:	609a      	str	r2, [r3, #8]
 8007e18:	60da      	str	r2, [r3, #12]
 8007e1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e24:	d13a      	bne.n	8007e9c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e26:	2300      	movs	r3, #0
 8007e28:	613b      	str	r3, [r7, #16]
 8007e2a:	4b1e      	ldr	r3, [pc, #120]	; (8007ea4 <HAL_PCD_MspInit+0xa0>)
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2e:	4a1d      	ldr	r2, [pc, #116]	; (8007ea4 <HAL_PCD_MspInit+0xa0>)
 8007e30:	f043 0301 	orr.w	r3, r3, #1
 8007e34:	6313      	str	r3, [r2, #48]	; 0x30
 8007e36:	4b1b      	ldr	r3, [pc, #108]	; (8007ea4 <HAL_PCD_MspInit+0xa0>)
 8007e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007e42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e50:	2303      	movs	r3, #3
 8007e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e54:	230a      	movs	r3, #10
 8007e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e58:	f107 0314 	add.w	r3, r7, #20
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4812      	ldr	r0, [pc, #72]	; (8007ea8 <HAL_PCD_MspInit+0xa4>)
 8007e60:	f7f9 fd7a 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e64:	4b0f      	ldr	r3, [pc, #60]	; (8007ea4 <HAL_PCD_MspInit+0xa0>)
 8007e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e68:	4a0e      	ldr	r2, [pc, #56]	; (8007ea4 <HAL_PCD_MspInit+0xa0>)
 8007e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6e:	6353      	str	r3, [r2, #52]	; 0x34
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <HAL_PCD_MspInit+0xa0>)
 8007e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e78:	4a0a      	ldr	r2, [pc, #40]	; (8007ea4 <HAL_PCD_MspInit+0xa0>)
 8007e7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e7e:	6453      	str	r3, [r2, #68]	; 0x44
 8007e80:	4b08      	ldr	r3, [pc, #32]	; (8007ea4 <HAL_PCD_MspInit+0xa0>)
 8007e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2100      	movs	r1, #0
 8007e90:	2043      	movs	r0, #67	; 0x43
 8007e92:	f7f9 fd2a 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e96:	2043      	movs	r0, #67	; 0x43
 8007e98:	f7f9 fd43 	bl	8001922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e9c:	bf00      	nop
 8007e9e:	3728      	adds	r7, #40	; 0x28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	40023800 	.word	0x40023800
 8007ea8:	40020000 	.word	0x40020000

08007eac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	f7fe fbf1 	bl	80066aa <USBD_LL_SetupStage>
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007ee2:	78fa      	ldrb	r2, [r7, #3]
 8007ee4:	6879      	ldr	r1, [r7, #4]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	4413      	add	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	440b      	add	r3, r1
 8007ef0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	78fb      	ldrb	r3, [r7, #3]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	f7fe fc2b 	bl	8006754 <USBD_LL_DataOutStage>
}
 8007efe:	bf00      	nop
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b082      	sub	sp, #8
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007f18:	78fa      	ldrb	r2, [r7, #3]
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	00db      	lsls	r3, r3, #3
 8007f20:	4413      	add	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	440b      	add	r3, r1
 8007f26:	3320      	adds	r3, #32
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	f7fe fcc4 	bl	80068ba <USBD_LL_DataInStage>
}
 8007f32:	bf00      	nop
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fe fdfe 	bl	8006b4a <USBD_LL_SOF>
}
 8007f4e:	bf00      	nop
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b084      	sub	sp, #16
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	79db      	ldrb	r3, [r3, #7]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d102      	bne.n	8007f70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
 8007f6e:	e008      	b.n	8007f82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	79db      	ldrb	r3, [r3, #7]
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d102      	bne.n	8007f7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	73fb      	strb	r3, [r7, #15]
 8007f7c:	e001      	b.n	8007f82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007f7e:	f7f8 fdd5 	bl	8000b2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007f88:	7bfa      	ldrb	r2, [r7, #15]
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fe fd98 	bl	8006ac2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fe fd40 	bl	8006a1e <USBD_LL_Reset>
}
 8007f9e:	bf00      	nop
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fe fd93 	bl	8006ae2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	6812      	ldr	r2, [r2, #0]
 8007fca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fce:	f043 0301 	orr.w	r3, r3, #1
 8007fd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	7adb      	ldrb	r3, [r3, #11]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d005      	beq.n	8007fe8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fdc:	4b04      	ldr	r3, [pc, #16]	; (8007ff0 <HAL_PCD_SuspendCallback+0x48>)
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	4a03      	ldr	r2, [pc, #12]	; (8007ff0 <HAL_PCD_SuspendCallback+0x48>)
 8007fe2:	f043 0306 	orr.w	r3, r3, #6
 8007fe6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	e000ed00 	.word	0xe000ed00

08007ff4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe fd89 	bl	8006b1a <USBD_LL_Resume>
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008022:	78fa      	ldrb	r2, [r7, #3]
 8008024:	4611      	mov	r1, r2
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fde1 	bl	8006bee <USBD_LL_IsoOUTIncomplete>
}
 800802c:	bf00      	nop
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008046:	78fa      	ldrb	r2, [r7, #3]
 8008048:	4611      	mov	r1, r2
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe fd9d 	bl	8006b8a <USBD_LL_IsoINIncomplete>
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe fdf3 	bl	8006c52 <USBD_LL_DevConnected>
}
 800806c:	bf00      	nop
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe fdf0 	bl	8006c68 <USBD_LL_DevDisconnected>
}
 8008088:	bf00      	nop
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d13c      	bne.n	800811a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80080a0:	4a20      	ldr	r2, [pc, #128]	; (8008124 <USBD_LL_Init+0x94>)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a1e      	ldr	r2, [pc, #120]	; (8008124 <USBD_LL_Init+0x94>)
 80080ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80080b0:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <USBD_LL_Init+0x94>)
 80080b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80080b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80080b8:	4b1a      	ldr	r3, [pc, #104]	; (8008124 <USBD_LL_Init+0x94>)
 80080ba:	2204      	movs	r2, #4
 80080bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80080be:	4b19      	ldr	r3, [pc, #100]	; (8008124 <USBD_LL_Init+0x94>)
 80080c0:	2202      	movs	r2, #2
 80080c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80080c4:	4b17      	ldr	r3, [pc, #92]	; (8008124 <USBD_LL_Init+0x94>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80080ca:	4b16      	ldr	r3, [pc, #88]	; (8008124 <USBD_LL_Init+0x94>)
 80080cc:	2202      	movs	r2, #2
 80080ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80080d0:	4b14      	ldr	r3, [pc, #80]	; (8008124 <USBD_LL_Init+0x94>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80080d6:	4b13      	ldr	r3, [pc, #76]	; (8008124 <USBD_LL_Init+0x94>)
 80080d8:	2200      	movs	r2, #0
 80080da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80080dc:	4b11      	ldr	r3, [pc, #68]	; (8008124 <USBD_LL_Init+0x94>)
 80080de:	2200      	movs	r2, #0
 80080e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80080e2:	4b10      	ldr	r3, [pc, #64]	; (8008124 <USBD_LL_Init+0x94>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80080e8:	4b0e      	ldr	r3, [pc, #56]	; (8008124 <USBD_LL_Init+0x94>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80080ee:	480d      	ldr	r0, [pc, #52]	; (8008124 <USBD_LL_Init+0x94>)
 80080f0:	f7f9 fde6 	bl	8001cc0 <HAL_PCD_Init>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d001      	beq.n	80080fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80080fa:	f7f8 fd17 	bl	8000b2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80080fe:	2180      	movs	r1, #128	; 0x80
 8008100:	4808      	ldr	r0, [pc, #32]	; (8008124 <USBD_LL_Init+0x94>)
 8008102:	f7fa fff8 	bl	80030f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008106:	2240      	movs	r2, #64	; 0x40
 8008108:	2100      	movs	r1, #0
 800810a:	4806      	ldr	r0, [pc, #24]	; (8008124 <USBD_LL_Init+0x94>)
 800810c:	f7fa ffac 	bl	8003068 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008110:	2280      	movs	r2, #128	; 0x80
 8008112:	2101      	movs	r1, #1
 8008114:	4803      	ldr	r0, [pc, #12]	; (8008124 <USBD_LL_Init+0x94>)
 8008116:	f7fa ffa7 	bl	8003068 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	2000070c 	.word	0x2000070c

08008128 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800813e:	4618      	mov	r0, r3
 8008140:	f7f9 fecd 	bl	8001ede <HAL_PCD_Start>
 8008144:	4603      	mov	r3, r0
 8008146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	4618      	mov	r0, r3
 800814c:	f000 f930 	bl	80083b0 <USBD_Get_USB_Status>
 8008150:	4603      	mov	r3, r0
 8008152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008154:	7bbb      	ldrb	r3, [r7, #14]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	4608      	mov	r0, r1
 8008168:	4611      	mov	r1, r2
 800816a:	461a      	mov	r2, r3
 800816c:	4603      	mov	r3, r0
 800816e:	70fb      	strb	r3, [r7, #3]
 8008170:	460b      	mov	r3, r1
 8008172:	70bb      	strb	r3, [r7, #2]
 8008174:	4613      	mov	r3, r2
 8008176:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008186:	78bb      	ldrb	r3, [r7, #2]
 8008188:	883a      	ldrh	r2, [r7, #0]
 800818a:	78f9      	ldrb	r1, [r7, #3]
 800818c:	f7fa fba1 	bl	80028d2 <HAL_PCD_EP_Open>
 8008190:	4603      	mov	r3, r0
 8008192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	4618      	mov	r0, r3
 8008198:	f000 f90a 	bl	80083b0 <USBD_Get_USB_Status>
 800819c:	4603      	mov	r3, r0
 800819e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	460b      	mov	r3, r1
 80081b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081c4:	78fa      	ldrb	r2, [r7, #3]
 80081c6:	4611      	mov	r1, r2
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fa fbea 	bl	80029a2 <HAL_PCD_EP_Close>
 80081ce:	4603      	mov	r3, r0
 80081d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 f8eb 	bl	80083b0 <USBD_Get_USB_Status>
 80081da:	4603      	mov	r3, r0
 80081dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081de:	7bbb      	ldrb	r3, [r7, #14]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008202:	78fa      	ldrb	r2, [r7, #3]
 8008204:	4611      	mov	r1, r2
 8008206:	4618      	mov	r0, r3
 8008208:	f7fa fc8a 	bl	8002b20 <HAL_PCD_EP_SetStall>
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 f8cc 	bl	80083b0 <USBD_Get_USB_Status>
 8008218:	4603      	mov	r3, r0
 800821a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800821c:	7bbb      	ldrb	r3, [r7, #14]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	460b      	mov	r3, r1
 8008230:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008240:	78fa      	ldrb	r2, [r7, #3]
 8008242:	4611      	mov	r1, r2
 8008244:	4618      	mov	r0, r3
 8008246:	f7fa fcce 	bl	8002be6 <HAL_PCD_EP_ClrStall>
 800824a:	4603      	mov	r3, r0
 800824c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	4618      	mov	r0, r3
 8008252:	f000 f8ad 	bl	80083b0 <USBD_Get_USB_Status>
 8008256:	4603      	mov	r3, r0
 8008258:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800825a:	7bbb      	ldrb	r3, [r7, #14]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	460b      	mov	r3, r1
 800826e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008276:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800827c:	2b00      	cmp	r3, #0
 800827e:	da0b      	bge.n	8008298 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008286:	68f9      	ldr	r1, [r7, #12]
 8008288:	4613      	mov	r3, r2
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	4413      	add	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	440b      	add	r3, r1
 8008292:	3316      	adds	r3, #22
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	e00b      	b.n	80082b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800829e:	68f9      	ldr	r1, [r7, #12]
 80082a0:	4613      	mov	r3, r2
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	f203 2356 	addw	r3, r3, #598	; 0x256
 80082ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082d6:	78fa      	ldrb	r2, [r7, #3]
 80082d8:	4611      	mov	r1, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fa fad5 	bl	800288a <HAL_PCD_SetAddress>
 80082e0:	4603      	mov	r3, r0
 80082e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 f862 	bl	80083b0 <USBD_Get_USB_Status>
 80082ec:	4603      	mov	r3, r0
 80082ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b086      	sub	sp, #24
 80082fe:	af00      	add	r7, sp, #0
 8008300:	60f8      	str	r0, [r7, #12]
 8008302:	607a      	str	r2, [r7, #4]
 8008304:	603b      	str	r3, [r7, #0]
 8008306:	460b      	mov	r3, r1
 8008308:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008318:	7af9      	ldrb	r1, [r7, #11]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	f7fa fbc5 	bl	8002aac <HAL_PCD_EP_Transmit>
 8008322:	4603      	mov	r3, r0
 8008324:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f841 	bl	80083b0 <USBD_Get_USB_Status>
 800832e:	4603      	mov	r3, r0
 8008330:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008332:	7dbb      	ldrb	r3, [r7, #22]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3718      	adds	r7, #24
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	607a      	str	r2, [r7, #4]
 8008346:	603b      	str	r3, [r7, #0]
 8008348:	460b      	mov	r3, r1
 800834a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800835a:	7af9      	ldrb	r1, [r7, #11]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	f7fa fb69 	bl	8002a36 <HAL_PCD_EP_Receive>
 8008364:	4603      	mov	r3, r0
 8008366:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	4618      	mov	r0, r3
 800836c:	f000 f820 	bl	80083b0 <USBD_Get_USB_Status>
 8008370:	4603      	mov	r3, r0
 8008372:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008374:	7dbb      	ldrb	r3, [r7, #22]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
	...

08008380 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008388:	4b03      	ldr	r3, [pc, #12]	; (8008398 <USBD_static_malloc+0x18>)
}
 800838a:	4618      	mov	r0, r3
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	20000bf0 	.word	0x20000bf0

0800839c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]

}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d817      	bhi.n	80083f4 <USBD_Get_USB_Status+0x44>
 80083c4:	a201      	add	r2, pc, #4	; (adr r2, 80083cc <USBD_Get_USB_Status+0x1c>)
 80083c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ca:	bf00      	nop
 80083cc:	080083dd 	.word	0x080083dd
 80083d0:	080083e3 	.word	0x080083e3
 80083d4:	080083e9 	.word	0x080083e9
 80083d8:	080083ef 	.word	0x080083ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	73fb      	strb	r3, [r7, #15]
    break;
 80083e0:	e00b      	b.n	80083fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083e2:	2303      	movs	r3, #3
 80083e4:	73fb      	strb	r3, [r7, #15]
    break;
 80083e6:	e008      	b.n	80083fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083e8:	2301      	movs	r3, #1
 80083ea:	73fb      	strb	r3, [r7, #15]
    break;
 80083ec:	e005      	b.n	80083fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083ee:	2303      	movs	r3, #3
 80083f0:	73fb      	strb	r3, [r7, #15]
    break;
 80083f2:	e002      	b.n	80083fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083f4:	2303      	movs	r3, #3
 80083f6:	73fb      	strb	r3, [r7, #15]
    break;
 80083f8:	bf00      	nop
  }
  return usb_status;
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <memset>:
 8008408:	4402      	add	r2, r0
 800840a:	4603      	mov	r3, r0
 800840c:	4293      	cmp	r3, r2
 800840e:	d100      	bne.n	8008412 <memset+0xa>
 8008410:	4770      	bx	lr
 8008412:	f803 1b01 	strb.w	r1, [r3], #1
 8008416:	e7f9      	b.n	800840c <memset+0x4>

08008418 <__libc_init_array>:
 8008418:	b570      	push	{r4, r5, r6, lr}
 800841a:	4d0d      	ldr	r5, [pc, #52]	; (8008450 <__libc_init_array+0x38>)
 800841c:	4c0d      	ldr	r4, [pc, #52]	; (8008454 <__libc_init_array+0x3c>)
 800841e:	1b64      	subs	r4, r4, r5
 8008420:	10a4      	asrs	r4, r4, #2
 8008422:	2600      	movs	r6, #0
 8008424:	42a6      	cmp	r6, r4
 8008426:	d109      	bne.n	800843c <__libc_init_array+0x24>
 8008428:	4d0b      	ldr	r5, [pc, #44]	; (8008458 <__libc_init_array+0x40>)
 800842a:	4c0c      	ldr	r4, [pc, #48]	; (800845c <__libc_init_array+0x44>)
 800842c:	f000 f818 	bl	8008460 <_init>
 8008430:	1b64      	subs	r4, r4, r5
 8008432:	10a4      	asrs	r4, r4, #2
 8008434:	2600      	movs	r6, #0
 8008436:	42a6      	cmp	r6, r4
 8008438:	d105      	bne.n	8008446 <__libc_init_array+0x2e>
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008440:	4798      	blx	r3
 8008442:	3601      	adds	r6, #1
 8008444:	e7ee      	b.n	8008424 <__libc_init_array+0xc>
 8008446:	f855 3b04 	ldr.w	r3, [r5], #4
 800844a:	4798      	blx	r3
 800844c:	3601      	adds	r6, #1
 800844e:	e7f2      	b.n	8008436 <__libc_init_array+0x1e>
 8008450:	080084f0 	.word	0x080084f0
 8008454:	080084f0 	.word	0x080084f0
 8008458:	080084f0 	.word	0x080084f0
 800845c:	080084f4 	.word	0x080084f4

08008460 <_init>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	bf00      	nop
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr

0800846c <_fini>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr
